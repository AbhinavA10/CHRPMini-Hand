

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Jun 20 16:56:08 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25  0000                     
    26                           ; Version 1.42
    27                           ; Generated 13/04/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F25K50 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	idataCOMRAM
    62  002008                     __pidataCOMRAM:
    63                           	opt stack 0
    64                           
    65                           ;initializer for _arcMinPos
    66  002008  FF                 	db	255
    67  002009  FF                 	db	255
    68  00200A  FF                 	db	255
    69  00200B  FF                 	db	255
    70  00200C  FF                 	db	255
    71  0000                     _ANSELC	set	3933
    72  0000                     _ANSELB	set	3932
    73  0000                     _ANSELA	set	3931
    74  0000                     _LATBbits	set	3978
    75  0000                     _PORTEbits	set	3972
    76  0000                     _ADRESH	set	4036
    77  0000                     _LATAbits	set	3977
    78  0000                     _ADCON2	set	4032
    79  0000                     _ADCON1	set	4033
    80  0000                     _ADCON0	set	4034
    81  0000                     _PORTC	set	3970
    82  0000                     _PORTB	set	3969
    83  0000                     _PORTA	set	3968
    84  0000                     _T0CON	set	4053
    85  0000                     _TRISC	set	3988
    86  0000                     _LATC	set	3979
    87  0000                     _TRISB	set	3987
    88  0000                     _LATB	set	3978
    89  0000                     _TRISA	set	3986
    90  0000                     _LATA	set	3977
    91  0000                     _ACTCON	set	4021
    92  0000                     _OSCCON2	set	4050
    93  0000                     _OSCCON	set	4051
    94  0000                     _OSCTUNE	set	3995
    95  0000                     _GO	set	32273
    96  0000                     _ADON	set	32272
    97  0000                     _PLLRDY	set	32407
    98                           
    99                           ; #config settings
   100  0000                     
   101                           	psect	cinit
   102  007A3A                     __pcinit:
   103                           	opt stack 0
   104  007A3A                     start_initialization:
   105                           	opt stack 0
   106  007A3A                     __initialization:
   107                           	opt stack 0
   108                           
   109                           ; Initialize objects allocated to COMRAM (5 bytes)
   110                           ; load TBLPTR registers with __pidataCOMRAM
   111  007A3A  0E08               	movlw	low __pidataCOMRAM
   112  007A3C  6EF6               	movwf	tblptrl,c
   113  007A3E  0E20               	movlw	high __pidataCOMRAM
   114  007A40  6EF7               	movwf	tblptrh,c
   115  007A42  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   116  007A44  6EF8               	movwf	tblptru,c
   117  007A46  EE00  F022         	lfsr	0,__pdataCOMRAM
   118  007A4A  EE10 F005          	lfsr	1,5
   119  007A4E                     copy_data0:
   120  007A4E  0009               	tblrd		*+
   121  007A50  CFF5 FFEE          	movff	tablat,postinc0
   122  007A54  50E5               	movf	postdec1,w,c
   123  007A56  50E1               	movf	fsr1l,w,c
   124  007A58  E1FA               	bnz	copy_data0
   125                           
   126                           ; Clear objects allocated to COMRAM (19 bytes)
   127  007A5A  EE00  F001         	lfsr	0,__pbssCOMRAM
   128  007A5E  0E13               	movlw	19
   129  007A60                     clear_0:
   130  007A60  6AEE               	clrf	postinc0,c
   131  007A62  06E8               	decf	wreg,f,c
   132  007A64  E1FD               	bnz	clear_0
   133  007A66                     end_of_initialization:
   134                           	opt stack 0
   135  007A66                     __end_of__initialization:
   136                           	opt stack 0
   137  007A66  0E00               	movlw	low (__Lmediumconst shr (0+16))
   138  007A68  6EF8               	movwf	tblptru,c
   139  007A6A  0100               	movlb	0
   140  007A6C  EF9A  F03D         	goto	_main	;jump to C main() function
   141                           tblptru	equ	0xFF8
   142                           tblptrh	equ	0xFF7
   143                           tblptrl	equ	0xFF6
   144                           tablat	equ	0xFF5
   145                           postinc0	equ	0xFEE
   146                           wreg	equ	0xFE8
   147                           postdec1	equ	0xFE5
   148                           fsr1l	equ	0xFE1
   149                           
   150                           	psect	bssCOMRAM
   151  000001                     __pbssCOMRAM:
   152                           	opt stack 0
   153  000001                     _arcPos:
   154                           	opt stack 0
   155  000001                     	ds	5
   156  000006                     _nCalibrationCounter:
   157                           	opt stack 0
   158  000006                     	ds	2
   159  000008                     _nDelay:
   160                           	opt stack 0
   161  000008                     	ds	2
   162  00000A                     _calibMode:
   163                           	opt stack 0
   164  00000A                     	ds	1
   165  00000B                     _buttonWasLetGo:
   166                           	opt stack 0
   167  00000B                     	ds	1
   168  00000C                     _isPressedForGesture:
   169                           	opt stack 0
   170  00000C                     	ds	1
   171  00000D                     _isPressedForMode:
   172                           	opt stack 0
   173  00000D                     	ds	1
   174  00000E                     _modeSelect:
   175                           	opt stack 0
   176  00000E                     	ds	1
   177  00000F                     _cGesture:
   178                           	opt stack 0
   179  00000F                     	ds	1
   180  000010                     _cCycleIncrement:
   181                           	opt stack 0
   182  000010                     	ds	1
   183  000011                     _cCountFingerCycle:
   184                           	opt stack 0
   185  000011                     	ds	1
   186  000012                     _cDelay:
   187                           	opt stack 0
   188  000012                     	ds	1
   189  000013                     _cMode:
   190                           	opt stack 0
   191  000013                     	ds	1
   192                           tblptru	equ	0xFF8
   193                           tblptrh	equ	0xFF7
   194                           tblptrl	equ	0xFF6
   195                           tablat	equ	0xFF5
   196                           postinc0	equ	0xFEE
   197                           wreg	equ	0xFE8
   198                           postdec1	equ	0xFE5
   199                           fsr1l	equ	0xFE1
   200                           
   201                           	psect	dataCOMRAM
   202  000022                     __pdataCOMRAM:
   203                           	opt stack 0
   204  000022                     _arcMinPos:
   205                           	opt stack 0
   206  000022                     	ds	5
   207                           tblptru	equ	0xFF8
   208                           tblptrh	equ	0xFF7
   209                           tblptrl	equ	0xFF6
   210                           tablat	equ	0xFF5
   211                           postinc0	equ	0xFEE
   212                           wreg	equ	0xFE8
   213                           postdec1	equ	0xFE5
   214                           fsr1l	equ	0xFE1
   215                           
   216                           	psect	cstackCOMRAM
   217  000014                     __pcstackCOMRAM:
   218                           	opt stack 0
   219  000014                     ??_pulseServos:
   220  000014                     ?___awdiv:
   221                           	opt stack 0
   222  000014                     setPos@b:
   223                           	opt stack 0
   224  000014                     beep@pitch:
   225                           	opt stack 0
   226  000014                     ___awdiv@dividend:
   227                           	opt stack 0
   228                           
   229                           ; 2 bytes @ 0x0
   230  000014                     	ds	1
   231  000015                     setPos@c:
   232                           	opt stack 0
   233  000015                     pulseServos@i:
   234                           	opt stack 0
   235                           
   236                           ; 1 bytes @ 0x1
   237  000015                     	ds	1
   238  000016                     setPos@d:
   239                           	opt stack 0
   240  000016                     pulseServos@i_220:
   241                           	opt stack 0
   242  000016                     beep@duration:
   243                           	opt stack 0
   244  000016                     ___awdiv@divisor:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x2
   248  000016                     	ds	1
   249  000017                     setPos@e:
   250                           	opt stack 0
   251  000017                     pulseServos@i_221:
   252                           	opt stack 0
   253                           
   254                           ; 1 bytes @ 0x3
   255  000017                     	ds	1
   256  000018                     ??_beep:
   257  000018                     setPos@a:
   258                           	opt stack 0
   259  000018                     pulseServos@i_222:
   260                           	opt stack 0
   261  000018                     ___awdiv@counter:
   262                           	opt stack 0
   263                           
   264                           ; 1 bytes @ 0x4
   265  000018                     	ds	1
   266  000019                     pulseServos@i_223:
   267                           	opt stack 0
   268  000019                     ___awdiv@sign:
   269                           	opt stack 0
   270  000019                     beep@j:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0x5
   274  000019                     	ds	1
   275  00001A                     ___awdiv@quotient:
   276                           	opt stack 0
   277                           
   278                           ; 2 bytes @ 0x6
   279  00001A                     	ds	1
   280  00001B                     _checkMode$207:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x7
   284  00001B                     	ds	1
   285  00001C                     ??_delay:
   286                           
   287                           ; 1 bytes @ 0x8
   288  00001C                     	ds	1
   289  00001D                     _checkMode$209:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x9
   293  00001D                     	ds	2
   294  00001F                     checkMode@i:
   295                           	opt stack 0
   296                           
   297                           ; 1 bytes @ 0xB
   298  00001F                     	ds	1
   299  000020                     checkMode@i_208:
   300                           	opt stack 0
   301  000020                     delay@i:
   302                           	opt stack 0
   303                           
   304                           ; 2 bytes @ 0xC
   305  000020                     	ds	1
   306  000021                     checkMode@cTempMode:
   307                           	opt stack 0
   308                           
   309                           ; 1 bytes @ 0xD
   310  000021                     	ds	1
   311  000022                     tblptru	equ	0xFF8
   312                           tblptrh	equ	0xFF7
   313                           tblptrl	equ	0xFF6
   314                           tablat	equ	0xFF5
   315                           postinc0	equ	0xFEE
   316                           wreg	equ	0xFE8
   317                           postdec1	equ	0xFE5
   318                           fsr1l	equ	0xFE1
   319                           
   320                           ; 1 bytes @ 0xE
   321 ;;
   322 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   323 ;;
   324 ;; *************** function _main *****************
   325 ;; Defined at:
   326 ;;		line 357 in file "Hand.c"
   327 ;; Parameters:    Size  Location     Type
   328 ;;		None
   329 ;; Auto vars:     Size  Location     Type
   330 ;;		None
   331 ;; Return value:  Size  Location     Type
   332 ;;                  2  216[None  ] int 
   333 ;; Registers used:
   334 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   335 ;; Tracked objects:
   336 ;;		On entry : 0/0
   337 ;;		On exit  : 0/0
   338 ;;		Unchanged: 0/0
   339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   340 ;;      Params:         0       0       0       0       0       0       0       0       0
   341 ;;      Locals:         0       0       0       0       0       0       0       0       0
   342 ;;      Temps:          0       0       0       0       0       0       0       0       0
   343 ;;      Totals:         0       0       0       0       0       0       0       0       0
   344 ;;Total ram usage:        0 bytes
   345 ;; Hardware stack levels required when called:    2
   346 ;; This function calls:
   347 ;;		_checkMode
   348 ;;		_commands
   349 ;;		_delay
   350 ;;		_heyKidWantSomeCandy
   351 ;;		_initANA
   352 ;;		_initOsc
   353 ;;		_initPorts
   354 ;;		_initVariables
   355 ;;		_pulseServos
   356 ;;		_setPos
   357 ;; This function is called by:
   358 ;;		Startup code after reset
   359 ;; This function uses a non-reentrant model
   360 ;;
   361                           
   362                           	psect	text0
   363  007B34                     __ptext0:
   364                           	opt stack 0
   365  007B34                     _main:
   366                           	opt stack 29
   367                           
   368                           ;Hand.c: 358: initOsc();
   369                           
   370                           ;incstack = 0
   371  007B34  ECE0  F03C         	call	_initOsc	;wreg free
   372                           
   373                           ;Hand.c: 359: initPorts();
   374  007B38  EC38  F03D         	call	_initPorts	;wreg free
   375                           
   376                           ;Hand.c: 360: initANA();
   377  007B3C  ECF7  F03C         	call	_initANA	;wreg free
   378                           
   379                           ;Hand.c: 361: initVariables();
   380  007B40  EC78  F03D         	call	_initVariables	;wreg free
   381  007B44                     l1554:
   382                           
   383                           ;Hand.c: 363: if (!modeSelect) {
   384  007B44  500E               	movf	_modeSelect,w,c
   385  007B46  B4D8               	btfsc	status,2,c
   386  007B48  D013               	goto	l1566
   387  007B4A  D01C               	goto	l1568
   388  007B4C                     l1558:
   389                           
   390                           ;Hand.c: 370: setPos(0, 0, 0, 0, 0);
   391  007B4C  0E00               	movlw	0
   392  007B4E  6E14               	movwf	setPos@b,c
   393  007B50  0E00               	movlw	0
   394  007B52  6E15               	movwf	setPos@c,c
   395  007B54  0E00               	movlw	0
   396  007B56  6E16               	movwf	setPos@d,c
   397  007B58  0E00               	movlw	0
   398  007B5A  6E17               	movwf	setPos@e,c
   399  007B5C  0E00               	movlw	0
   400  007B5E  ECEB  F03C         	call	_setPos
   401                           
   402                           ;Hand.c: 371: break;
   403  007B62  D010               	goto	l1568
   404  007B64                     l1560:
   405                           
   406                           ;Hand.c: 373: commands();
   407  007B64  ECB8  F03E         	call	_commands	;wreg free
   408                           
   409                           ;Hand.c: 374: break;
   410  007B68  D00D               	goto	l1568
   411  007B6A                     l1562:
   412                           
   413                           ;Hand.c: 376: heyKidWantSomeCandy();
   414  007B6A  EC05  F03D         	call	_heyKidWantSomeCandy	;wreg free
   415                           
   416                           ;Hand.c: 380: }
   417                           
   418                           ;Hand.c: 379: break;
   419                           
   420                           ;Hand.c: 378: default:
   421                           
   422                           ;Hand.c: 377: break;
   423  007B6E  D00A               	goto	l1568
   424  007B70                     l1566:
   425  007B70  5013               	movf	_cMode,w,c
   426                           
   427                           ; Switch size 1, requested type "space"
   428                           ; Number of cases is 3, Range of values is 0 to 2
   429                           ; switch strategies available:
   430                           ; Name         Instructions Cycles
   431                           ; simple_byte           10     6 (average)
   432                           ;	Chosen strategy is simple_byte
   433  007B72  0A00               	xorlw	0	; case 0
   434  007B74  B4D8               	btfsc	status,2,c
   435  007B76  D7EA               	goto	l1558
   436  007B78  0A01               	xorlw	1	; case 1
   437  007B7A  B4D8               	btfsc	status,2,c
   438  007B7C  D7F3               	goto	l1560
   439  007B7E  0A03               	xorlw	3	; case 2
   440  007B80  B4D8               	btfsc	status,2,c
   441  007B82  D7F3               	goto	l1562
   442  007B84                     l1568:
   443                           
   444                           ;Hand.c: 381: }
   445                           ;Hand.c: 382: if (!calibMode || modeSelect || cMode != 0) {
   446  007B84  500A               	movf	_calibMode,w,c
   447  007B86  B4D8               	btfsc	status,2,c
   448  007B88  D006               	goto	l1574
   449  007B8A  500E               	movf	_modeSelect,w,c
   450  007B8C  A4D8               	btfss	status,2,c
   451  007B8E  D003               	goto	l1574
   452  007B90  5013               	movf	_cMode,w,c
   453  007B92  B4D8               	btfsc	status,2,c
   454  007B94  D004               	goto	l1576
   455  007B96                     l1574:
   456                           
   457                           ;Hand.c: 383: pulseServos();
   458  007B96  EC53  F03E         	call	_pulseServos	;wreg free
   459                           
   460                           ;Hand.c: 384: delay();
   461  007B9A  ECD3  F03D         	call	_delay	;wreg free
   462  007B9E                     l1576:
   463                           
   464                           ;Hand.c: 385: }
   465                           ;Hand.c: 386: cMode = checkMode();
   466  007B9E  EC5A  F03F         	call	_checkMode	;wreg free
   467  007BA2  6E13               	movwf	_cMode,c
   468  007BA4  D7CF               	goto	l1554
   469  007BA6                     __end_of_main:
   470                           	opt stack 0
   471                           tblptru	equ	0xFF8
   472                           tblptrh	equ	0xFF7
   473                           tblptrl	equ	0xFF6
   474                           tablat	equ	0xFF5
   475                           postinc0	equ	0xFEE
   476                           wreg	equ	0xFE8
   477                           postdec1	equ	0xFE5
   478                           fsr1l	equ	0xFE1
   479                           status	equ	0xFD8
   480                           
   481 ;; *************** function _pulseServos *****************
   482 ;; Defined at:
   483 ;;		line 169 in file "Hand.c"
   484 ;; Parameters:    Size  Location     Type
   485 ;;		None
   486 ;; Auto vars:     Size  Location     Type
   487 ;;  i               1    5[COMRAM] unsigned char 
   488 ;;  i               1    4[COMRAM] unsigned char 
   489 ;;  i               1    3[COMRAM] unsigned char 
   490 ;;  i               1    2[COMRAM] unsigned char 
   491 ;;  i               1    1[COMRAM] unsigned char 
   492 ;; Return value:  Size  Location     Type
   493 ;;                  1    wreg      void 
   494 ;; Registers used:
   495 ;;		wreg, status,2, status,0
   496 ;; Tracked objects:
   497 ;;		On entry : 0/0
   498 ;;		On exit  : 0/0
   499 ;;		Unchanged: 0/0
   500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   501 ;;      Params:         0       0       0       0       0       0       0       0       0
   502 ;;      Locals:         5       0       0       0       0       0       0       0       0
   503 ;;      Temps:          1       0       0       0       0       0       0       0       0
   504 ;;      Totals:         6       0       0       0       0       0       0       0       0
   505 ;;Total ram usage:        6 bytes
   506 ;; Hardware stack levels used:    1
   507 ;; This function calls:
   508 ;;		Nothing
   509 ;; This function is called by:
   510 ;;		_main
   511 ;; This function uses a non-reentrant model
   512 ;;
   513                           
   514                           	psect	text1
   515  007CA6                     __ptext1:
   516                           	opt stack 0
   517  007CA6                     _pulseServos:
   518                           	opt stack 30
   519                           
   520                           ;Hand.c: 177: LATBbits.LATB7 = 1;
   521                           
   522                           ;incstack = 0
   523  007CA6  8E8A               	bsf	3978,7,c	;volatile
   524                           
   525                           ;Hand.c: 178: _delay((unsigned long)((540)*(48000000/4000000.0)));
   526  007CA8  0E09               	movlw	9
   527  007CAA  6E14               	movwf	??_pulseServos& (0+255),c
   528  007CAC  0E69               	movlw	105
   529  007CAE                     u1247:
   530  007CAE  2EE8               	decfsz	wreg,f,c
   531  007CB0  D7FE               	bra	u1247
   532  007CB2  2E14               	decfsz	??_pulseServos& (0+255),f,c
   533  007CB4  D7FC               	bra	u1247
   534  007CB6  F000               	nop	
   535                           
   536                           ;Hand.c: 179: for (unsigned char i = arcPos[0]; i != 0; i--) {
   537  007CB8  C001  F015         	movff	_arcPos,pulseServos@i
   538  007CBC                     l1060:
   539  007CBC  5015               	movf	pulseServos@i,w,c
   540  007CBE  B4D8               	btfsc	status,2,c
   541  007CC0  D005               	goto	l158
   542                           
   543                           ;Hand.c: 180: _delay((unsigned long)((6)*(48000000/4000000.0)));
   544  007CC2  0E18               	movlw	24
   545  007CC4                     u1257:
   546  007CC4  2EE8               	decfsz	wreg,f,c
   547  007CC6  D7FE               	bra	u1257
   548  007CC8  0615               	decf	pulseServos@i,f,c
   549  007CCA  D7F8               	goto	l1060
   550  007CCC                     l158:
   551                           
   552                           ;Hand.c: 182: }
   553                           ;Hand.c: 183: LATBbits.LATB7 = 0;
   554  007CCC  9E8A               	bcf	3978,7,c	;volatile
   555                           
   556                           ;Hand.c: 186: LATBbits.LATB6 = 1;
   557  007CCE  8C8A               	bsf	3978,6,c	;volatile
   558                           
   559                           ;Hand.c: 187: _delay((unsigned long)((540)*(48000000/4000000.0)));
   560  007CD0  0E09               	movlw	9
   561  007CD2  6E14               	movwf	??_pulseServos& (0+255),c
   562  007CD4  0E69               	movlw	105
   563  007CD6                     u1267:
   564  007CD6  2EE8               	decfsz	wreg,f,c
   565  007CD8  D7FE               	bra	u1267
   566  007CDA  2E14               	decfsz	??_pulseServos& (0+255),f,c
   567  007CDC  D7FC               	bra	u1267
   568  007CDE  F000               	nop	
   569                           
   570                           ;Hand.c: 188: for (unsigned char i = arcPos[1]; i != 0; i--) {
   571  007CE0  C002  F016         	movff	_arcPos+1,pulseServos@i_220
   572  007CE4                     l1074:
   573  007CE4  5016               	movf	pulseServos@i_220,w,c
   574  007CE6  B4D8               	btfsc	status,2,c
   575  007CE8  D005               	goto	l160
   576                           
   577                           ;Hand.c: 189: _delay((unsigned long)((6)*(48000000/4000000.0)));
   578  007CEA  0E18               	movlw	24
   579  007CEC                     u1277:
   580  007CEC  2EE8               	decfsz	wreg,f,c
   581  007CEE  D7FE               	bra	u1277
   582  007CF0  0616               	decf	pulseServos@i_220,f,c
   583  007CF2  D7F8               	goto	l1074
   584  007CF4                     l160:
   585                           
   586                           ;Hand.c: 190: }
   587                           ;Hand.c: 191: LATBbits.LATB6 = 0;
   588  007CF4  9C8A               	bcf	3978,6,c	;volatile
   589                           
   590                           ;Hand.c: 194: LATBbits.LATB5 = 1;
   591  007CF6  8A8A               	bsf	3978,5,c	;volatile
   592                           
   593                           ;Hand.c: 195: _delay((unsigned long)((540)*(48000000/4000000.0)));
   594  007CF8  0E09               	movlw	9
   595  007CFA  6E14               	movwf	??_pulseServos& (0+255),c
   596  007CFC  0E69               	movlw	105
   597  007CFE                     u1287:
   598  007CFE  2EE8               	decfsz	wreg,f,c
   599  007D00  D7FE               	bra	u1287
   600  007D02  2E14               	decfsz	??_pulseServos& (0+255),f,c
   601  007D04  D7FC               	bra	u1287
   602  007D06  F000               	nop	
   603                           
   604                           ;Hand.c: 196: for (unsigned char i = arcPos[2]; i != 0; i--) {
   605  007D08  C003  F017         	movff	_arcPos+2,pulseServos@i_221
   606  007D0C                     l1088:
   607  007D0C  5017               	movf	pulseServos@i_221,w,c
   608  007D0E  B4D8               	btfsc	status,2,c
   609  007D10  D005               	goto	l162
   610                           
   611                           ;Hand.c: 197: _delay((unsigned long)((6)*(48000000/4000000.0)));
   612  007D12  0E18               	movlw	24
   613  007D14                     u1297:
   614  007D14  2EE8               	decfsz	wreg,f,c
   615  007D16  D7FE               	bra	u1297
   616  007D18  0617               	decf	pulseServos@i_221,f,c
   617  007D1A  D7F8               	goto	l1088
   618  007D1C                     l162:
   619                           
   620                           ;Hand.c: 198: }
   621                           ;Hand.c: 199: LATBbits.LATB5 = 0;
   622  007D1C  9A8A               	bcf	3978,5,c	;volatile
   623                           
   624                           ;Hand.c: 202: LATBbits.LATB4 = 1;
   625  007D1E  888A               	bsf	3978,4,c	;volatile
   626                           
   627                           ;Hand.c: 203: _delay((unsigned long)((540)*(48000000/4000000.0)));
   628  007D20  0E09               	movlw	9
   629  007D22  6E14               	movwf	??_pulseServos& (0+255),c
   630  007D24  0E69               	movlw	105
   631  007D26                     u1307:
   632  007D26  2EE8               	decfsz	wreg,f,c
   633  007D28  D7FE               	bra	u1307
   634  007D2A  2E14               	decfsz	??_pulseServos& (0+255),f,c
   635  007D2C  D7FC               	bra	u1307
   636  007D2E  F000               	nop	
   637                           
   638                           ;Hand.c: 204: for (unsigned char i = arcPos[3]; i != 0; i--) {
   639  007D30  C004  F018         	movff	_arcPos+3,pulseServos@i_222
   640  007D34                     l1102:
   641  007D34  5018               	movf	pulseServos@i_222,w,c
   642  007D36  B4D8               	btfsc	status,2,c
   643  007D38  D005               	goto	l164
   644                           
   645                           ;Hand.c: 205: _delay((unsigned long)((6)*(48000000/4000000.0)));
   646  007D3A  0E18               	movlw	24
   647  007D3C                     u1317:
   648  007D3C  2EE8               	decfsz	wreg,f,c
   649  007D3E  D7FE               	bra	u1317
   650  007D40  0618               	decf	pulseServos@i_222,f,c
   651  007D42  D7F8               	goto	l1102
   652  007D44                     l164:
   653                           
   654                           ;Hand.c: 206: }
   655                           ;Hand.c: 207: LATBbits.LATB4 = 0;
   656  007D44  988A               	bcf	3978,4,c	;volatile
   657                           
   658                           ;Hand.c: 210: LATBbits.LATB2 = 1;
   659  007D46  848A               	bsf	3978,2,c	;volatile
   660                           
   661                           ;Hand.c: 211: _delay((unsigned long)((540)*(48000000/4000000.0)));
   662  007D48  0E09               	movlw	9
   663  007D4A  6E14               	movwf	??_pulseServos& (0+255),c
   664  007D4C  0E69               	movlw	105
   665  007D4E                     u1327:
   666  007D4E  2EE8               	decfsz	wreg,f,c
   667  007D50  D7FE               	bra	u1327
   668  007D52  2E14               	decfsz	??_pulseServos& (0+255),f,c
   669  007D54  D7FC               	bra	u1327
   670  007D56  F000               	nop	
   671                           
   672                           ;Hand.c: 212: for (unsigned char i = arcPos[4]; i != 0; i--) {
   673  007D58  C005  F019         	movff	_arcPos+4,pulseServos@i_223
   674  007D5C                     l1116:
   675  007D5C  5019               	movf	pulseServos@i_223,w,c
   676  007D5E  B4D8               	btfsc	status,2,c
   677  007D60  D005               	goto	l166
   678                           
   679                           ;Hand.c: 213: _delay((unsigned long)((6)*(48000000/4000000.0)));
   680  007D62  0E18               	movlw	24
   681  007D64                     u1337:
   682  007D64  2EE8               	decfsz	wreg,f,c
   683  007D66  D7FE               	bra	u1337
   684  007D68  0619               	decf	pulseServos@i_223,f,c
   685  007D6A  D7F8               	goto	l1116
   686  007D6C                     l166:
   687                           
   688                           ;Hand.c: 214: }
   689                           ;Hand.c: 215: LATBbits.LATB2 = 0;
   690  007D6C  948A               	bcf	3978,2,c	;volatile
   691  007D6E  0012               	return		;funcret
   692  007D70                     __end_of_pulseServos:
   693                           	opt stack 0
   694                           tblptru	equ	0xFF8
   695                           tblptrh	equ	0xFF7
   696                           tblptrl	equ	0xFF6
   697                           tablat	equ	0xFF5
   698                           postinc0	equ	0xFEE
   699                           wreg	equ	0xFE8
   700                           postdec1	equ	0xFE5
   701                           fsr1l	equ	0xFE1
   702                           status	equ	0xFD8
   703                           
   704 ;; *************** function _initVariables *****************
   705 ;; Defined at:
   706 ;;		line 69 in file "Hand.c"
   707 ;; Parameters:    Size  Location     Type
   708 ;;		None
   709 ;; Auto vars:     Size  Location     Type
   710 ;;		None
   711 ;; Return value:  Size  Location     Type
   712 ;;                  1    wreg      void 
   713 ;; Registers used:
   714 ;;		wreg, status,2, cstack
   715 ;; Tracked objects:
   716 ;;		On entry : 0/0
   717 ;;		On exit  : 0/0
   718 ;;		Unchanged: 0/0
   719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   720 ;;      Params:         0       0       0       0       0       0       0       0       0
   721 ;;      Locals:         0       0       0       0       0       0       0       0       0
   722 ;;      Temps:          0       0       0       0       0       0       0       0       0
   723 ;;      Totals:         0       0       0       0       0       0       0       0       0
   724 ;;Total ram usage:        0 bytes
   725 ;; Hardware stack levels used:    1
   726 ;; Hardware stack levels required when called:    1
   727 ;; This function calls:
   728 ;;		_setPos
   729 ;; This function is called by:
   730 ;;		_main
   731 ;; This function uses a non-reentrant model
   732 ;;
   733                           
   734                           	psect	text2
   735  007AF0                     __ptext2:
   736                           	opt stack 0
   737  007AF0                     _initVariables:
   738                           	opt stack 29
   739                           
   740                           ;Hand.c: 70: setPos(0, 0, 0, 0, 0);
   741                           
   742                           ;incstack = 0
   743  007AF0  0E00               	movlw	0
   744  007AF2  6E14               	movwf	setPos@b,c
   745  007AF4  0E00               	movlw	0
   746  007AF6  6E15               	movwf	setPos@c,c
   747  007AF8  0E00               	movlw	0
   748  007AFA  6E16               	movwf	setPos@d,c
   749  007AFC  0E00               	movlw	0
   750  007AFE  6E17               	movwf	setPos@e,c
   751  007B00  0E00               	movlw	0
   752  007B02  ECEB  F03C         	call	_setPos
   753                           
   754                           ;Hand.c: 71: modeSelect = 0;
   755  007B06  0E00               	movlw	0
   756  007B08  6E0E               	movwf	_modeSelect,c
   757                           
   758                           ;Hand.c: 72: isPressedForMode = 0;
   759  007B0A  0E00               	movlw	0
   760  007B0C  6E0D               	movwf	_isPressedForMode,c
   761                           
   762                           ;Hand.c: 73: isPressedForGesture = 0;
   763  007B0E  0E00               	movlw	0
   764  007B10  6E0C               	movwf	_isPressedForGesture,c
   765                           
   766                           ;Hand.c: 74: buttonWasLetGo = 1;
   767  007B12  0E01               	movlw	1
   768  007B14  6E0B               	movwf	_buttonWasLetGo,c
   769                           
   770                           ;Hand.c: 75: calibMode = 1;
   771  007B16  0E01               	movlw	1
   772  007B18  6E0A               	movwf	_calibMode,c
   773                           
   774                           ;Hand.c: 76: cMode = 0;
   775  007B1A  0E00               	movlw	0
   776  007B1C  6E13               	movwf	_cMode,c
   777                           
   778                           ;Hand.c: 77: cDelay = 0;
   779  007B1E  0E00               	movlw	0
   780  007B20  6E12               	movwf	_cDelay,c
   781                           
   782                           ;Hand.c: 78: cCountFingerCycle = 5;
   783  007B22  0E05               	movlw	5
   784  007B24  6E11               	movwf	_cCountFingerCycle,c
   785                           
   786                           ;Hand.c: 79: cCycleIncrement = 5;
   787  007B26  0E05               	movlw	5
   788  007B28  6E10               	movwf	_cCycleIncrement,c
   789                           
   790                           ;Hand.c: 80: nCalibrationCounter = 0;
   791  007B2A  0E00               	movlw	0
   792  007B2C  6E07               	movwf	_nCalibrationCounter+1,c
   793  007B2E  0E00               	movlw	0
   794  007B30  6E06               	movwf	_nCalibrationCounter,c
   795  007B32  0012               	return		;funcret
   796  007B34                     __end_of_initVariables:
   797                           	opt stack 0
   798                           tblptru	equ	0xFF8
   799                           tblptrh	equ	0xFF7
   800                           tblptrl	equ	0xFF6
   801                           tablat	equ	0xFF5
   802                           postinc0	equ	0xFEE
   803                           wreg	equ	0xFE8
   804                           postdec1	equ	0xFE5
   805                           fsr1l	equ	0xFE1
   806                           status	equ	0xFD8
   807                           
   808 ;; *************** function _initPorts *****************
   809 ;; Defined at:
   810 ;;		line 27 in file "CHRP3.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;		None
   813 ;; Auto vars:     Size  Location     Type
   814 ;;		None
   815 ;; Return value:  Size  Location     Type
   816 ;;                  1    wreg      void 
   817 ;; Registers used:
   818 ;;		wreg, status,2
   819 ;; Tracked objects:
   820 ;;		On entry : 0/0
   821 ;;		On exit  : 0/0
   822 ;;		Unchanged: 0/0
   823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   824 ;;      Params:         0       0       0       0       0       0       0       0       0
   825 ;;      Locals:         0       0       0       0       0       0       0       0       0
   826 ;;      Temps:          0       0       0       0       0       0       0       0       0
   827 ;;      Totals:         0       0       0       0       0       0       0       0       0
   828 ;;Total ram usage:        0 bytes
   829 ;; Hardware stack levels used:    1
   830 ;; This function calls:
   831 ;;		Nothing
   832 ;; This function is called by:
   833 ;;		_main
   834 ;; This function uses a non-reentrant model
   835 ;;
   836                           
   837                           	psect	text3
   838  007A70                     __ptext3:
   839                           	opt stack 0
   840  007A70                     _initPorts:
   841                           	opt stack 30
   842                           
   843                           ;CHRP3.c: 29: LATA = 0b00000000;
   844                           
   845                           ;incstack = 0
   846  007A70  0E00               	movlw	0
   847  007A72  6E89               	movwf	3977,c	;volatile
   848                           
   849                           ;CHRP3.c: 30: ANSELA = 0b00000000;
   850  007A74  0E00               	movlw	0
   851  007A76  010F               	movlb	15	; () banked
   852  007A78  6F5B               	movwf	91,b	;volatile
   853                           
   854                           ;CHRP3.c: 31: TRISA = 0b00101111;
   855  007A7A  0E2F               	movlw	47
   856  007A7C  6E92               	movwf	3986,c	;volatile
   857                           
   858                           ;CHRP3.c: 33: LATB = 0b00000000;
   859  007A7E  0E00               	movlw	0
   860  007A80  6E8A               	movwf	3978,c	;volatile
   861                           
   862                           ;CHRP3.c: 34: ANSELB = 0b00000000;
   863  007A82  0E00               	movlw	0
   864  007A84  010F               	movlb	15	; () banked
   865  007A86  6F5C               	movwf	92,b	;volatile
   866                           
   867                           ;CHRP3.c: 35: TRISB = 0b00000000;
   868  007A88  0E00               	movlw	0
   869  007A8A  6E93               	movwf	3987,c	;volatile
   870                           
   871                           ;CHRP3.c: 36: LATC = 0b00000000;
   872  007A8C  0E00               	movlw	0
   873  007A8E  6E8B               	movwf	3979,c	;volatile
   874                           
   875                           ;CHRP3.c: 37: ANSELC = 0b00000000;
   876  007A90  0E00               	movlw	0
   877  007A92  010F               	movlb	15	; () banked
   878  007A94  6F5D               	movwf	93,b	;volatile
   879                           
   880                           ;CHRP3.c: 38: TRISC = 0b10110000;
   881  007A96  0EB0               	movlw	176
   882  007A98  6E94               	movwf	3988,c	;volatile
   883                           
   884                           ;CHRP3.c: 41: T0CON = 0b10000001;
   885  007A9A  0E81               	movlw	129
   886  007A9C  6ED5               	movwf	4053,c	;volatile
   887                           
   888                           ;CHRP3.c: 44: PORTA = 0;
   889  007A9E  0E00               	movlw	0
   890  007AA0  6E80               	movwf	3968,c	;volatile
   891                           
   892                           ;CHRP3.c: 45: PORTB = 0;
   893  007AA2  0E00               	movlw	0
   894  007AA4  6E81               	movwf	3969,c	;volatile
   895                           
   896                           ;CHRP3.c: 46: PORTC = 0;
   897  007AA6  0E00               	movlw	0
   898  007AA8  6E82               	movwf	3970,c	;volatile
   899                           
   900                           ; BSR set to: 15
   901  007AAA  0012               	return		;funcret
   902  007AAC                     __end_of_initPorts:
   903                           	opt stack 0
   904                           tblptru	equ	0xFF8
   905                           tblptrh	equ	0xFF7
   906                           tblptrl	equ	0xFF6
   907                           tablat	equ	0xFF5
   908                           postinc0	equ	0xFEE
   909                           wreg	equ	0xFE8
   910                           postdec1	equ	0xFE5
   911                           fsr1l	equ	0xFE1
   912                           status	equ	0xFD8
   913                           
   914 ;; *************** function _initOsc *****************
   915 ;; Defined at:
   916 ;;		line 16 in file "CHRP3.c"
   917 ;; Parameters:    Size  Location     Type
   918 ;;		None
   919 ;; Auto vars:     Size  Location     Type
   920 ;;		None
   921 ;; Return value:  Size  Location     Type
   922 ;;                  1    wreg      void 
   923 ;; Registers used:
   924 ;;		wreg, status,2
   925 ;; Tracked objects:
   926 ;;		On entry : 0/0
   927 ;;		On exit  : 0/0
   928 ;;		Unchanged: 0/0
   929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   930 ;;      Params:         0       0       0       0       0       0       0       0       0
   931 ;;      Locals:         0       0       0       0       0       0       0       0       0
   932 ;;      Temps:          0       0       0       0       0       0       0       0       0
   933 ;;      Totals:         0       0       0       0       0       0       0       0       0
   934 ;;Total ram usage:        0 bytes
   935 ;; Hardware stack levels used:    1
   936 ;; This function calls:
   937 ;;		Nothing
   938 ;; This function is called by:
   939 ;;		_main
   940 ;; This function uses a non-reentrant model
   941 ;;
   942                           
   943                           	psect	text4
   944  0079C0                     __ptext4:
   945                           	opt stack 0
   946  0079C0                     _initOsc:
   947                           	opt stack 30
   948                           
   949                           ;CHRP3.c: 18: OSCTUNE = 0x80;
   950                           
   951                           ; BSR set to: 15
   952                           ;incstack = 0
   953  0079C0  0E80               	movlw	128
   954  0079C2  6E9B               	movwf	3995,c	;volatile
   955                           
   956                           ;CHRP3.c: 19: OSCCON = 0x70;
   957  0079C4  0E70               	movlw	112
   958  0079C6  6ED3               	movwf	4051,c	;volatile
   959                           
   960                           ;CHRP3.c: 20: OSCCON2 = 0x10;
   961  0079C8  0E10               	movlw	16
   962  0079CA  6ED2               	movwf	4050,c	;volatile
   963                           
   964                           ;CHRP3.c: 21: ACTCON = 0x90;
   965  0079CC  0E90               	movlw	144
   966  0079CE  6EB5               	movwf	4021,c	;volatile
   967  0079D0                     l45:
   968  0079D0  BED2               	btfsc	4050,7,c	;volatile
   969  0079D2  0012               	return	
   970  0079D4  D7FD               	goto	l45
   971  0079D6                     __end_of_initOsc:
   972                           	opt stack 0
   973                           tblptru	equ	0xFF8
   974                           tblptrh	equ	0xFF7
   975                           tblptrl	equ	0xFF6
   976                           tablat	equ	0xFF5
   977                           postinc0	equ	0xFEE
   978                           wreg	equ	0xFE8
   979                           postdec1	equ	0xFE5
   980                           fsr1l	equ	0xFE1
   981                           status	equ	0xFD8
   982                           
   983 ;; *************** function _initANA *****************
   984 ;; Defined at:
   985 ;;		line 52 in file "CHRP3.c"
   986 ;; Parameters:    Size  Location     Type
   987 ;;		None
   988 ;; Auto vars:     Size  Location     Type
   989 ;;		None
   990 ;; Return value:  Size  Location     Type
   991 ;;                  1    wreg      void 
   992 ;; Registers used:
   993 ;;		wreg, status,2
   994 ;; Tracked objects:
   995 ;;		On entry : 0/0
   996 ;;		On exit  : 0/0
   997 ;;		Unchanged: 0/0
   998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   999 ;;      Params:         0       0       0       0       0       0       0       0       0
  1000 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1001 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1002 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1003 ;;Total ram usage:        0 bytes
  1004 ;; Hardware stack levels used:    1
  1005 ;; This function calls:
  1006 ;;		Nothing
  1007 ;; This function is called by:
  1008 ;;		_main
  1009 ;; This function uses a non-reentrant model
  1010 ;;
  1011                           
  1012                           	psect	text5
  1013  0079EE                     __ptext5:
  1014                           	opt stack 0
  1015  0079EE                     _initANA:
  1016                           	opt stack 30
  1017                           
  1018                           ;CHRP3.c: 54: LATA = 0b00000000;
  1019                           
  1020                           ;incstack = 0
  1021  0079EE  0E00               	movlw	0
  1022  0079F0  6E89               	movwf	3977,c	;volatile
  1023                           
  1024                           ;CHRP3.c: 55: ANSELA = 0b0011111;
  1025  0079F2  0E1F               	movlw	31
  1026  0079F4  010F               	movlb	15	; () banked
  1027  0079F6  6F5B               	movwf	91,b	;volatile
  1028                           
  1029                           ;CHRP3.c: 56: ADCON0 = 0b00000000;
  1030  0079F8  0E00               	movlw	0
  1031  0079FA  6EC2               	movwf	4034,c	;volatile
  1032                           
  1033                           ;CHRP3.c: 57: ADCON1 = 0b00000000;
  1034  0079FC  0E00               	movlw	0
  1035  0079FE  6EC1               	movwf	4033,c	;volatile
  1036                           
  1037                           ;CHRP3.c: 58: ADCON2 = 0b00001110;
  1038  007A00  0E0E               	movlw	14
  1039  007A02  6EC0               	movwf	4032,c	;volatile
  1040                           
  1041                           ;CHRP3.c: 59: TRISA = 0b00101111;
  1042  007A04  0E2F               	movlw	47
  1043  007A06  6E92               	movwf	3986,c	;volatile
  1044                           
  1045                           ; BSR set to: 15
  1046  007A08  0012               	return		;funcret
  1047  007A0A                     __end_of_initANA:
  1048                           	opt stack 0
  1049                           tblptru	equ	0xFF8
  1050                           tblptrh	equ	0xFF7
  1051                           tblptrl	equ	0xFF6
  1052                           tablat	equ	0xFF5
  1053                           postinc0	equ	0xFEE
  1054                           wreg	equ	0xFE8
  1055                           postdec1	equ	0xFE5
  1056                           fsr1l	equ	0xFE1
  1057                           status	equ	0xFD8
  1058                           
  1059 ;; *************** function _heyKidWantSomeCandy *****************
  1060 ;; Defined at:
  1061 ;;		line 346 in file "Hand.c"
  1062 ;; Parameters:    Size  Location     Type
  1063 ;;		None
  1064 ;; Auto vars:     Size  Location     Type
  1065 ;;		None
  1066 ;; Return value:  Size  Location     Type
  1067 ;;                  1    wreg      void 
  1068 ;; Registers used:
  1069 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1070 ;; Tracked objects:
  1071 ;;		On entry : 0/0
  1072 ;;		On exit  : 0/0
  1073 ;;		Unchanged: 0/0
  1074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1075 ;;      Params:         0       0       0       0       0       0       0       0       0
  1076 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1077 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1078 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1079 ;;Total ram usage:        0 bytes
  1080 ;; Hardware stack levels used:    1
  1081 ;; Hardware stack levels required when called:    1
  1082 ;; This function calls:
  1083 ;;		_setPos
  1084 ;; This function is called by:
  1085 ;;		_main
  1086 ;; This function uses a non-reentrant model
  1087 ;;
  1088                           
  1089                           	psect	text6
  1090  007A0A                     __ptext6:
  1091                           	opt stack 0
  1092  007A0A                     _heyKidWantSomeCandy:
  1093                           	opt stack 29
  1094                           
  1095                           ;Hand.c: 347: setPos(255, cCountFingerCycle, 255, 255, 255);
  1096                           
  1097                           ; BSR set to: 15
  1098                           ;incstack = 0
  1099  007A0A  C011  F014         	movff	_cCountFingerCycle,setPos@b
  1100  007A0E  0EFF               	movlw	255
  1101  007A10  6E15               	movwf	setPos@c,c
  1102  007A12  0EFF               	movlw	255
  1103  007A14  6E16               	movwf	setPos@d,c
  1104  007A16  0EFF               	movlw	255
  1105  007A18  6E17               	movwf	setPos@e,c
  1106  007A1A  0EFF               	movlw	255
  1107  007A1C  ECEB  F03C         	call	_setPos
  1108                           
  1109                           ;Hand.c: 348: cCountFingerCycle += cCycleIncrement;
  1110  007A20  5010               	movf	_cCycleIncrement,w,c
  1111  007A22  2611               	addwf	_cCountFingerCycle,f,c
  1112                           
  1113                           ;Hand.c: 349: if (cCountFingerCycle == 255 || cCountFingerCycle == 0) {
  1114  007A24  2811               	incf	_cCountFingerCycle,w,c
  1115  007A26  B4D8               	btfsc	status,2,c
  1116  007A28  D003               	goto	l1518
  1117  007A2A  5011               	movf	_cCountFingerCycle,w,c
  1118  007A2C  A4D8               	btfss	status,2,c
  1119  007A2E  0012               	return	
  1120  007A30                     l1518:
  1121                           
  1122                           ;Hand.c: 350: cCycleIncrement *= -1;
  1123  007A30  0EFF               	movlw	255
  1124  007A32  0210               	mulwf	_cCycleIncrement,c
  1125  007A34  50F3               	movf	prodl,w,c
  1126  007A36  6E10               	movwf	_cCycleIncrement,c
  1127  007A38  0012               	return	
  1128  007A3A                     __end_of_heyKidWantSomeCandy:
  1129                           	opt stack 0
  1130                           tblptru	equ	0xFF8
  1131                           tblptrh	equ	0xFF7
  1132                           tblptrl	equ	0xFF6
  1133                           tablat	equ	0xFF5
  1134                           prodl	equ	0xFF3
  1135                           postinc0	equ	0xFEE
  1136                           wreg	equ	0xFE8
  1137                           postdec1	equ	0xFE5
  1138                           fsr1l	equ	0xFE1
  1139                           status	equ	0xFD8
  1140                           
  1141 ;; *************** function _delay *****************
  1142 ;; Defined at:
  1143 ;;		line 226 in file "Hand.c"
  1144 ;; Parameters:    Size  Location     Type
  1145 ;;		None
  1146 ;; Auto vars:     Size  Location     Type
  1147 ;;  i               2   12[COMRAM] int 
  1148 ;; Return value:  Size  Location     Type
  1149 ;;                  1    wreg      void 
  1150 ;; Registers used:
  1151 ;;		wreg, status,2, status,0, cstack
  1152 ;; Tracked objects:
  1153 ;;		On entry : 0/0
  1154 ;;		On exit  : 0/0
  1155 ;;		Unchanged: 0/0
  1156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1157 ;;      Params:         0       0       0       0       0       0       0       0       0
  1158 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1159 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1160 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1161 ;;Total ram usage:        6 bytes
  1162 ;; Hardware stack levels used:    1
  1163 ;; Hardware stack levels required when called:    1
  1164 ;; This function calls:
  1165 ;;		___awdiv
  1166 ;; This function is called by:
  1167 ;;		_main
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           	psect	text7
  1172  007BA6                     __ptext7:
  1173                           	opt stack 0
  1174  007BA6                     _delay:
  1175                           	opt stack 29
  1176                           
  1177                           ;Hand.c: 227: nDelay = (int) ((20000 - 2500 - 540 * 5 - arcPos[0] - arcPos[1] - arcPos[2
      +                          ] - arcPos[3] - arcPos[4]) / 6);
  1178                           
  1179                           ;incstack = 0
  1180  007BA6  0E50               	movlw	80
  1181  007BA8  6E1C               	movwf	??_delay& (0+255),c
  1182  007BAA  0E14               	movlw	20
  1183  007BAC  6E1D               	movwf	(??_delay+1)& (0+255),c
  1184  007BAE  5002               	movf	_arcPos+1,w,c
  1185  007BB0  C001  F01E         	movff	_arcPos,??_delay+2
  1186  007BB4  6A1F               	clrf	(??_delay+3)& (0+255),c
  1187  007BB6  261E               	addwf	??_delay+2,f,c
  1188  007BB8  0E00               	movlw	0
  1189  007BBA  221F               	addwfc	??_delay+3,f,c
  1190  007BBC  5003               	movf	_arcPos+2,w,c
  1191  007BBE  261E               	addwf	??_delay+2,f,c
  1192  007BC0  0E00               	movlw	0
  1193  007BC2  221F               	addwfc	??_delay+3,f,c
  1194  007BC4  5004               	movf	_arcPos+3,w,c
  1195  007BC6  261E               	addwf	??_delay+2,f,c
  1196  007BC8  0E00               	movlw	0
  1197  007BCA  221F               	addwfc	??_delay+3,f,c
  1198  007BCC  5005               	movf	_arcPos+4,w,c
  1199  007BCE  261E               	addwf	??_delay+2,f,c
  1200  007BD0  0E00               	movlw	0
  1201  007BD2  221F               	addwfc	??_delay+3,f,c
  1202  007BD4  501C               	movf	??_delay,w,c
  1203  007BD6  261E               	addwf	??_delay+2,f,c
  1204  007BD8  501D               	movf	??_delay+1,w,c
  1205  007BDA  221F               	addwfc	??_delay+3,f,c
  1206  007BDC  1E1E               	comf	??_delay+2,f,c
  1207  007BDE  1E1F               	comf	??_delay+3,f,c
  1208  007BE0  4A1E               	infsnz	??_delay+2,f,c
  1209  007BE2  2A1F               	incf	??_delay+3,f,c
  1210  007BE4  0E20               	movlw	32
  1211  007BE6  241E               	addwf	??_delay+2,w,c
  1212  007BE8  6E14               	movwf	___awdiv@dividend,c
  1213  007BEA  0E4E               	movlw	78
  1214  007BEC  201F               	addwfc	??_delay+3,w,c
  1215  007BEE  6E15               	movwf	___awdiv@dividend+1,c
  1216  007BF0  0E00               	movlw	0
  1217  007BF2  6E17               	movwf	___awdiv@divisor+1,c
  1218  007BF4  0E06               	movlw	6
  1219  007BF6  6E16               	movwf	___awdiv@divisor,c
  1220  007BF8  EC11  F03E         	call	___awdiv	;wreg free
  1221  007BFC  C014  F008         	movff	?___awdiv,_nDelay
  1222  007C00  C015  F009         	movff	?___awdiv+1,_nDelay+1
  1223                           
  1224                           ;Hand.c: 228: for (int i = nDelay; i != 0; i--) {
  1225  007C04  C008  F020         	movff	_nDelay,delay@i
  1226  007C08  C009  F021         	movff	_nDelay+1,delay@i+1
  1227  007C0C                     l1460:
  1228  007C0C  5020               	movf	delay@i,w,c
  1229  007C0E  1021               	iorwf	delay@i+1,w,c
  1230  007C10  B4D8               	btfsc	status,2,c
  1231  007C12  0012               	return	
  1232                           
  1233                           ;Hand.c: 229: _delay((unsigned long)((6)*(48000000/4000000.0)));
  1234  007C14  0E18               	movlw	24
  1235  007C16                     u1347:
  1236  007C16  2EE8               	decfsz	wreg,f,c
  1237  007C18  D7FE               	bra	u1347
  1238  007C1A  0620               	decf	delay@i,f,c
  1239  007C1C  A0D8               	btfss	status,0,c
  1240  007C1E  0621               	decf	delay@i+1,f,c
  1241  007C20  D7F5               	goto	l1460
  1242  007C22                     __end_of_delay:
  1243                           	opt stack 0
  1244                           tblptru	equ	0xFF8
  1245                           tblptrh	equ	0xFF7
  1246                           tblptrl	equ	0xFF6
  1247                           tablat	equ	0xFF5
  1248                           prodl	equ	0xFF3
  1249                           postinc0	equ	0xFEE
  1250                           wreg	equ	0xFE8
  1251                           postdec1	equ	0xFE5
  1252                           fsr1l	equ	0xFE1
  1253                           status	equ	0xFD8
  1254                           
  1255 ;; *************** function ___awdiv *****************
  1256 ;; Defined at:
  1257 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.42\sources\common\awdiv.c"
  1258 ;; Parameters:    Size  Location     Type
  1259 ;;  dividend        2    0[COMRAM] int 
  1260 ;;  divisor         2    2[COMRAM] int 
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;  quotient        2    6[COMRAM] int 
  1263 ;;  sign            1    5[COMRAM] unsigned char 
  1264 ;;  counter         1    4[COMRAM] unsigned char 
  1265 ;; Return value:  Size  Location     Type
  1266 ;;                  2    0[COMRAM] int 
  1267 ;; Registers used:
  1268 ;;		wreg, status,2, status,0
  1269 ;; Tracked objects:
  1270 ;;		On entry : 0/0
  1271 ;;		On exit  : 0/0
  1272 ;;		Unchanged: 0/0
  1273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1274 ;;      Params:         4       0       0       0       0       0       0       0       0
  1275 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1276 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1277 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1278 ;;Total ram usage:        8 bytes
  1279 ;; Hardware stack levels used:    1
  1280 ;; This function calls:
  1281 ;;		Nothing
  1282 ;; This function is called by:
  1283 ;;		_delay
  1284 ;; This function uses a non-reentrant model
  1285 ;;
  1286                           
  1287                           	psect	text8
  1288  007C22                     __ptext8:
  1289                           	opt stack 0
  1290  007C22                     ___awdiv:
  1291                           	opt stack 29
  1292                           
  1293                           ;incstack = 0
  1294  007C22  0E00               	movlw	0
  1295  007C24  6E19               	movwf	___awdiv@sign,c
  1296  007C26  AE17               	btfss	___awdiv@divisor+1,7,c
  1297  007C28  D006               	goto	l1314
  1298  007C2A  6C16               	negf	___awdiv@divisor,c
  1299  007C2C  1E17               	comf	___awdiv@divisor+1,f,c
  1300  007C2E  B0D8               	btfsc	status,0,c
  1301  007C30  2A17               	incf	___awdiv@divisor+1,f,c
  1302  007C32  0E01               	movlw	1
  1303  007C34  6E19               	movwf	___awdiv@sign,c
  1304  007C36                     l1314:
  1305  007C36  AE15               	btfss	___awdiv@dividend+1,7,c
  1306  007C38  D006               	goto	l1320
  1307  007C3A  6C14               	negf	___awdiv@dividend,c
  1308  007C3C  1E15               	comf	___awdiv@dividend+1,f,c
  1309  007C3E  B0D8               	btfsc	status,0,c
  1310  007C40  2A15               	incf	___awdiv@dividend+1,f,c
  1311  007C42  0E01               	movlw	1
  1312  007C44  1A19               	xorwf	___awdiv@sign,f,c
  1313  007C46                     l1320:
  1314  007C46  0E00               	movlw	0
  1315  007C48  6E1B               	movwf	___awdiv@quotient+1,c
  1316  007C4A  0E00               	movlw	0
  1317  007C4C  6E1A               	movwf	___awdiv@quotient,c
  1318  007C4E  5016               	movf	___awdiv@divisor,w,c
  1319  007C50  1017               	iorwf	___awdiv@divisor+1,w,c
  1320  007C52  B4D8               	btfsc	status,2,c
  1321  007C54  D01C               	goto	l1342
  1322  007C56  0E01               	movlw	1
  1323  007C58  6E18               	movwf	___awdiv@counter,c
  1324  007C5A  D004               	goto	l1328
  1325  007C5C                     l1326:
  1326  007C5C  90D8               	bcf	status,0,c
  1327  007C5E  3616               	rlcf	___awdiv@divisor,f,c
  1328  007C60  3617               	rlcf	___awdiv@divisor+1,f,c
  1329  007C62  2A18               	incf	___awdiv@counter,f,c
  1330  007C64                     l1328:
  1331  007C64  AE17               	btfss	___awdiv@divisor+1,7,c
  1332  007C66  D7FA               	goto	l1326
  1333  007C68                     l1330:
  1334  007C68  90D8               	bcf	status,0,c
  1335  007C6A  361A               	rlcf	___awdiv@quotient,f,c
  1336  007C6C  361B               	rlcf	___awdiv@quotient+1,f,c
  1337  007C6E  5016               	movf	___awdiv@divisor,w,c
  1338  007C70  5C14               	subwf	___awdiv@dividend,w,c
  1339  007C72  5017               	movf	___awdiv@divisor+1,w,c
  1340  007C74  5815               	subwfb	___awdiv@dividend+1,w,c
  1341  007C76  A0D8               	btfss	status,0,c
  1342  007C78  D005               	goto	l1338
  1343  007C7A  5016               	movf	___awdiv@divisor,w,c
  1344  007C7C  5E14               	subwf	___awdiv@dividend,f,c
  1345  007C7E  5017               	movf	___awdiv@divisor+1,w,c
  1346  007C80  5A15               	subwfb	___awdiv@dividend+1,f,c
  1347  007C82  801A               	bsf	___awdiv@quotient,0,c
  1348  007C84                     l1338:
  1349  007C84  90D8               	bcf	status,0,c
  1350  007C86  3217               	rrcf	___awdiv@divisor+1,f,c
  1351  007C88  3216               	rrcf	___awdiv@divisor,f,c
  1352  007C8A  2E18               	decfsz	___awdiv@counter,f,c
  1353  007C8C  D7ED               	goto	l1330
  1354  007C8E                     l1342:
  1355  007C8E  5019               	movf	___awdiv@sign,w,c
  1356  007C90  B4D8               	btfsc	status,2,c
  1357  007C92  D004               	goto	l1346
  1358  007C94  6C1A               	negf	___awdiv@quotient,c
  1359  007C96  1E1B               	comf	___awdiv@quotient+1,f,c
  1360  007C98  B0D8               	btfsc	status,0,c
  1361  007C9A  2A1B               	incf	___awdiv@quotient+1,f,c
  1362  007C9C                     l1346:
  1363  007C9C  C01A  F014         	movff	___awdiv@quotient,?___awdiv
  1364  007CA0  C01B  F015         	movff	___awdiv@quotient+1,?___awdiv+1
  1365  007CA4  0012               	return	
  1366  007CA6                     __end_of___awdiv:
  1367                           	opt stack 0
  1368                           tblptru	equ	0xFF8
  1369                           tblptrh	equ	0xFF7
  1370                           tblptrl	equ	0xFF6
  1371                           tablat	equ	0xFF5
  1372                           prodl	equ	0xFF3
  1373                           postinc0	equ	0xFEE
  1374                           wreg	equ	0xFE8
  1375                           postdec1	equ	0xFE5
  1376                           fsr1l	equ	0xFE1
  1377                           status	equ	0xFD8
  1378                           
  1379 ;; *************** function _commands *****************
  1380 ;; Defined at:
  1381 ;;		line 290 in file "Hand.c"
  1382 ;; Parameters:    Size  Location     Type
  1383 ;;		None
  1384 ;; Auto vars:     Size  Location     Type
  1385 ;;		None
  1386 ;; Return value:  Size  Location     Type
  1387 ;;                  1    wreg      void 
  1388 ;; Registers used:
  1389 ;;		wreg, status,2, status,0, cstack
  1390 ;; Tracked objects:
  1391 ;;		On entry : 0/0
  1392 ;;		On exit  : 0/0
  1393 ;;		Unchanged: 0/0
  1394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1395 ;;      Params:         0       0       0       0       0       0       0       0       0
  1396 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1397 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1398 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1399 ;;Total ram usage:        0 bytes
  1400 ;; Hardware stack levels used:    1
  1401 ;; Hardware stack levels required when called:    1
  1402 ;; This function calls:
  1403 ;;		_setPos
  1404 ;; This function is called by:
  1405 ;;		_main
  1406 ;; This function uses a non-reentrant model
  1407 ;;
  1408                           
  1409                           	psect	text9
  1410  007D70                     __ptext9:
  1411                           	opt stack 0
  1412  007D70                     _commands:
  1413                           	opt stack 29
  1414                           
  1415                           ;Hand.c: 296: if (PORTEbits.RE3 == 0 && !modeSelect) {
  1416                           
  1417                           ;incstack = 0
  1418  007D70  B684               	btfsc	3972,3,c	;volatile
  1419  007D72  D005               	goto	l1474
  1420  007D74  500E               	movf	_modeSelect,w,c
  1421  007D76  A4D8               	btfss	status,2,c
  1422  007D78  D002               	goto	l1474
  1423                           
  1424                           ;Hand.c: 297: isPressedForGesture = 1;
  1425  007D7A  0E01               	movlw	1
  1426  007D7C  6E0C               	movwf	_isPressedForGesture,c
  1427  007D7E                     l1474:
  1428                           
  1429                           ;Hand.c: 298: }
  1430                           ;Hand.c: 299: if (PORTEbits.RE3 == 1 && isPressedForGesture && !modeSelect) {
  1431  007D7E  A684               	btfss	3972,3,c	;volatile
  1432  007D80  0012               	return	
  1433  007D82  500C               	movf	_isPressedForGesture,w,c
  1434  007D84  B4D8               	btfsc	status,2,c
  1435  007D86  0012               	return	
  1436  007D88  500E               	movf	_modeSelect,w,c
  1437  007D8A  A4D8               	btfss	status,2,c
  1438  007D8C  0012               	return	
  1439                           
  1440                           ;Hand.c: 300: isPressedForGesture = 0;
  1441  007D8E  0E00               	movlw	0
  1442  007D90  6E0C               	movwf	_isPressedForGesture,c
  1443                           
  1444                           ;Hand.c: 301: cGesture++;
  1445  007D92  2A0F               	incf	_cGesture,f,c
  1446                           
  1447                           ;Hand.c: 302: if (cGesture == 9)cGesture = 0;
  1448  007D94  0E09               	movlw	9
  1449  007D96  180F               	xorwf	_cGesture,w,c
  1450  007D98  A4D8               	btfss	status,2,c
  1451  007D9A  D06F               	goto	l1508
  1452  007D9C  0E00               	movlw	0
  1453  007D9E  6E0F               	movwf	_cGesture,c
  1454                           
  1455                           ;Hand.c: 303: switch (cGesture) {
  1456  007DA0  D06C               	goto	l1508
  1457  007DA2                     l1488:
  1458                           
  1459                           ;Hand.c: 305: setPos(0, 0, 0, 0, 0);
  1460  007DA2  0E00               	movlw	0
  1461  007DA4  6E14               	movwf	setPos@b,c
  1462  007DA6  0E00               	movlw	0
  1463  007DA8  6E15               	movwf	setPos@c,c
  1464  007DAA  0E00               	movlw	0
  1465  007DAC  6E16               	movwf	setPos@d,c
  1466  007DAE  0E00               	movlw	0
  1467  007DB0  6E17               	movwf	setPos@e,c
  1468  007DB2  0E00               	movlw	0
  1469  007DB4  ECEB  F03C         	call	_setPos
  1470                           
  1471                           ;Hand.c: 306: break;
  1472  007DB8  0012               	return	
  1473  007DBA                     l1490:
  1474                           
  1475                           ;Hand.c: 308: setPos(255, 255, 255, 255, 255);
  1476  007DBA  0EFF               	movlw	255
  1477  007DBC  6E14               	movwf	setPos@b,c
  1478  007DBE  0EFF               	movlw	255
  1479  007DC0  6E15               	movwf	setPos@c,c
  1480  007DC2  0EFF               	movlw	255
  1481  007DC4  6E16               	movwf	setPos@d,c
  1482  007DC6  0EFF               	movlw	255
  1483  007DC8  6E17               	movwf	setPos@e,c
  1484  007DCA  0EFF               	movlw	255
  1485  007DCC  ECEB  F03C         	call	_setPos
  1486                           
  1487                           ;Hand.c: 309: break;
  1488  007DD0  0012               	return	
  1489  007DD2                     l1492:
  1490                           
  1491                           ;Hand.c: 311: setPos(0, 0, 255, 255, 0);
  1492  007DD2  0E00               	movlw	0
  1493  007DD4  6E14               	movwf	setPos@b,c
  1494  007DD6  0EFF               	movlw	255
  1495  007DD8  6E15               	movwf	setPos@c,c
  1496  007DDA  0EFF               	movlw	255
  1497  007DDC  6E16               	movwf	setPos@d,c
  1498  007DDE  0E00               	movlw	0
  1499  007DE0  6E17               	movwf	setPos@e,c
  1500  007DE2  0E00               	movlw	0
  1501  007DE4  ECEB  F03C         	call	_setPos
  1502                           
  1503                           ;Hand.c: 312: break;
  1504  007DE8  0012               	return	
  1505  007DEA                     l1494:
  1506                           
  1507                           ;Hand.c: 314: setPos(0, 255, 255, 255, 0);
  1508  007DEA  0EFF               	movlw	255
  1509  007DEC  6E14               	movwf	setPos@b,c
  1510  007DEE  0EFF               	movlw	255
  1511  007DF0  6E15               	movwf	setPos@c,c
  1512  007DF2  0EFF               	movlw	255
  1513  007DF4  6E16               	movwf	setPos@d,c
  1514  007DF6  0E00               	movlw	0
  1515  007DF8  6E17               	movwf	setPos@e,c
  1516  007DFA  0E00               	movlw	0
  1517  007DFC  ECEB  F03C         	call	_setPos
  1518                           
  1519                           ;Hand.c: 315: break;
  1520  007E00  0012               	return	
  1521  007E02                     l1496:
  1522                           
  1523                           ;Hand.c: 317: setPos(200, 0, 0, 255, 255);
  1524  007E02  0E00               	movlw	0
  1525  007E04  6E14               	movwf	setPos@b,c
  1526  007E06  0E00               	movlw	0
  1527  007E08  6E15               	movwf	setPos@c,c
  1528  007E0A  0EFF               	movlw	255
  1529  007E0C  6E16               	movwf	setPos@d,c
  1530  007E0E  0EFF               	movlw	255
  1531  007E10  6E17               	movwf	setPos@e,c
  1532  007E12  0EC8               	movlw	200
  1533  007E14  ECEB  F03C         	call	_setPos
  1534                           
  1535                           ;Hand.c: 318: break;
  1536  007E18  0012               	return	
  1537  007E1A                     l1498:
  1538                           
  1539                           ;Hand.c: 320: setPos(200, 200, 0, 0, 0);
  1540  007E1A  0EC8               	movlw	200
  1541  007E1C  6E14               	movwf	setPos@b,c
  1542  007E1E  0E00               	movlw	0
  1543  007E20  6E15               	movwf	setPos@c,c
  1544  007E22  0E00               	movlw	0
  1545  007E24  6E16               	movwf	setPos@d,c
  1546  007E26  0E00               	movlw	0
  1547  007E28  6E17               	movwf	setPos@e,c
  1548  007E2A  0EC8               	movlw	200
  1549  007E2C  ECEB  F03C         	call	_setPos
  1550                           
  1551                           ;Hand.c: 321: break;
  1552  007E30  0012               	return	
  1553  007E32                     l1500:
  1554                           
  1555                           ;Hand.c: 323: setPos(0, 255, 255, 255, 255);
  1556  007E32  0EFF               	movlw	255
  1557  007E34  6E14               	movwf	setPos@b,c
  1558  007E36  0EFF               	movlw	255
  1559  007E38  6E15               	movwf	setPos@c,c
  1560  007E3A  0EFF               	movlw	255
  1561  007E3C  6E16               	movwf	setPos@d,c
  1562  007E3E  0EFF               	movlw	255
  1563  007E40  6E17               	movwf	setPos@e,c
  1564  007E42  0E00               	movlw	0
  1565  007E44  ECEB  F03C         	call	_setPos
  1566                           
  1567                           ;Hand.c: 324: break;
  1568  007E48  0012               	return	
  1569  007E4A                     l1502:
  1570                           
  1571                           ;Hand.c: 326: setPos(255, 0, 255, 255, 255);
  1572  007E4A  0E00               	movlw	0
  1573  007E4C  6E14               	movwf	setPos@b,c
  1574  007E4E  0EFF               	movlw	255
  1575  007E50  6E15               	movwf	setPos@c,c
  1576  007E52  0EFF               	movlw	255
  1577  007E54  6E16               	movwf	setPos@d,c
  1578  007E56  0EFF               	movlw	255
  1579  007E58  6E17               	movwf	setPos@e,c
  1580  007E5A  0EFF               	movlw	255
  1581  007E5C  ECEB  F03C         	call	_setPos
  1582                           
  1583                           ;Hand.c: 327: break;
  1584  007E60  0012               	return	
  1585  007E62                     l1504:
  1586                           
  1587                           ;Hand.c: 329: setPos(255, 0, 255, 255, 0);
  1588  007E62  0E00               	movlw	0
  1589  007E64  6E14               	movwf	setPos@b,c
  1590  007E66  0EFF               	movlw	255
  1591  007E68  6E15               	movwf	setPos@c,c
  1592  007E6A  0EFF               	movlw	255
  1593  007E6C  6E16               	movwf	setPos@d,c
  1594  007E6E  0E00               	movlw	0
  1595  007E70  6E17               	movwf	setPos@e,c
  1596  007E72  0EFF               	movlw	255
  1597  007E74  ECEB  F03C         	call	_setPos
  1598                           
  1599                           ;Hand.c: 333: }
  1600                           
  1601                           ;Hand.c: 332: break;
  1602                           
  1603                           ;Hand.c: 331: default:
  1604                           
  1605                           ;Hand.c: 330: break;
  1606  007E78  0012               	return	
  1607  007E7A                     l1508:
  1608  007E7A  500F               	movf	_cGesture,w,c
  1609                           
  1610                           ; Switch size 1, requested type "space"
  1611                           ; Number of cases is 9, Range of values is 0 to 8
  1612                           ; switch strategies available:
  1613                           ; Name         Instructions Cycles
  1614                           ; simple_byte           28    15 (average)
  1615                           ;	Chosen strategy is simple_byte
  1616  007E7C  0A00               	xorlw	0	; case 0
  1617  007E7E  B4D8               	btfsc	status,2,c
  1618  007E80  D790               	goto	l1488
  1619  007E82  0A01               	xorlw	1	; case 1
  1620  007E84  B4D8               	btfsc	status,2,c
  1621  007E86  D799               	goto	l1490
  1622  007E88  0A03               	xorlw	3	; case 2
  1623  007E8A  B4D8               	btfsc	status,2,c
  1624  007E8C  D7A2               	goto	l1492
  1625  007E8E  0A01               	xorlw	1	; case 3
  1626  007E90  B4D8               	btfsc	status,2,c
  1627  007E92  D7AB               	goto	l1494
  1628  007E94  0A07               	xorlw	7	; case 4
  1629  007E96  B4D8               	btfsc	status,2,c
  1630  007E98  D7B4               	goto	l1496
  1631  007E9A  0A01               	xorlw	1	; case 5
  1632  007E9C  B4D8               	btfsc	status,2,c
  1633  007E9E  D7BD               	goto	l1498
  1634  007EA0  0A03               	xorlw	3	; case 6
  1635  007EA2  B4D8               	btfsc	status,2,c
  1636  007EA4  D7C6               	goto	l1500
  1637  007EA6  0A01               	xorlw	1	; case 7
  1638  007EA8  B4D8               	btfsc	status,2,c
  1639  007EAA  D7CF               	goto	l1502
  1640  007EAC  0A0F               	xorlw	15	; case 8
  1641  007EAE  A4D8               	btfss	status,2,c
  1642  007EB0  0012               	return	
  1643  007EB2  D7D7               	goto	l1504
  1644  007EB4                     __end_of_commands:
  1645                           	opt stack 0
  1646                           tblptru	equ	0xFF8
  1647                           tblptrh	equ	0xFF7
  1648                           tblptrl	equ	0xFF6
  1649                           tablat	equ	0xFF5
  1650                           prodl	equ	0xFF3
  1651                           postinc0	equ	0xFEE
  1652                           wreg	equ	0xFE8
  1653                           postdec1	equ	0xFE5
  1654                           fsr1l	equ	0xFE1
  1655                           status	equ	0xFD8
  1656                           
  1657 ;; *************** function _checkMode *****************
  1658 ;; Defined at:
  1659 ;;		line 112 in file "Hand.c"
  1660 ;; Parameters:    Size  Location     Type
  1661 ;;		None
  1662 ;; Auto vars:     Size  Location     Type
  1663 ;;  i               1   12[COMRAM] unsigned char 
  1664 ;;  i               1   11[COMRAM] unsigned char 
  1665 ;;  cTempMode       1   13[COMRAM] unsigned char 
  1666 ;; Return value:  Size  Location     Type
  1667 ;;                  1    wreg      unsigned char 
  1668 ;; Registers used:
  1669 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1670 ;; Tracked objects:
  1671 ;;		On entry : 0/0
  1672 ;;		On exit  : 0/0
  1673 ;;		Unchanged: 0/0
  1674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1675 ;;      Params:         0       0       0       0       0       0       0       0       0
  1676 ;;      Locals:         7       0       0       0       0       0       0       0       0
  1677 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1678 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1679 ;;Total ram usage:        7 bytes
  1680 ;; Hardware stack levels used:    1
  1681 ;; Hardware stack levels required when called:    1
  1682 ;; This function calls:
  1683 ;;		_beep
  1684 ;;		_setPos
  1685 ;; This function is called by:
  1686 ;;		_main
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689                           
  1690                           	psect	text10
  1691  007EB4                     __ptext10:
  1692                           	opt stack 0
  1693  007EB4                     _checkMode:
  1694                           	opt stack 29
  1695                           
  1696                           ;Hand.c: 113: unsigned char cTempMode = cMode;
  1697                           
  1698                           ;incstack = 0
  1699  007EB4  C013  F021         	movff	_cMode,checkMode@cTempMode
  1700                           
  1701                           ;Hand.c: 114: if (PORTEbits.RE3 == 0) {
  1702  007EB8  B684               	btfsc	3972,3,c	;volatile
  1703  007EBA  D08B               	goto	l128
  1704                           
  1705                           ;Hand.c: 115: isPressedForMode = 1;
  1706  007EBC  0E01               	movlw	1
  1707  007EBE  6E0D               	movwf	_isPressedForMode,c
  1708                           
  1709                           ;Hand.c: 116: if (!modeSelect && buttonWasLetGo) {
  1710  007EC0  500E               	movf	_modeSelect,w,c
  1711  007EC2  A4D8               	btfss	status,2,c
  1712  007EC4  D036               	goto	l1404
  1713  007EC6  500B               	movf	_buttonWasLetGo,w,c
  1714  007EC8  B4D8               	btfsc	status,2,c
  1715  007ECA  D033               	goto	l1404
  1716                           
  1717                           ;Hand.c: 117: cDelay++;
  1718  007ECC  2A12               	incf	_cDelay,f,c
  1719                           
  1720                           ;Hand.c: 118: if (cDelay == 20) {
  1721  007ECE  0E14               	movlw	20
  1722  007ED0  1812               	xorwf	_cDelay,w,c
  1723  007ED2  A4D8               	btfss	status,2,c
  1724  007ED4  D07E               	goto	l128
  1725                           
  1726                           ;Hand.c: 119: cDelay = 0;
  1727  007ED6  0E00               	movlw	0
  1728  007ED8  6E12               	movwf	_cDelay,c
  1729                           
  1730                           ;Hand.c: 120: modeSelect = 1;
  1731  007EDA  0E01               	movlw	1
  1732  007EDC  6E0E               	movwf	_modeSelect,c
  1733                           
  1734                           ;Hand.c: 121: buttonWasLetGo = 0;
  1735  007EDE  0E00               	movlw	0
  1736  007EE0  6E0B               	movwf	_buttonWasLetGo,c
  1737                           
  1738                           ;Hand.c: 122: beep(200, 500);
  1739  007EE2  0E00               	movlw	0
  1740  007EE4  6E15               	movwf	beep@pitch+1,c
  1741  007EE6  0EC8               	movlw	200
  1742  007EE8  6E14               	movwf	beep@pitch,c
  1743  007EEA  0E01               	movlw	1
  1744  007EEC  6E17               	movwf	beep@duration+1,c
  1745  007EEE  0EF4               	movlw	244
  1746  007EF0  6E16               	movwf	beep@duration,c
  1747  007EF2  EC56  F03D         	call	_beep	;wreg free
  1748                           
  1749                           ;Hand.c: 123: for (unsigned char i = 0; i < 5; i++) {
  1750  007EF6  0E00               	movlw	0
  1751  007EF8  6E1F               	movwf	checkMode@i,c
  1752  007EFA                     l1388:
  1753  007EFA  0E04               	movlw	4
  1754  007EFC  641F               	cpfsgt	checkMode@i,c
  1755  007EFE  D001               	goto	l1392
  1756  007F00  D068               	goto	l128
  1757  007F02                     l1392:
  1758                           
  1759                           ;Hand.c: 124: arcPos[i] = (cTempMode == i) ? 255 : 0;
  1760  007F02  501F               	movf	checkMode@i,w,c
  1761  007F04  1821               	xorwf	checkMode@cTempMode,w,c
  1762  007F06  B4D8               	btfsc	status,2,c
  1763  007F08  D005               	goto	l1396
  1764  007F0A  0E00               	movlw	0
  1765  007F0C  6E1C               	movwf	_checkMode$207+1,c
  1766  007F0E  0E00               	movlw	0
  1767  007F10  6E1B               	movwf	_checkMode$207,c
  1768  007F12  D003               	goto	l1398
  1769  007F14                     l1396:
  1770  007F14  0E00               	movlw	0
  1771  007F16  6E1C               	movwf	_checkMode$207+1,c
  1772  007F18  681B               	setf	_checkMode$207,c
  1773  007F1A                     l1398:
  1774  007F1A  501F               	movf	checkMode@i,w,c
  1775  007F1C  0D01               	mullw	1
  1776  007F1E  0E01               	movlw	low _arcPos
  1777  007F20  24F3               	addwf	prodl,w,c
  1778  007F22  6ED9               	movwf	fsr2l,c
  1779  007F24  0E00               	movlw	high _arcPos
  1780  007F26  20F4               	addwfc	prodh,w,c
  1781  007F28  6EDA               	movwf	fsr2h,c
  1782  007F2A  C01B  FFDF         	movff	_checkMode$207,indf2
  1783  007F2E  2A1F               	incf	checkMode@i,f,c
  1784  007F30  D7E4               	goto	l1388
  1785  007F32                     l1404:
  1786  007F32  500B               	movf	_buttonWasLetGo,w,c
  1787  007F34  B4D8               	btfsc	status,2,c
  1788  007F36  D04D               	goto	l128
  1789                           
  1790                           ;Hand.c: 128: cDelay++;
  1791  007F38  2A12               	incf	_cDelay,f,c
  1792                           
  1793                           ;Hand.c: 129: if (cDelay == 20) {
  1794  007F3A  0E14               	movlw	20
  1795  007F3C  1812               	xorwf	_cDelay,w,c
  1796  007F3E  A4D8               	btfss	status,2,c
  1797  007F40  D02A               	goto	l1426
  1798                           
  1799                           ;Hand.c: 130: cDelay = 0;
  1800  007F42  0E00               	movlw	0
  1801  007F44  6E12               	movwf	_cDelay,c
  1802                           
  1803                           ;Hand.c: 131: modeSelect = 0;
  1804  007F46  0E00               	movlw	0
  1805  007F48  6E0E               	movwf	_modeSelect,c
  1806                           
  1807                           ;Hand.c: 132: buttonWasLetGo = 0;
  1808  007F4A  0E00               	movlw	0
  1809  007F4C  6E0B               	movwf	_buttonWasLetGo,c
  1810                           
  1811                           ;Hand.c: 133: beep(400, 500);
  1812  007F4E  0E01               	movlw	1
  1813  007F50  6E15               	movwf	beep@pitch+1,c
  1814  007F52  0E90               	movlw	144
  1815  007F54  6E14               	movwf	beep@pitch,c
  1816  007F56  0E01               	movlw	1
  1817  007F58  6E17               	movwf	beep@duration+1,c
  1818  007F5A  0EF4               	movlw	244
  1819  007F5C  6E16               	movwf	beep@duration,c
  1820  007F5E  EC56  F03D         	call	_beep	;wreg free
  1821                           
  1822                           ;Hand.c: 134: if (cTempMode != 0) {
  1823  007F62  5021               	movf	checkMode@cTempMode,w,c
  1824  007F64  B4D8               	btfsc	status,2,c
  1825  007F66  D002               	goto	l1418
  1826                           
  1827                           ;Hand.c: 135: cTempMode--;
  1828  007F68  0621               	decf	checkMode@cTempMode,f,c
  1829                           
  1830                           ;Hand.c: 136: } else {
  1831  007F6A  D002               	goto	l141
  1832  007F6C                     l1418:
  1833                           
  1834                           ;Hand.c: 137: cTempMode = 4;
  1835  007F6C  0E04               	movlw	4
  1836  007F6E  6E21               	movwf	checkMode@cTempMode,c
  1837  007F70                     l141:
  1838                           
  1839                           ;Hand.c: 138: }
  1840                           ;Hand.c: 139: if (cTempMode == 0) {
  1841  007F70  5021               	movf	checkMode@cTempMode,w,c
  1842  007F72  A4D8               	btfss	status,2,c
  1843  007F74  D002               	goto	l1422
  1844                           
  1845                           ;Hand.c: 140: calibMode = 1;
  1846  007F76  0E01               	movlw	1
  1847  007F78  D001               	goto	L1
  1848  007F7A                     l1422:
  1849                           
  1850                           ;Hand.c: 142: calibMode = 0;
  1851  007F7A  0E00               	movlw	0
  1852  007F7C                     L1:
  1853  007F7C  6E0A               	movwf	_calibMode,c
  1854                           
  1855                           ;Hand.c: 143: }
  1856                           ;Hand.c: 144: setPos(0, 0, 0, 0, 0);
  1857  007F7E  0E00               	movlw	0
  1858  007F80  6E14               	movwf	setPos@b,c
  1859  007F82  0E00               	movlw	0
  1860  007F84  6E15               	movwf	setPos@c,c
  1861  007F86  0E00               	movlw	0
  1862  007F88  6E16               	movwf	setPos@d,c
  1863  007F8A  0E00               	movlw	0
  1864  007F8C  6E17               	movwf	setPos@e,c
  1865  007F8E  0E00               	movlw	0
  1866  007F90  ECEB  F03C         	call	_setPos
  1867                           
  1868                           ;Hand.c: 145: } else {
  1869  007F94  D01E               	goto	l128
  1870  007F96                     l1426:
  1871                           
  1872                           ;Hand.c: 146: for (unsigned char i = 0; i < 5; i++) {
  1873  007F96  0E00               	movlw	0
  1874  007F98  6E20               	movwf	checkMode@i_208,c
  1875  007F9A                     l1428:
  1876  007F9A  0E04               	movlw	4
  1877  007F9C  6420               	cpfsgt	checkMode@i_208,c
  1878  007F9E  D001               	goto	l1432
  1879  007FA0  D018               	goto	l128
  1880  007FA2                     l1432:
  1881                           
  1882                           ;Hand.c: 147: arcPos[i] = (cTempMode == i) ? 255 : 0;
  1883  007FA2  5020               	movf	checkMode@i_208,w,c
  1884  007FA4  1821               	xorwf	checkMode@cTempMode,w,c
  1885  007FA6  B4D8               	btfsc	status,2,c
  1886  007FA8  D005               	goto	l1436
  1887  007FAA  0E00               	movlw	0
  1888  007FAC  6E1E               	movwf	_checkMode$209+1,c
  1889  007FAE  0E00               	movlw	0
  1890  007FB0  6E1D               	movwf	_checkMode$209,c
  1891  007FB2  D003               	goto	l1438
  1892  007FB4                     l1436:
  1893  007FB4  0E00               	movlw	0
  1894  007FB6  6E1E               	movwf	_checkMode$209+1,c
  1895  007FB8  681D               	setf	_checkMode$209,c
  1896  007FBA                     l1438:
  1897  007FBA  5020               	movf	checkMode@i_208,w,c
  1898  007FBC  0D01               	mullw	1
  1899  007FBE  0E01               	movlw	low _arcPos
  1900  007FC0  24F3               	addwf	prodl,w,c
  1901  007FC2  6ED9               	movwf	fsr2l,c
  1902  007FC4  0E00               	movlw	high _arcPos
  1903  007FC6  20F4               	addwfc	prodh,w,c
  1904  007FC8  6EDA               	movwf	fsr2h,c
  1905  007FCA  C01D  FFDF         	movff	_checkMode$209,indf2
  1906  007FCE  2A20               	incf	checkMode@i_208,f,c
  1907  007FD0  D7E4               	goto	l1428
  1908  007FD2                     l128:
  1909                           
  1910                           ;Hand.c: 148: }
  1911                           ;Hand.c: 149: }
  1912                           ;Hand.c: 150: }
  1913                           ;Hand.c: 151: }
  1914                           ;Hand.c: 153: if (PORTEbits.RE3 == 1) {
  1915  007FD2  A684               	btfss	3972,3,c	;volatile
  1916  007FD4  D013               	goto	l151
  1917                           
  1918                           ;Hand.c: 154: if (isPressedForMode && modeSelect) {
  1919  007FD6  500D               	movf	_isPressedForMode,w,c
  1920  007FD8  B4D8               	btfsc	status,2,c
  1921  007FDA  D00A               	goto	l152
  1922  007FDC  500E               	movf	_modeSelect,w,c
  1923  007FDE  B4D8               	btfsc	status,2,c
  1924  007FE0  D007               	goto	l152
  1925                           
  1926                           ;Hand.c: 155: cTempMode++;
  1927  007FE2  2A21               	incf	checkMode@cTempMode,f,c
  1928                           
  1929                           ;Hand.c: 156: if (cTempMode == 5)cTempMode = 0;
  1930  007FE4  0E05               	movlw	5
  1931  007FE6  1821               	xorwf	checkMode@cTempMode,w,c
  1932  007FE8  A4D8               	btfss	status,2,c
  1933  007FEA  D002               	goto	l152
  1934  007FEC  0E00               	movlw	0
  1935  007FEE  6E21               	movwf	checkMode@cTempMode,c
  1936  007FF0                     l152:
  1937                           
  1938                           ;Hand.c: 157: }
  1939                           ;Hand.c: 158: buttonWasLetGo = 1;
  1940  007FF0  0E01               	movlw	1
  1941  007FF2  6E0B               	movwf	_buttonWasLetGo,c
  1942                           
  1943                           ;Hand.c: 159: cDelay = 0;
  1944  007FF4  0E00               	movlw	0
  1945  007FF6  6E12               	movwf	_cDelay,c
  1946                           
  1947                           ;Hand.c: 160: isPressedForMode = 0;
  1948  007FF8  0E00               	movlw	0
  1949  007FFA  6E0D               	movwf	_isPressedForMode,c
  1950  007FFC                     l151:
  1951                           
  1952                           ;Hand.c: 161: }
  1953                           ;Hand.c: 162: return cTempMode;
  1954  007FFC  5021               	movf	checkMode@cTempMode,w,c
  1955  007FFE  0012               	return	
  1956  008000                     __end_of_checkMode:
  1957                           	opt stack 0
  1958                           tblptru	equ	0xFF8
  1959                           tblptrh	equ	0xFF7
  1960                           tblptrl	equ	0xFF6
  1961                           tablat	equ	0xFF5
  1962                           prodh	equ	0xFF4
  1963                           prodl	equ	0xFF3
  1964                           postinc0	equ	0xFEE
  1965                           wreg	equ	0xFE8
  1966                           postdec1	equ	0xFE5
  1967                           fsr1l	equ	0xFE1
  1968                           indf2	equ	0xFDF
  1969                           fsr2h	equ	0xFDA
  1970                           fsr2l	equ	0xFD9
  1971                           status	equ	0xFD8
  1972                           
  1973 ;; *************** function _setPos *****************
  1974 ;; Defined at:
  1975 ;;		line 44 in file "Hand.c"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;  a               1    wreg     unsigned char 
  1978 ;;  b               1    0[COMRAM] unsigned char 
  1979 ;;  c               1    1[COMRAM] unsigned char 
  1980 ;;  d               1    2[COMRAM] unsigned char 
  1981 ;;  e               1    3[COMRAM] unsigned char 
  1982 ;; Auto vars:     Size  Location     Type
  1983 ;;  a               1    4[COMRAM] unsigned char 
  1984 ;; Return value:  Size  Location     Type
  1985 ;;                  1    wreg      void 
  1986 ;; Registers used:
  1987 ;;		wreg
  1988 ;; Tracked objects:
  1989 ;;		On entry : 0/0
  1990 ;;		On exit  : 0/0
  1991 ;;		Unchanged: 0/0
  1992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1993 ;;      Params:         4       0       0       0       0       0       0       0       0
  1994 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1995 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1996 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1997 ;;Total ram usage:        5 bytes
  1998 ;; Hardware stack levels used:    1
  1999 ;; This function calls:
  2000 ;;		Nothing
  2001 ;; This function is called by:
  2002 ;;		_initVariables
  2003 ;;		_checkMode
  2004 ;;		_commands
  2005 ;;		_heyKidWantSomeCandy
  2006 ;;		_main
  2007 ;; This function uses a non-reentrant model
  2008 ;;
  2009                           
  2010                           	psect	text11
  2011  0079D6                     __ptext11:
  2012                           	opt stack 0
  2013  0079D6                     _setPos:
  2014                           	opt stack 30
  2015                           
  2016                           ;incstack = 0
  2017                           ;setPos@a stored from wreg
  2018  0079D6  6E18               	movwf	setPos@a,c
  2019                           
  2020                           ;Hand.c: 45: arcPos[0] = a;
  2021  0079D8  C018  F001         	movff	setPos@a,_arcPos
  2022                           
  2023                           ;Hand.c: 46: arcPos[1] = b;
  2024  0079DC  C014  F002         	movff	setPos@b,_arcPos+1
  2025                           
  2026                           ;Hand.c: 47: arcPos[2] = c;
  2027  0079E0  C015  F003         	movff	setPos@c,_arcPos+2
  2028                           
  2029                           ;Hand.c: 48: arcPos[3] = d;
  2030  0079E4  C016  F004         	movff	setPos@d,_arcPos+3
  2031                           
  2032                           ;Hand.c: 49: arcPos[4] = e;
  2033  0079E8  C017  F005         	movff	setPos@e,_arcPos+4
  2034  0079EC  0012               	return		;funcret
  2035  0079EE                     __end_of_setPos:
  2036                           	opt stack 0
  2037                           tblptru	equ	0xFF8
  2038                           tblptrh	equ	0xFF7
  2039                           tblptrl	equ	0xFF6
  2040                           tablat	equ	0xFF5
  2041                           prodh	equ	0xFF4
  2042                           prodl	equ	0xFF3
  2043                           postinc0	equ	0xFEE
  2044                           wreg	equ	0xFE8
  2045                           postdec1	equ	0xFE5
  2046                           fsr1l	equ	0xFE1
  2047                           indf2	equ	0xFDF
  2048                           fsr2h	equ	0xFDA
  2049                           fsr2l	equ	0xFD9
  2050                           status	equ	0xFD8
  2051                           
  2052 ;; *************** function _beep *****************
  2053 ;; Defined at:
  2054 ;;		line 56 in file "Hand.c"
  2055 ;; Parameters:    Size  Location     Type
  2056 ;;  pitch           2    0[COMRAM] unsigned int 
  2057 ;;  duration        2    2[COMRAM] unsigned int 
  2058 ;; Auto vars:     Size  Location     Type
  2059 ;;  j               2    5[COMRAM] unsigned int 
  2060 ;; Return value:  Size  Location     Type
  2061 ;;                  1    wreg      void 
  2062 ;; Registers used:
  2063 ;;		wreg, status,2, status,0
  2064 ;; Tracked objects:
  2065 ;;		On entry : 0/0
  2066 ;;		On exit  : 0/0
  2067 ;;		Unchanged: 0/0
  2068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2069 ;;      Params:         4       0       0       0       0       0       0       0       0
  2070 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2071 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2072 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2073 ;;Total ram usage:        7 bytes
  2074 ;; Hardware stack levels used:    1
  2075 ;; This function calls:
  2076 ;;		Nothing
  2077 ;; This function is called by:
  2078 ;;		_checkMode
  2079 ;;		_calibrate
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083                           	psect	text12
  2084  007AAC                     __ptext12:
  2085                           	opt stack 0
  2086  007AAC                     _beep:
  2087                           	opt stack 29
  2088  007AAC                     l1288:
  2089  007AAC  5016               	movf	beep@duration,w,c
  2090  007AAE  1017               	iorwf	beep@duration+1,w,c
  2091  007AB0  B4D8               	btfsc	status,2,c
  2092  007AB2  0012               	return	
  2093                           
  2094                           ;Hand.c: 58: LATAbits.LATA6 = !LATAbits.LATA6;
  2095  007AB4  BC89               	btfsc	3977,6,c	;volatile
  2096  007AB6  D003               	goto	u740
  2097  007AB8  6A18               	clrf	??_beep& (0+255),c
  2098  007ABA  2A18               	incf	??_beep& (0+255),f,c
  2099  007ABC  D001               	goto	u758
  2100  007ABE                     u740:
  2101  007ABE  6A18               	clrf	??_beep& (0+255),c
  2102  007AC0                     u758:
  2103  007AC0  3A18               	swapf	??_beep,f,c
  2104  007AC2  4618               	rlncf	??_beep,f,c
  2105  007AC4  4618               	rlncf	??_beep,f,c
  2106  007AC6  5089               	movf	3977,w,c	;volatile
  2107  007AC8  1818               	xorwf	??_beep,w,c
  2108  007ACA  0BBF               	andlw	-65
  2109  007ACC  1818               	xorwf	??_beep,w,c
  2110  007ACE  6E89               	movwf	3977,c	;volatile
  2111                           
  2112                           ;Hand.c: 59: for (unsigned int j = pitch; j != 0; j--);
  2113  007AD0  C014  F019         	movff	beep@pitch,beep@j
  2114  007AD4  C015  F01A         	movff	beep@pitch+1,beep@j+1
  2115  007AD8  5019               	movf	beep@j,w,c
  2116  007ADA  101A               	iorwf	beep@j+1,w,c
  2117  007ADC  B4D8               	btfsc	status,2,c
  2118  007ADE  D004               	goto	l1302
  2119  007AE0  0619               	decf	beep@j,f,c
  2120  007AE2  A0D8               	btfss	status,0,c
  2121  007AE4  061A               	decf	beep@j+1,f,c
  2122  007AE6  D7F8               	goto	L2
  2123  007AE8                     l1302:
  2124  007AE8  0616               	decf	beep@duration,f,c
  2125  007AEA  A0D8               	btfss	status,0,c
  2126  007AEC  0617               	decf	beep@duration+1,f,c
  2127  007AEE  D7DE               	goto	l1288
  2128  007AF0                     __end_of_beep:
  2129                           	opt stack 0
  2130  0000                     tblptru	equ	0xFF8
  2131                           tblptrh	equ	0xFF7
  2132                           tblptrl	equ	0xFF6
  2133                           tablat	equ	0xFF5
  2134                           prodh	equ	0xFF4
  2135                           prodl	equ	0xFF3
  2136                           postinc0	equ	0xFEE
  2137                           wreg	equ	0xFE8
  2138                           postdec1	equ	0xFE5
  2139                           fsr1l	equ	0xFE1
  2140                           indf2	equ	0xFDF
  2141                           fsr2h	equ	0xFDA
  2142                           fsr2l	equ	0xFD9
  2143                           status	equ	0xFD8
  2144                           tblptru	equ	0xFF8
  2145                           tblptrh	equ	0xFF7
  2146                           tblptrl	equ	0xFF6
  2147                           tablat	equ	0xFF5
  2148                           prodh	equ	0xFF4
  2149                           prodl	equ	0xFF3
  2150                           postinc0	equ	0xFEE
  2151                           wreg	equ	0xFE8
  2152                           postdec1	equ	0xFE5
  2153                           fsr1l	equ	0xFE1
  2154                           indf2	equ	0xFDF
  2155                           fsr2h	equ	0xFDA
  2156                           fsr2l	equ	0xFD9
  2157                           status	equ	0xFD8
  2158                           
  2159                           	psect	rparam
  2160  0000                     tblptru	equ	0xFF8
  2161                           tblptrh	equ	0xFF7
  2162                           tblptrl	equ	0xFF6
  2163                           tablat	equ	0xFF5
  2164                           prodh	equ	0xFF4
  2165                           prodl	equ	0xFF3
  2166                           postinc0	equ	0xFEE
  2167                           wreg	equ	0xFE8
  2168                           postdec1	equ	0xFE5
  2169                           fsr1l	equ	0xFE1
  2170                           indf2	equ	0xFDF
  2171                           fsr2h	equ	0xFDA
  2172                           fsr2l	equ	0xFD9
  2173                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     14      38
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_checkMode
    _main->_delay
    _initVariables->_setPos
    _heyKidWantSomeCandy->_setPos
    _delay->___awdiv
    _commands->_setPos
    _checkMode->_beep

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   22044
                          _checkMode
                           _commands
                              _delay
                _heyKidWantSomeCandy
                            _initANA
                            _initOsc
                          _initPorts
                      _initVariables
                        _pulseServos
                             _setPos
 ---------------------------------------------------------------------------------
 (1) _pulseServos                                          6     6      0     150
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _initVariables                                        0     0      0    4062
                             _setPos
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initOsc                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initANA                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _heyKidWantSomeCandy                                  0     0      0    4062
                             _setPos
 ---------------------------------------------------------------------------------
 (1) _delay                                                6     6      0     498
                                              8 COMRAM     6     6      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _commands                                             0     0      0    4062
                             _setPos
 ---------------------------------------------------------------------------------
 (1) _checkMode                                            7     7      0    5148
                                              7 COMRAM     7     7      0
                               _beep
                             _setPos
 ---------------------------------------------------------------------------------
 (1) _setPos                                               5     1      4    4062
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _beep                                                 7     3      4     721
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _checkMode
     _beep
     _setPos
   _commands
     _setPos
   _delay
     ___awdiv
   _heyKidWantSomeCandy
     _setPos
   _initANA
   _initOsc
   _initPorts
   _initVariables
     _setPos
   _pulseServos
   _setPos

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      E      26       1       40.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      26       6        0.0%
DATA                 0      0      26       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Jun 20 16:56:08 2017

                 _pulseServos 7CA6                            l45 79D0                            _GO 007E11  
                ___awdiv@sign 0019                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                           l141 7F70  
                         l151 7FFC                           l152 7FF0                           l128 7FD2  
                         l160 7CF4                           l162 7D1C                           l164 7D44  
                         l166 7D6C                           l158 7CCC                  __CFG_CPB$OFF 000000  
                __CFG_CPD$OFF 000000                           u740 7ABE                           u758 7AC0  
                         prod 000FF3                           wreg 000FE8                  __CFG_LVP$OFF 000000  
                        l1102 7D34                          l1116 7D5C                          l1060 7CBC  
                        l1302 7AE8                          l1320 7C46                          l1330 7C68  
                        l1314 7C36                          l1074 7CE4                          l1404 7F32  
                        l1500 7E32                          l1422 7F7A                          l1502 7E4A  
                        l1326 7C5C                          l1342 7C8E                          l1432 7FA2  
                        l1504 7E62                          l1328 7C64                          l1088 7D0C  
                        l1418 7F6C                          l1426 7F96                          l1346 7C9C  
                        l1338 7C84                          l1436 7FB4                          l1428 7F9A  
                        l1508 7E7A                          l1460 7C0C                          l1438 7FBA  
                        l1518 7A30                          l1288 7AAC                          l1392 7F02  
                        l1560 7B64                          l1490 7DBA                          l1474 7D7E  
                        l1562 7B6A                          l1554 7B44                          l1396 7F14  
                        l1388 7EFA                          l1492 7DD2                          l1398 7F1A  
                        l1494 7DEA                          l1574 7B96                          l1558 7B4C  
                        l1566 7B70                          l1496 7E02                          l1488 7DA2  
                        l1576 7B9E                          l1568 7B84                          l1498 7E1A  
                        _ADON 007E10                          u1307 7D26                          u1317 7D3C  
                        _LATA 000F89                          _LATB 000F8A                          u1327 7D4E  
                        u1247 7CAE                          _LATC 000F8B                          u1337 7D64  
                        u1257 7CC4                          u1347 7C16                          u1267 7CD6  
                        u1277 7CEC                          u1287 7CFE                          u1297 7D14  
                        _beep 7AAC                          _main 7B34                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                 __CFG_BORV$190 000000  
                        prodl 000FF3                          start 2000                 __CFG_IESO$OFF 000000  
                ___param_bank 000000                         ?_beep 0014                         ?_main 0014  
             __end_of___awdiv 7CA6                         _T0CON 000FD5               ___awdiv@divisor 0016  
             ___awdiv@counter 0018                         _PORTA 000F80                         _PORTB 000F81  
                       _PORTC 000F82                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                         _cMode 0013                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000               __end_of_initANA 7A0A  
              __CFG_EBTRB$OFF 000000                         _delay 7BA6                         beep@j 0019  
             __end_of_initOsc 79D6                         tablat 000FF5                         status 000FD8  
              __CFG_T3CMX$RC0 000000                __CFG_MCLRE$OFF 000000               __initialization 7A3A  
                __end_of_beep 7AF0                  __end_of_main 7BA6                        ??_beep 0018  
                      ??_main 0022  __size_of_heyKidWantSomeCandy 0030                 __activetblptr 000002  
      __size_of_initVariables 0044                __CFG_SDOMX$RB3 000000               __CFG_CCP2MX$RC1 000000  
                      ?_delay 0014                        _ADCON0 000FC2                        _ADCON1 000FC1  
                      _ADCON2 000FC0                        _ACTCON 000FB5                        _ADRESH 000FC4  
            ___awdiv@dividend 0014                  pulseServos@i 0015                        _ANSELA 000F5B  
                      _ANSELB 000F5C                        _ANSELC 000F5D                        _OSCCON 000FD3  
                      _PLLRDY 007E97                __CFG_XINST$OFF 000000                        _cDelay 0012  
            __end_of_commands 7EB4                        _nDelay 0008                     ??___awdiv 0018  
              __CFG_STVREN$ON 000000                        _arcPos 0001                        delay@i 0020  
                      clear_0 7A60              ___awdiv@quotient 001A                        _setPos 79D6  
                   ??_initANA 0014                     ??_initOsc 0014                  __pdataCOMRAM 0022  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
        __CFG_LS48MHZ$SYS48X8 000000                    __accesstop 0060       __end_of__initialization 7A66  
             __CFG_PBADEN$OFF 000000           _nCalibrationCounter 0006                 _initVariables 7AF0  
               ___rparam_used 000001                __pcstackCOMRAM 0014              __CFG_nPWRTEN$OFF 000000  
          __size_of_checkMode 014C                 __end_of_delay 7C22                  ?_pulseServos 0014  
         _isPressedForGesture 000C               __CFG_PCLKEN$OFF 000000                __CFG_nLPBOR$ON 000000  
                     ??_delay 001C                ?_initVariables 0014            __size_of_initPorts 003C  
           __CFG_PLLSEL$PLL3X 000000               _cCycleIncrement 0010                       ?_setPos 0014  
             __CFG_WDTEN$SWON 000000                       _OSCCON2 000FD2                       _OSCTUNE 000F9B  
           __end_of_checkMode 8000                     ?_commands 0014           _heyKidWantSomeCandy 7A0A  
                     __Hparam 0000                       __Lparam 0000                    checkMode@i 001F  
                     ___awdiv 7C22                       __pcinit 7A3A                       __ramtop 0800  
                  _modeSelect 000E               __size_of_setPos 0018                       __ptext0 7B34  
                     __ptext1 7CA6                       __ptext2 7AF0                       __ptext3 7A70  
                     __ptext4 79C0                       __ptext5 79EE                       __ptext6 7A0A  
                     __ptext7 7BA6                       __ptext8 7C22                       __ptext9 7D70  
              checkMode@i_208 0020          ?_heyKidWantSomeCandy 0014                       _initANA 79EE  
           __end_of_initPorts 7AAC                       _initOsc 79C0                  beep@duration 0016  
                  ??_commands 0019          end_of_initialization 7A66               ??_initVariables 0019  
               __Lmediumconst 0000                       setPos@a 0018                       setPos@b 0014  
                     setPos@c 0015                       setPos@d 0016                       setPos@e 0017  
               _checkMode$207 001B                 _checkMode$209 001D                       postdec1 000FE5  
                     postinc0 000FEE         ??_heyKidWantSomeCandy 0019          __size_of_pulseServos 00CA  
                   _PORTEbits 000F84                 __pidataCOMRAM 2008                __end_of_setPos 79EE  
         start_initialization 7A3A                _buttonWasLetGo 000B                      ??_setPos 0018  
                 __pbssCOMRAM 0001             _cCountFingerCycle 0011                     _calibMode 000A  
           __size_of_commands 0144                     _checkMode 7EB4                     _arcMinPos 0022  
            _isPressedForMode 000D                      ?___awdiv 0014                     beep@pitch 0014  
                    ?_initANA 0014                      ?_initOsc 0014                     _initPorts 7A70  
              __size_of_delay 007C                      _LATAbits 000F89                      _LATBbits 000F8A  
                  ?_checkMode 0014              __CFG_WDTPS$32768 000000             __CFG_CFGPLLEN$OFF 000000  
                  ?_initPorts 0014            checkMode@cTempMode 0021                     copy_data0 7A4E  
       __end_of_initVariables 7B34                      __Hrparam 0000              pulseServos@i_220 0016  
            pulseServos@i_221 0017              pulseServos@i_222 0018              pulseServos@i_223 0019  
                    __Lrparam 0000                      _cGesture 000F            __CFG_BOREN$SBORDIS 000000  
 __end_of_heyKidWantSomeCandy 7A3A                 ??_pulseServos 0014              __size_of___awdiv 0084  
            __size_of_initANA 001C              __size_of_initOsc 0016                      __ptext10 7EB4  
                    __ptext11 79D6                      __ptext12 7AAC                      _commands 7D70  
               __size_of_beep 0044                 __size_of_main 0072                   ??_checkMode 001B  
         __end_of_pulseServos 7D70                   ??_initPorts 0014          __CFG_CPUDIV$NOCLKDIV 000000  
          __CFG_FOSC$INTOSCIO 000000  
