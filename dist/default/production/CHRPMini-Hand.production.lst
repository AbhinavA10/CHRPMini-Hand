

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Mon Jun 19 11:04:04 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23  0000                     
    24                           ; Version 1.42
    25                           ; Generated 13/04/2017 GMT
    26                           ; 
    27                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC18F25K50 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     _ANSELC	set	3933
    59  0000                     _ANSELB	set	3932
    60  0000                     _ANSELA	set	3931
    61  0000                     _LATBbits	set	3978
    62  0000                     _PORTEbits	set	3972
    63  0000                     _ADRESH	set	4036
    64  0000                     _ADCON2	set	4032
    65  0000                     _ADCON1	set	4033
    66  0000                     _ADCON0	set	4034
    67  0000                     _PORTC	set	3970
    68  0000                     _PORTB	set	3969
    69  0000                     _PORTA	set	3968
    70  0000                     _T0CON	set	4053
    71  0000                     _TRISC	set	3988
    72  0000                     _LATC	set	3979
    73  0000                     _TRISB	set	3987
    74  0000                     _LATB	set	3978
    75  0000                     _TRISA	set	3986
    76  0000                     _LATA	set	3977
    77  0000                     _ACTCON	set	4021
    78  0000                     _OSCCON2	set	4050
    79  0000                     _OSCCON	set	4051
    80  0000                     _OSCTUNE	set	3995
    81  0000                     _GO	set	32273
    82  0000                     _ADON	set	32272
    83  0000                     _PLLRDY	set	32407
    84                           
    85                           ; #config settings
    86  0000                     
    87                           	psect	cinit
    88  007A36                     __pcinit:
    89                           	opt stack 0
    90  007A36                     start_initialization:
    91                           	opt stack 0
    92  007A36                     __initialization:
    93                           	opt stack 0
    94                           
    95                           ; Clear objects allocated to COMRAM (16 bytes)
    96  007A36  EE00  F001         	lfsr	0,__pbssCOMRAM
    97  007A3A  0E10               	movlw	16
    98  007A3C                     clear_0:
    99  007A3C  6AEE               	clrf	postinc0,c
   100  007A3E  06E8               	decf	wreg,f,c
   101  007A40  E1FD               	bnz	clear_0
   102  007A42                     end_of_initialization:
   103                           	opt stack 0
   104  007A42                     __end_of__initialization:
   105                           	opt stack 0
   106  007A42  0E00               	movlw	low (__Lmediumconst shr (0+16))
   107  007A44  6EF8               	movwf	tblptru,c
   108  007A46  0100               	movlb	0
   109  007A48  EF92  F03D         	goto	_main	;jump to C main() function
   110                           tblptru	equ	0xFF8
   111                           postinc0	equ	0xFEE
   112                           wreg	equ	0xFE8
   113                           
   114                           	psect	bssCOMRAM
   115  000001                     __pbssCOMRAM:
   116                           	opt stack 0
   117  000001                     _arcPos:
   118                           	opt stack 0
   119  000001                     	ds	5
   120  000006                     _nDelay:
   121                           	opt stack 0
   122  000006                     	ds	2
   123  000008                     _buttonWasLetGo:
   124                           	opt stack 0
   125  000008                     	ds	1
   126  000009                     _isPressedForGesture:
   127                           	opt stack 0
   128  000009                     	ds	1
   129  00000A                     _isPressedForMode:
   130                           	opt stack 0
   131  00000A                     	ds	1
   132  00000B                     _modeSelect:
   133                           	opt stack 0
   134  00000B                     	ds	1
   135  00000C                     _cGesture:
   136                           	opt stack 0
   137  00000C                     	ds	1
   138  00000D                     _cCycleIncrement:
   139                           	opt stack 0
   140  00000D                     	ds	1
   141  00000E                     _cCountFingerCycle:
   142                           	opt stack 0
   143  00000E                     	ds	1
   144  00000F                     _cDelay:
   145                           	opt stack 0
   146  00000F                     	ds	1
   147  000010                     _cMode:
   148                           	opt stack 0
   149  000010                     	ds	1
   150                           tblptru	equ	0xFF8
   151                           postinc0	equ	0xFEE
   152                           wreg	equ	0xFE8
   153                           
   154                           	psect	cstackCOMRAM
   155  000011                     __pcstackCOMRAM:
   156                           	opt stack 0
   157  000011                     ??_pulseServos:
   158  000011                     ?___awdiv:
   159                           	opt stack 0
   160  000011                     setPos@b:
   161                           	opt stack 0
   162  000011                     ___awdiv@dividend:
   163                           	opt stack 0
   164                           
   165                           ; 2 bytes @ 0x0
   166  000011                     	ds	1
   167  000012                     setPos@c:
   168                           	opt stack 0
   169  000012                     _convertSensors$148:
   170                           	opt stack 0
   171  000012                     pulseServos@i:
   172                           	opt stack 0
   173                           
   174                           ; 1 bytes @ 0x1
   175  000012                     	ds	1
   176  000013                     setPos@d:
   177                           	opt stack 0
   178  000013                     convertSensors@cMax:
   179                           	opt stack 0
   180  000013                     pulseServos@i_170:
   181                           	opt stack 0
   182  000013                     ___awdiv@divisor:
   183                           	opt stack 0
   184                           
   185                           ; 2 bytes @ 0x2
   186  000013                     	ds	1
   187  000014                     setPos@e:
   188                           	opt stack 0
   189  000014                     convertSensors@i:
   190                           	opt stack 0
   191  000014                     pulseServos@i_171:
   192                           	opt stack 0
   193                           
   194                           ; 1 bytes @ 0x3
   195  000014                     	ds	1
   196  000015                     setPos@a:
   197                           	opt stack 0
   198  000015                     pulseServos@i_172:
   199                           	opt stack 0
   200  000015                     ___awdiv@counter:
   201                           	opt stack 0
   202                           
   203                           ; 1 bytes @ 0x4
   204  000015                     	ds	1
   205  000016                     pulseServos@i_173:
   206                           	opt stack 0
   207  000016                     ___awdiv@sign:
   208                           	opt stack 0
   209  000016                     _checkMode$157:
   210                           	opt stack 0
   211                           
   212                           ; 2 bytes @ 0x5
   213  000016                     	ds	1
   214  000017                     ___awdiv@quotient:
   215                           	opt stack 0
   216                           
   217                           ; 2 bytes @ 0x6
   218  000017                     	ds	1
   219  000018                     _checkMode$159:
   220                           	opt stack 0
   221                           
   222                           ; 2 bytes @ 0x7
   223  000018                     	ds	1
   224  000019                     ??_delay:
   225                           
   226                           ; 1 bytes @ 0x8
   227  000019                     	ds	1
   228  00001A                     checkMode@i:
   229                           	opt stack 0
   230                           
   231                           ; 1 bytes @ 0x9
   232  00001A                     	ds	1
   233  00001B                     checkMode@i_158:
   234                           	opt stack 0
   235                           
   236                           ; 1 bytes @ 0xA
   237  00001B                     	ds	1
   238  00001C                     checkMode@cTempMode:
   239                           	opt stack 0
   240                           
   241                           ; 1 bytes @ 0xB
   242  00001C                     	ds	1
   243  00001D                     delay@i:
   244                           	opt stack 0
   245                           
   246                           ; 2 bytes @ 0xC
   247  00001D                     	ds	2
   248  00001F                     tblptru	equ	0xFF8
   249                           postinc0	equ	0xFEE
   250                           wreg	equ	0xFE8
   251                           
   252                           ; 1 bytes @ 0xE
   253 ;;
   254 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   255 ;;
   256 ;; *************** function _main *****************
   257 ;; Defined at:
   258 ;;		line 298 in file "Hand.c"
   259 ;; Parameters:    Size  Location     Type
   260 ;;		None
   261 ;; Auto vars:     Size  Location     Type
   262 ;;		None
   263 ;; Return value:  Size  Location     Type
   264 ;;                  2  190[None  ] int 
   265 ;; Registers used:
   266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   267 ;; Tracked objects:
   268 ;;		On entry : 0/0
   269 ;;		On exit  : 0/0
   270 ;;		Unchanged: 0/0
   271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   272 ;;      Params:         0       0       0       0       0       0       0       0       0
   273 ;;      Locals:         0       0       0       0       0       0       0       0       0
   274 ;;      Temps:          0       0       0       0       0       0       0       0       0
   275 ;;      Totals:         0       0       0       0       0       0       0       0       0
   276 ;;Total ram usage:        0 bytes
   277 ;; Hardware stack levels required when called:    2
   278 ;; This function calls:
   279 ;;		_checkMode
   280 ;;		_commands
   281 ;;		_convertSensors
   282 ;;		_delay
   283 ;;		_heyKidWantSomeCandy
   284 ;;		_initANA
   285 ;;		_initOsc
   286 ;;		_initPorts
   287 ;;		_initVariables
   288 ;;		_pulseServos
   289 ;; This function is called by:
   290 ;;		Startup code after reset
   291 ;; This function uses a non-reentrant model
   292 ;;
   293                           
   294                           	psect	text0
   295  007B24                     __ptext0:
   296                           	opt stack 0
   297  007B24                     _main:
   298                           	opt stack 29
   299                           
   300                           ;Hand.c: 299: initOsc();
   301                           
   302                           ;incstack = 0
   303  007B24  EC10  F03D         	call	_initOsc	;wreg free
   304                           
   305                           ;Hand.c: 300: initPorts();
   306  007B28  EC74  F03D         	call	_initPorts	;wreg free
   307                           
   308                           ;Hand.c: 301: initANA();
   309  007B2C  EC32  F03D         	call	_initANA	;wreg free
   310                           
   311                           ;Hand.c: 302: initVariables();
   312  007B30  EC58  F03D         	call	_initVariables	;wreg free
   313  007B34                     l1409:
   314                           
   315                           ;Hand.c: 304: if (!modeSelect) {
   316  007B34  500B               	movf	_modeSelect,w,c
   317  007B36  B4D8               	btfsc	status,2,c
   318  007B38  D00A               	goto	l1421
   319  007B3A  D013               	goto	l1423
   320  007B3C                     l1413:
   321                           
   322                           ;Hand.c: 307: convertSensors();
   323  007B3C  ECB9  F03D         	call	_convertSensors	;wreg free
   324                           
   325                           ;Hand.c: 308: break;
   326  007B40  D010               	goto	l1423
   327  007B42                     l1415:
   328                           
   329                           ;Hand.c: 310: commands();
   330  007B42  EC5E  F03F         	call	_commands	;wreg free
   331                           
   332                           ;Hand.c: 311: break;
   333  007B46  D00D               	goto	l1423
   334  007B48                     l1417:
   335                           
   336                           ;Hand.c: 313: heyKidWantSomeCandy();
   337  007B48  EC40  F03D         	call	_heyKidWantSomeCandy	;wreg free
   338                           
   339                           ;Hand.c: 317: }
   340                           
   341                           ;Hand.c: 316: break;
   342                           
   343                           ;Hand.c: 315: default:
   344                           
   345                           ;Hand.c: 314: break;
   346  007B4C  D00A               	goto	l1423
   347  007B4E                     l1421:
   348  007B4E  5010               	movf	_cMode,w,c
   349                           
   350                           ; Switch size 1, requested type "space"
   351                           ; Number of cases is 3, Range of values is 0 to 2
   352                           ; switch strategies available:
   353                           ; Name         Instructions Cycles
   354                           ; simple_byte           10     6 (average)
   355                           ;	Chosen strategy is simple_byte
   356  007B50  0A00               	xorlw	0	; case 0
   357  007B52  B4D8               	btfsc	status,2,c
   358  007B54  D7F3               	goto	l1413
   359  007B56  0A01               	xorlw	1	; case 1
   360  007B58  B4D8               	btfsc	status,2,c
   361  007B5A  D7F3               	goto	l1415
   362  007B5C  0A03               	xorlw	3	; case 2
   363  007B5E  B4D8               	btfsc	status,2,c
   364  007B60  D7F3               	goto	l1417
   365  007B62                     l1423:
   366                           
   367                           ;Hand.c: 318: }
   368                           ;Hand.c: 319: pulseServos();
   369  007B62  EC74  F03E         	call	_pulseServos	;wreg free
   370                           
   371                           ;Hand.c: 320: delay();
   372  007B66  ECF4  F03D         	call	_delay	;wreg free
   373                           
   374                           ;Hand.c: 321: cMode = checkMode();
   375  007B6A  ECD9  F03E         	call	_checkMode	;wreg free
   376  007B6E  6E10               	movwf	_cMode,c
   377  007B70  D7E1               	goto	l1409
   378  007B72                     __end_of_main:
   379                           	opt stack 0
   380                           tblptru	equ	0xFF8
   381                           postinc0	equ	0xFEE
   382                           wreg	equ	0xFE8
   383                           status	equ	0xFD8
   384                           
   385 ;; *************** function _pulseServos *****************
   386 ;; Defined at:
   387 ;;		line 231 in file "Hand.c"
   388 ;; Parameters:    Size  Location     Type
   389 ;;		None
   390 ;; Auto vars:     Size  Location     Type
   391 ;;  i               1    5[COMRAM] unsigned char 
   392 ;;  i               1    4[COMRAM] unsigned char 
   393 ;;  i               1    3[COMRAM] unsigned char 
   394 ;;  i               1    2[COMRAM] unsigned char 
   395 ;;  i               1    1[COMRAM] unsigned char 
   396 ;; Return value:  Size  Location     Type
   397 ;;                  1    wreg      void 
   398 ;; Registers used:
   399 ;;		wreg, status,2, status,0
   400 ;; Tracked objects:
   401 ;;		On entry : 0/0
   402 ;;		On exit  : 0/0
   403 ;;		Unchanged: 0/0
   404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   405 ;;      Params:         0       0       0       0       0       0       0       0       0
   406 ;;      Locals:         5       0       0       0       0       0       0       0       0
   407 ;;      Temps:          1       0       0       0       0       0       0       0       0
   408 ;;      Totals:         6       0       0       0       0       0       0       0       0
   409 ;;Total ram usage:        6 bytes
   410 ;; Hardware stack levels used:    1
   411 ;; This function calls:
   412 ;;		Nothing
   413 ;; This function is called by:
   414 ;;		_main
   415 ;; This function uses a non-reentrant model
   416 ;;
   417                           
   418                           	psect	text1
   419  007CE8                     __ptext1:
   420                           	opt stack 0
   421  007CE8                     _pulseServos:
   422                           	opt stack 30
   423                           
   424                           ;Hand.c: 239: LATBbits.LATB7 = 1;
   425                           
   426                           ;incstack = 0
   427  007CE8  8E8A               	bsf	3978,7,c	;volatile
   428                           
   429                           ;Hand.c: 240: _delay((unsigned long)((540)*(48000000/4000000.0)));
   430  007CEA  0E09               	movlw	9
   431  007CEC  6E11               	movwf	??_pulseServos& (0+255),c
   432  007CEE  0E69               	movlw	105
   433  007CF0                     u977:
   434  007CF0  2EE8               	decfsz	wreg,f,c
   435  007CF2  D7FE               	bra	u977
   436  007CF4  2E11               	decfsz	??_pulseServos& (0+255),f,c
   437  007CF6  D7FC               	bra	u977
   438  007CF8  F000               	nop	
   439                           
   440                           ;Hand.c: 241: for (unsigned char i = arcPos[0]; i != 0; i--) {
   441  007CFA  C001  F012         	movff	_arcPos,pulseServos@i
   442  007CFE                     l1057:
   443  007CFE  5012               	movf	pulseServos@i,w,c
   444  007D00  B4D8               	btfsc	status,2,c
   445  007D02  D005               	goto	l172
   446                           
   447                           ;Hand.c: 242: _delay((unsigned long)((6)*(48000000/4000000.0)));
   448  007D04  0E18               	movlw	24
   449  007D06                     u987:
   450  007D06  2EE8               	decfsz	wreg,f,c
   451  007D08  D7FE               	bra	u987
   452  007D0A  0612               	decf	pulseServos@i,f,c
   453  007D0C  D7F8               	goto	l1057
   454  007D0E                     l172:
   455                           
   456                           ;Hand.c: 244: }
   457                           ;Hand.c: 245: LATBbits.LATB7 = 0;
   458  007D0E  9E8A               	bcf	3978,7,c	;volatile
   459                           
   460                           ;Hand.c: 248: LATBbits.LATB6 = 1;
   461  007D10  8C8A               	bsf	3978,6,c	;volatile
   462                           
   463                           ;Hand.c: 249: _delay((unsigned long)((540)*(48000000/4000000.0)));
   464  007D12  0E09               	movlw	9
   465  007D14  6E11               	movwf	??_pulseServos& (0+255),c
   466  007D16  0E69               	movlw	105
   467  007D18                     u997:
   468  007D18  2EE8               	decfsz	wreg,f,c
   469  007D1A  D7FE               	bra	u997
   470  007D1C  2E11               	decfsz	??_pulseServos& (0+255),f,c
   471  007D1E  D7FC               	bra	u997
   472  007D20  F000               	nop	
   473                           
   474                           ;Hand.c: 250: for (unsigned char i = arcPos[1]; i != 0; i--) {
   475  007D22  C002  F013         	movff	_arcPos+1,pulseServos@i_170
   476  007D26                     l1071:
   477  007D26  5013               	movf	pulseServos@i_170,w,c
   478  007D28  B4D8               	btfsc	status,2,c
   479  007D2A  D005               	goto	l174
   480                           
   481                           ;Hand.c: 251: _delay((unsigned long)((6)*(48000000/4000000.0)));
   482  007D2C  0E18               	movlw	24
   483  007D2E                     u1007:
   484  007D2E  2EE8               	decfsz	wreg,f,c
   485  007D30  D7FE               	bra	u1007
   486  007D32  0613               	decf	pulseServos@i_170,f,c
   487  007D34  D7F8               	goto	l1071
   488  007D36                     l174:
   489                           
   490                           ;Hand.c: 252: }
   491                           ;Hand.c: 253: LATBbits.LATB6 = 0;
   492  007D36  9C8A               	bcf	3978,6,c	;volatile
   493                           
   494                           ;Hand.c: 256: LATBbits.LATB5 = 1;
   495  007D38  8A8A               	bsf	3978,5,c	;volatile
   496                           
   497                           ;Hand.c: 257: _delay((unsigned long)((540)*(48000000/4000000.0)));
   498  007D3A  0E09               	movlw	9
   499  007D3C  6E11               	movwf	??_pulseServos& (0+255),c
   500  007D3E  0E69               	movlw	105
   501  007D40                     u1017:
   502  007D40  2EE8               	decfsz	wreg,f,c
   503  007D42  D7FE               	bra	u1017
   504  007D44  2E11               	decfsz	??_pulseServos& (0+255),f,c
   505  007D46  D7FC               	bra	u1017
   506  007D48  F000               	nop	
   507                           
   508                           ;Hand.c: 258: for (unsigned char i = arcPos[2]; i != 0; i--) {
   509  007D4A  C003  F014         	movff	_arcPos+2,pulseServos@i_171
   510  007D4E                     l1085:
   511  007D4E  5014               	movf	pulseServos@i_171,w,c
   512  007D50  B4D8               	btfsc	status,2,c
   513  007D52  D005               	goto	l176
   514                           
   515                           ;Hand.c: 259: _delay((unsigned long)((6)*(48000000/4000000.0)));
   516  007D54  0E18               	movlw	24
   517  007D56                     u1027:
   518  007D56  2EE8               	decfsz	wreg,f,c
   519  007D58  D7FE               	bra	u1027
   520  007D5A  0614               	decf	pulseServos@i_171,f,c
   521  007D5C  D7F8               	goto	l1085
   522  007D5E                     l176:
   523                           
   524                           ;Hand.c: 260: }
   525                           ;Hand.c: 261: LATBbits.LATB5 = 0;
   526  007D5E  9A8A               	bcf	3978,5,c	;volatile
   527                           
   528                           ;Hand.c: 264: LATBbits.LATB4 = 1;
   529  007D60  888A               	bsf	3978,4,c	;volatile
   530                           
   531                           ;Hand.c: 265: _delay((unsigned long)((540)*(48000000/4000000.0)));
   532  007D62  0E09               	movlw	9
   533  007D64  6E11               	movwf	??_pulseServos& (0+255),c
   534  007D66  0E69               	movlw	105
   535  007D68                     u1037:
   536  007D68  2EE8               	decfsz	wreg,f,c
   537  007D6A  D7FE               	bra	u1037
   538  007D6C  2E11               	decfsz	??_pulseServos& (0+255),f,c
   539  007D6E  D7FC               	bra	u1037
   540  007D70  F000               	nop	
   541                           
   542                           ;Hand.c: 266: for (unsigned char i = arcPos[3]; i != 0; i--) {
   543  007D72  C004  F015         	movff	_arcPos+3,pulseServos@i_172
   544  007D76                     l1099:
   545  007D76  5015               	movf	pulseServos@i_172,w,c
   546  007D78  B4D8               	btfsc	status,2,c
   547  007D7A  D005               	goto	l178
   548                           
   549                           ;Hand.c: 267: _delay((unsigned long)((6)*(48000000/4000000.0)));
   550  007D7C  0E18               	movlw	24
   551  007D7E                     u1047:
   552  007D7E  2EE8               	decfsz	wreg,f,c
   553  007D80  D7FE               	bra	u1047
   554  007D82  0615               	decf	pulseServos@i_172,f,c
   555  007D84  D7F8               	goto	l1099
   556  007D86                     l178:
   557                           
   558                           ;Hand.c: 268: }
   559                           ;Hand.c: 269: LATBbits.LATB4 = 0;
   560  007D86  988A               	bcf	3978,4,c	;volatile
   561                           
   562                           ;Hand.c: 272: LATBbits.LATB2 = 1;
   563  007D88  848A               	bsf	3978,2,c	;volatile
   564                           
   565                           ;Hand.c: 273: _delay((unsigned long)((540)*(48000000/4000000.0)));
   566  007D8A  0E09               	movlw	9
   567  007D8C  6E11               	movwf	??_pulseServos& (0+255),c
   568  007D8E  0E69               	movlw	105
   569  007D90                     u1057:
   570  007D90  2EE8               	decfsz	wreg,f,c
   571  007D92  D7FE               	bra	u1057
   572  007D94  2E11               	decfsz	??_pulseServos& (0+255),f,c
   573  007D96  D7FC               	bra	u1057
   574  007D98  F000               	nop	
   575                           
   576                           ;Hand.c: 274: for (unsigned char i = arcPos[4]; i != 0; i--) {
   577  007D9A  C005  F016         	movff	_arcPos+4,pulseServos@i_173
   578  007D9E                     l1113:
   579  007D9E  5016               	movf	pulseServos@i_173,w,c
   580  007DA0  B4D8               	btfsc	status,2,c
   581  007DA2  D005               	goto	l180
   582                           
   583                           ;Hand.c: 275: _delay((unsigned long)((6)*(48000000/4000000.0)));
   584  007DA4  0E18               	movlw	24
   585  007DA6                     u1067:
   586  007DA6  2EE8               	decfsz	wreg,f,c
   587  007DA8  D7FE               	bra	u1067
   588  007DAA  0616               	decf	pulseServos@i_173,f,c
   589  007DAC  D7F8               	goto	l1113
   590  007DAE                     l180:
   591                           
   592                           ;Hand.c: 276: }
   593                           ;Hand.c: 277: LATBbits.LATB2 = 0;
   594  007DAE  948A               	bcf	3978,2,c	;volatile
   595  007DB0  0012               	return		;funcret
   596  007DB2                     __end_of_pulseServos:
   597                           	opt stack 0
   598                           tblptru	equ	0xFF8
   599                           postinc0	equ	0xFEE
   600                           wreg	equ	0xFE8
   601                           status	equ	0xFD8
   602                           
   603 ;; *************** function _initVariables *****************
   604 ;; Defined at:
   605 ;;		line 57 in file "Hand.c"
   606 ;; Parameters:    Size  Location     Type
   607 ;;		None
   608 ;; Auto vars:     Size  Location     Type
   609 ;;		None
   610 ;; Return value:  Size  Location     Type
   611 ;;                  1    wreg      void 
   612 ;; Registers used:
   613 ;;		wreg, status,2, cstack
   614 ;; Tracked objects:
   615 ;;		On entry : 0/0
   616 ;;		On exit  : 0/0
   617 ;;		Unchanged: 0/0
   618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   619 ;;      Params:         0       0       0       0       0       0       0       0       0
   620 ;;      Locals:         0       0       0       0       0       0       0       0       0
   621 ;;      Temps:          0       0       0       0       0       0       0       0       0
   622 ;;      Totals:         0       0       0       0       0       0       0       0       0
   623 ;;Total ram usage:        0 bytes
   624 ;; Hardware stack levels used:    1
   625 ;; Hardware stack levels required when called:    1
   626 ;; This function calls:
   627 ;;		_setPos
   628 ;; This function is called by:
   629 ;;		_main
   630 ;; This function uses a non-reentrant model
   631 ;;
   632                           
   633                           	psect	text2
   634  007AB0                     __ptext2:
   635                           	opt stack 0
   636  007AB0                     _initVariables:
   637                           	opt stack 29
   638                           
   639                           ;Hand.c: 58: setPos(0, 0, 0, 0, 0);
   640                           
   641                           ;incstack = 0
   642  007AB0  0E00               	movlw	0
   643  007AB2  6E11               	movwf	setPos@b,c
   644  007AB4  0E00               	movlw	0
   645  007AB6  6E12               	movwf	setPos@c,c
   646  007AB8  0E00               	movlw	0
   647  007ABA  6E13               	movwf	setPos@d,c
   648  007ABC  0E00               	movlw	0
   649  007ABE  6E14               	movwf	setPos@e,c
   650  007AC0  0E00               	movlw	0
   651  007AC2  EC26  F03D         	call	_setPos
   652                           
   653                           ;Hand.c: 59: modeSelect = 0;
   654  007AC6  0E00               	movlw	0
   655  007AC8  6E0B               	movwf	_modeSelect,c
   656                           
   657                           ;Hand.c: 60: isPressedForMode = 0;
   658  007ACA  0E00               	movlw	0
   659  007ACC  6E0A               	movwf	_isPressedForMode,c
   660                           
   661                           ;Hand.c: 61: isPressedForGesture = 0;
   662  007ACE  0E00               	movlw	0
   663  007AD0  6E09               	movwf	_isPressedForGesture,c
   664                           
   665                           ;Hand.c: 62: buttonWasLetGo = 1;
   666  007AD2  0E01               	movlw	1
   667  007AD4  6E08               	movwf	_buttonWasLetGo,c
   668                           
   669                           ;Hand.c: 63: cMode = 0;
   670  007AD6  0E00               	movlw	0
   671  007AD8  6E10               	movwf	_cMode,c
   672                           
   673                           ;Hand.c: 64: cDelay = 0;
   674  007ADA  0E00               	movlw	0
   675  007ADC  6E0F               	movwf	_cDelay,c
   676                           
   677                           ;Hand.c: 65: cCountFingerCycle = 5;
   678  007ADE  0E05               	movlw	5
   679  007AE0  6E0E               	movwf	_cCountFingerCycle,c
   680                           
   681                           ;Hand.c: 66: cCycleIncrement = 5;
   682  007AE2  0E05               	movlw	5
   683  007AE4  6E0D               	movwf	_cCycleIncrement,c
   684  007AE6  0012               	return		;funcret
   685  007AE8                     __end_of_initVariables:
   686                           	opt stack 0
   687                           tblptru	equ	0xFF8
   688                           postinc0	equ	0xFEE
   689                           wreg	equ	0xFE8
   690                           status	equ	0xFD8
   691                           
   692 ;; *************** function _initPorts *****************
   693 ;; Defined at:
   694 ;;		line 27 in file "CHRP3.c"
   695 ;; Parameters:    Size  Location     Type
   696 ;;		None
   697 ;; Auto vars:     Size  Location     Type
   698 ;;		None
   699 ;; Return value:  Size  Location     Type
   700 ;;                  1    wreg      void 
   701 ;; Registers used:
   702 ;;		wreg, status,2
   703 ;; Tracked objects:
   704 ;;		On entry : 0/0
   705 ;;		On exit  : 0/0
   706 ;;		Unchanged: 0/0
   707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   708 ;;      Params:         0       0       0       0       0       0       0       0       0
   709 ;;      Locals:         0       0       0       0       0       0       0       0       0
   710 ;;      Temps:          0       0       0       0       0       0       0       0       0
   711 ;;      Totals:         0       0       0       0       0       0       0       0       0
   712 ;;Total ram usage:        0 bytes
   713 ;; Hardware stack levels used:    1
   714 ;; This function calls:
   715 ;;		Nothing
   716 ;; This function is called by:
   717 ;;		_main
   718 ;; This function uses a non-reentrant model
   719 ;;
   720                           
   721                           	psect	text3
   722  007AE8                     __ptext3:
   723                           	opt stack 0
   724  007AE8                     _initPorts:
   725                           	opt stack 30
   726                           
   727                           ;CHRP3.c: 29: LATA = 0b00000000;
   728                           
   729                           ;incstack = 0
   730  007AE8  0E00               	movlw	0
   731  007AEA  6E89               	movwf	3977,c	;volatile
   732                           
   733                           ;CHRP3.c: 30: ANSELA = 0b00000000;
   734  007AEC  0E00               	movlw	0
   735  007AEE  010F               	movlb	15	; () banked
   736  007AF0  6F5B               	movwf	91,b	;volatile
   737                           
   738                           ;CHRP3.c: 31: TRISA = 0b00101111;
   739  007AF2  0E2F               	movlw	47
   740  007AF4  6E92               	movwf	3986,c	;volatile
   741                           
   742                           ;CHRP3.c: 33: LATB = 0b00000000;
   743  007AF6  0E00               	movlw	0
   744  007AF8  6E8A               	movwf	3978,c	;volatile
   745                           
   746                           ;CHRP3.c: 34: ANSELB = 0b00000000;
   747  007AFA  0E00               	movlw	0
   748  007AFC  010F               	movlb	15	; () banked
   749  007AFE  6F5C               	movwf	92,b	;volatile
   750                           
   751                           ;CHRP3.c: 35: TRISB = 0b00000000;
   752  007B00  0E00               	movlw	0
   753  007B02  6E93               	movwf	3987,c	;volatile
   754                           
   755                           ;CHRP3.c: 36: LATC = 0b00000000;
   756  007B04  0E00               	movlw	0
   757  007B06  6E8B               	movwf	3979,c	;volatile
   758                           
   759                           ;CHRP3.c: 37: ANSELC = 0b00000000;
   760  007B08  0E00               	movlw	0
   761  007B0A  010F               	movlb	15	; () banked
   762  007B0C  6F5D               	movwf	93,b	;volatile
   763                           
   764                           ;CHRP3.c: 38: TRISC = 0b10110000;
   765  007B0E  0EB0               	movlw	176
   766  007B10  6E94               	movwf	3988,c	;volatile
   767                           
   768                           ;CHRP3.c: 41: T0CON = 0b10000001;
   769  007B12  0E81               	movlw	129
   770  007B14  6ED5               	movwf	4053,c	;volatile
   771                           
   772                           ;CHRP3.c: 44: PORTA = 0;
   773  007B16  0E00               	movlw	0
   774  007B18  6E80               	movwf	3968,c	;volatile
   775                           
   776                           ;CHRP3.c: 45: PORTB = 0;
   777  007B1A  0E00               	movlw	0
   778  007B1C  6E81               	movwf	3969,c	;volatile
   779                           
   780                           ;CHRP3.c: 46: PORTC = 0;
   781  007B1E  0E00               	movlw	0
   782  007B20  6E82               	movwf	3970,c	;volatile
   783                           
   784                           ; BSR set to: 15
   785  007B22  0012               	return		;funcret
   786  007B24                     __end_of_initPorts:
   787                           	opt stack 0
   788                           tblptru	equ	0xFF8
   789                           postinc0	equ	0xFEE
   790                           wreg	equ	0xFE8
   791                           status	equ	0xFD8
   792                           
   793 ;; *************** function _initOsc *****************
   794 ;; Defined at:
   795 ;;		line 16 in file "CHRP3.c"
   796 ;; Parameters:    Size  Location     Type
   797 ;;		None
   798 ;; Auto vars:     Size  Location     Type
   799 ;;		None
   800 ;; Return value:  Size  Location     Type
   801 ;;                  1    wreg      void 
   802 ;; Registers used:
   803 ;;		wreg, status,2
   804 ;; Tracked objects:
   805 ;;		On entry : 0/0
   806 ;;		On exit  : 0/0
   807 ;;		Unchanged: 0/0
   808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   809 ;;      Params:         0       0       0       0       0       0       0       0       0
   810 ;;      Locals:         0       0       0       0       0       0       0       0       0
   811 ;;      Temps:          0       0       0       0       0       0       0       0       0
   812 ;;      Totals:         0       0       0       0       0       0       0       0       0
   813 ;;Total ram usage:        0 bytes
   814 ;; Hardware stack levels used:    1
   815 ;; This function calls:
   816 ;;		Nothing
   817 ;; This function is called by:
   818 ;;		_main
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           	psect	text4
   823  007A20                     __ptext4:
   824                           	opt stack 0
   825  007A20                     _initOsc:
   826                           	opt stack 30
   827                           
   828                           ;CHRP3.c: 18: OSCTUNE = 0x80;
   829                           
   830                           ; BSR set to: 15
   831                           ;incstack = 0
   832  007A20  0E80               	movlw	128
   833  007A22  6E9B               	movwf	3995,c	;volatile
   834                           
   835                           ;CHRP3.c: 19: OSCCON = 0x70;
   836  007A24  0E70               	movlw	112
   837  007A26  6ED3               	movwf	4051,c	;volatile
   838                           
   839                           ;CHRP3.c: 20: OSCCON2 = 0x10;
   840  007A28  0E10               	movlw	16
   841  007A2A  6ED2               	movwf	4050,c	;volatile
   842                           
   843                           ;CHRP3.c: 21: ACTCON = 0x90;
   844  007A2C  0E90               	movlw	144
   845  007A2E  6EB5               	movwf	4021,c	;volatile
   846  007A30                     l45:
   847  007A30  BED2               	btfsc	4050,7,c	;volatile
   848  007A32  0012               	return	
   849  007A34  D7FD               	goto	l45
   850  007A36                     __end_of_initOsc:
   851                           	opt stack 0
   852                           tblptru	equ	0xFF8
   853                           postinc0	equ	0xFEE
   854                           wreg	equ	0xFE8
   855                           status	equ	0xFD8
   856                           
   857 ;; *************** function _initANA *****************
   858 ;; Defined at:
   859 ;;		line 52 in file "CHRP3.c"
   860 ;; Parameters:    Size  Location     Type
   861 ;;		None
   862 ;; Auto vars:     Size  Location     Type
   863 ;;		None
   864 ;; Return value:  Size  Location     Type
   865 ;;                  1    wreg      void 
   866 ;; Registers used:
   867 ;;		wreg, status,2
   868 ;; Tracked objects:
   869 ;;		On entry : 0/0
   870 ;;		On exit  : 0/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   873 ;;      Params:         0       0       0       0       0       0       0       0       0
   874 ;;      Locals:         0       0       0       0       0       0       0       0       0
   875 ;;      Temps:          0       0       0       0       0       0       0       0       0
   876 ;;      Totals:         0       0       0       0       0       0       0       0       0
   877 ;;Total ram usage:        0 bytes
   878 ;; Hardware stack levels used:    1
   879 ;; This function calls:
   880 ;;		Nothing
   881 ;; This function is called by:
   882 ;;		_main
   883 ;; This function uses a non-reentrant model
   884 ;;
   885                           
   886                           	psect	text5
   887  007A64                     __ptext5:
   888                           	opt stack 0
   889  007A64                     _initANA:
   890                           	opt stack 30
   891                           
   892                           ;CHRP3.c: 54: LATA = 0b00000000;
   893                           
   894                           ;incstack = 0
   895  007A64  0E00               	movlw	0
   896  007A66  6E89               	movwf	3977,c	;volatile
   897                           
   898                           ;CHRP3.c: 55: ANSELA = 0b0011111;
   899  007A68  0E1F               	movlw	31
   900  007A6A  010F               	movlb	15	; () banked
   901  007A6C  6F5B               	movwf	91,b	;volatile
   902                           
   903                           ;CHRP3.c: 56: ADCON0 = 0b00000000;
   904  007A6E  0E00               	movlw	0
   905  007A70  6EC2               	movwf	4034,c	;volatile
   906                           
   907                           ;CHRP3.c: 57: ADCON1 = 0b00000000;
   908  007A72  0E00               	movlw	0
   909  007A74  6EC1               	movwf	4033,c	;volatile
   910                           
   911                           ;CHRP3.c: 58: ADCON2 = 0b00001110;
   912  007A76  0E0E               	movlw	14
   913  007A78  6EC0               	movwf	4032,c	;volatile
   914                           
   915                           ;CHRP3.c: 59: TRISA = 0b00101111;
   916  007A7A  0E2F               	movlw	47
   917  007A7C  6E92               	movwf	3986,c	;volatile
   918                           
   919                           ; BSR set to: 15
   920  007A7E  0012               	return		;funcret
   921  007A80                     __end_of_initANA:
   922                           	opt stack 0
   923                           tblptru	equ	0xFF8
   924                           postinc0	equ	0xFEE
   925                           wreg	equ	0xFE8
   926                           status	equ	0xFD8
   927                           
   928 ;; *************** function _heyKidWantSomeCandy *****************
   929 ;; Defined at:
   930 ;;		line 171 in file "Hand.c"
   931 ;; Parameters:    Size  Location     Type
   932 ;;		None
   933 ;; Auto vars:     Size  Location     Type
   934 ;;		None
   935 ;; Return value:  Size  Location     Type
   936 ;;                  1    wreg      void 
   937 ;; Registers used:
   938 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   939 ;; Tracked objects:
   940 ;;		On entry : 0/0
   941 ;;		On exit  : 0/0
   942 ;;		Unchanged: 0/0
   943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   944 ;;      Params:         0       0       0       0       0       0       0       0       0
   945 ;;      Locals:         0       0       0       0       0       0       0       0       0
   946 ;;      Temps:          0       0       0       0       0       0       0       0       0
   947 ;;      Totals:         0       0       0       0       0       0       0       0       0
   948 ;;Total ram usage:        0 bytes
   949 ;; Hardware stack levels used:    1
   950 ;; Hardware stack levels required when called:    1
   951 ;; This function calls:
   952 ;;		_setPos
   953 ;; This function is called by:
   954 ;;		_main
   955 ;; This function uses a non-reentrant model
   956 ;;
   957                           
   958                           	psect	text6
   959  007A80                     __ptext6:
   960                           	opt stack 0
   961  007A80                     _heyKidWantSomeCandy:
   962                           	opt stack 29
   963                           
   964                           ;Hand.c: 172: setPos(255, cCountFingerCycle, 255, 255, 255);
   965                           
   966                           ; BSR set to: 15
   967                           ;incstack = 0
   968  007A80  C00E  F011         	movff	_cCountFingerCycle,setPos@b
   969  007A84  0EFF               	movlw	255
   970  007A86  6E12               	movwf	setPos@c,c
   971  007A88  0EFF               	movlw	255
   972  007A8A  6E13               	movwf	setPos@d,c
   973  007A8C  0EFF               	movlw	255
   974  007A8E  6E14               	movwf	setPos@e,c
   975  007A90  0EFF               	movlw	255
   976  007A92  EC26  F03D         	call	_setPos
   977                           
   978                           ;Hand.c: 173: cCountFingerCycle += cCycleIncrement;
   979  007A96  500D               	movf	_cCycleIncrement,w,c
   980  007A98  260E               	addwf	_cCountFingerCycle,f,c
   981                           
   982                           ;Hand.c: 174: if (cCountFingerCycle == 255 || cCountFingerCycle == 0) {
   983  007A9A  280E               	incf	_cCountFingerCycle,w,c
   984  007A9C  B4D8               	btfsc	status,2,c
   985  007A9E  D003               	goto	l1323
   986  007AA0  500E               	movf	_cCountFingerCycle,w,c
   987  007AA2  A4D8               	btfss	status,2,c
   988  007AA4  0012               	return	
   989  007AA6                     l1323:
   990                           
   991                           ;Hand.c: 175: cCycleIncrement *= -1;
   992  007AA6  0EFF               	movlw	255
   993  007AA8  020D               	mulwf	_cCycleIncrement,c
   994  007AAA  50F3               	movf	prodl,w,c
   995  007AAC  6E0D               	movwf	_cCycleIncrement,c
   996  007AAE  0012               	return	
   997  007AB0                     __end_of_heyKidWantSomeCandy:
   998                           	opt stack 0
   999                           tblptru	equ	0xFF8
  1000                           prodl	equ	0xFF3
  1001                           postinc0	equ	0xFEE
  1002                           wreg	equ	0xFE8
  1003                           status	equ	0xFD8
  1004                           
  1005 ;; *************** function _delay *****************
  1006 ;; Defined at:
  1007 ;;		line 288 in file "Hand.c"
  1008 ;; Parameters:    Size  Location     Type
  1009 ;;		None
  1010 ;; Auto vars:     Size  Location     Type
  1011 ;;  i               2   12[COMRAM] int 
  1012 ;; Return value:  Size  Location     Type
  1013 ;;                  1    wreg      void 
  1014 ;; Registers used:
  1015 ;;		wreg, status,2, status,0, cstack
  1016 ;; Tracked objects:
  1017 ;;		On entry : 0/0
  1018 ;;		On exit  : 0/0
  1019 ;;		Unchanged: 0/0
  1020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1021 ;;      Params:         0       0       0       0       0       0       0       0       0
  1022 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1023 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1024 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1025 ;;Total ram usage:        6 bytes
  1026 ;; Hardware stack levels used:    1
  1027 ;; Hardware stack levels required when called:    1
  1028 ;; This function calls:
  1029 ;;		___awdiv
  1030 ;; This function is called by:
  1031 ;;		_main
  1032 ;; This function uses a non-reentrant model
  1033 ;;
  1034                           
  1035                           	psect	text7
  1036  007BE8                     __ptext7:
  1037                           	opt stack 0
  1038  007BE8                     _delay:
  1039                           	opt stack 29
  1040                           
  1041                           ;Hand.c: 289: nDelay = (int) ((20000 - 2500 - 540 * 5 - arcPos[0] - arcPos[1] - arcPos[2
      +                          ] - arcPos[3] - arcPos[4]) / 6);
  1042                           
  1043                           ;incstack = 0
  1044  007BE8  0E50               	movlw	80
  1045  007BEA  6E19               	movwf	??_delay& (0+255),c
  1046  007BEC  0E14               	movlw	20
  1047  007BEE  6E1A               	movwf	(??_delay+1)& (0+255),c
  1048  007BF0  5002               	movf	_arcPos+1,w,c
  1049  007BF2  C001  F01B         	movff	_arcPos,??_delay+2
  1050  007BF6  6A1C               	clrf	(??_delay+3)& (0+255),c
  1051  007BF8  261B               	addwf	??_delay+2,f,c
  1052  007BFA  0E00               	movlw	0
  1053  007BFC  221C               	addwfc	??_delay+3,f,c
  1054  007BFE  5003               	movf	_arcPos+2,w,c
  1055  007C00  261B               	addwf	??_delay+2,f,c
  1056  007C02  0E00               	movlw	0
  1057  007C04  221C               	addwfc	??_delay+3,f,c
  1058  007C06  5004               	movf	_arcPos+3,w,c
  1059  007C08  261B               	addwf	??_delay+2,f,c
  1060  007C0A  0E00               	movlw	0
  1061  007C0C  221C               	addwfc	??_delay+3,f,c
  1062  007C0E  5005               	movf	_arcPos+4,w,c
  1063  007C10  261B               	addwf	??_delay+2,f,c
  1064  007C12  0E00               	movlw	0
  1065  007C14  221C               	addwfc	??_delay+3,f,c
  1066  007C16  5019               	movf	??_delay,w,c
  1067  007C18  261B               	addwf	??_delay+2,f,c
  1068  007C1A  501A               	movf	??_delay+1,w,c
  1069  007C1C  221C               	addwfc	??_delay+3,f,c
  1070  007C1E  1E1B               	comf	??_delay+2,f,c
  1071  007C20  1E1C               	comf	??_delay+3,f,c
  1072  007C22  4A1B               	infsnz	??_delay+2,f,c
  1073  007C24  2A1C               	incf	??_delay+3,f,c
  1074  007C26  0E20               	movlw	32
  1075  007C28  241B               	addwf	??_delay+2,w,c
  1076  007C2A  6E11               	movwf	___awdiv@dividend,c
  1077  007C2C  0E4E               	movlw	78
  1078  007C2E  201C               	addwfc	??_delay+3,w,c
  1079  007C30  6E12               	movwf	___awdiv@dividend+1,c
  1080  007C32  0E00               	movlw	0
  1081  007C34  6E14               	movwf	___awdiv@divisor+1,c
  1082  007C36  0E06               	movlw	6
  1083  007C38  6E13               	movwf	___awdiv@divisor,c
  1084  007C3A  EC32  F03E         	call	___awdiv	;wreg free
  1085  007C3E  C011  F006         	movff	?___awdiv,_nDelay
  1086  007C42  C012  F007         	movff	?___awdiv+1,_nDelay+1
  1087                           
  1088                           ;Hand.c: 290: for (int i = nDelay; i != 0; i--) {
  1089  007C46  C006  F01D         	movff	_nDelay,delay@i
  1090  007C4A  C007  F01E         	movff	_nDelay+1,delay@i+1
  1091  007C4E                     l1399:
  1092  007C4E  501D               	movf	delay@i,w,c
  1093  007C50  101E               	iorwf	delay@i+1,w,c
  1094  007C52  B4D8               	btfsc	status,2,c
  1095  007C54  0012               	return	
  1096                           
  1097                           ;Hand.c: 291: _delay((unsigned long)((6)*(48000000/4000000.0)));
  1098  007C56  0E18               	movlw	24
  1099  007C58                     u1077:
  1100  007C58  2EE8               	decfsz	wreg,f,c
  1101  007C5A  D7FE               	bra	u1077
  1102  007C5C  061D               	decf	delay@i,f,c
  1103  007C5E  A0D8               	btfss	status,0,c
  1104  007C60  061E               	decf	delay@i+1,f,c
  1105  007C62  D7F5               	goto	l1399
  1106  007C64                     __end_of_delay:
  1107                           	opt stack 0
  1108                           tblptru	equ	0xFF8
  1109                           prodl	equ	0xFF3
  1110                           postinc0	equ	0xFEE
  1111                           wreg	equ	0xFE8
  1112                           status	equ	0xFD8
  1113                           
  1114 ;; *************** function ___awdiv *****************
  1115 ;; Defined at:
  1116 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.42\sources\common\awdiv.c"
  1117 ;; Parameters:    Size  Location     Type
  1118 ;;  dividend        2    0[COMRAM] int 
  1119 ;;  divisor         2    2[COMRAM] int 
  1120 ;; Auto vars:     Size  Location     Type
  1121 ;;  quotient        2    6[COMRAM] int 
  1122 ;;  sign            1    5[COMRAM] unsigned char 
  1123 ;;  counter         1    4[COMRAM] unsigned char 
  1124 ;; Return value:  Size  Location     Type
  1125 ;;                  2    0[COMRAM] int 
  1126 ;; Registers used:
  1127 ;;		wreg, status,2, status,0
  1128 ;; Tracked objects:
  1129 ;;		On entry : 0/0
  1130 ;;		On exit  : 0/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1133 ;;      Params:         4       0       0       0       0       0       0       0       0
  1134 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1135 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1136 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1137 ;;Total ram usage:        8 bytes
  1138 ;; Hardware stack levels used:    1
  1139 ;; This function calls:
  1140 ;;		Nothing
  1141 ;; This function is called by:
  1142 ;;		_delay
  1143 ;; This function uses a non-reentrant model
  1144 ;;
  1145                           
  1146                           	psect	text8
  1147  007C64                     __ptext8:
  1148                           	opt stack 0
  1149  007C64                     ___awdiv:
  1150                           	opt stack 29
  1151                           
  1152                           ;incstack = 0
  1153  007C64  0E00               	movlw	0
  1154  007C66  6E16               	movwf	___awdiv@sign,c
  1155  007C68  AE14               	btfss	___awdiv@divisor+1,7,c
  1156  007C6A  D006               	goto	l1191
  1157  007C6C  6C13               	negf	___awdiv@divisor,c
  1158  007C6E  1E14               	comf	___awdiv@divisor+1,f,c
  1159  007C70  B0D8               	btfsc	status,0,c
  1160  007C72  2A14               	incf	___awdiv@divisor+1,f,c
  1161  007C74  0E01               	movlw	1
  1162  007C76  6E16               	movwf	___awdiv@sign,c
  1163  007C78                     l1191:
  1164  007C78  AE12               	btfss	___awdiv@dividend+1,7,c
  1165  007C7A  D006               	goto	l1197
  1166  007C7C  6C11               	negf	___awdiv@dividend,c
  1167  007C7E  1E12               	comf	___awdiv@dividend+1,f,c
  1168  007C80  B0D8               	btfsc	status,0,c
  1169  007C82  2A12               	incf	___awdiv@dividend+1,f,c
  1170  007C84  0E01               	movlw	1
  1171  007C86  1A16               	xorwf	___awdiv@sign,f,c
  1172  007C88                     l1197:
  1173  007C88  0E00               	movlw	0
  1174  007C8A  6E18               	movwf	___awdiv@quotient+1,c
  1175  007C8C  0E00               	movlw	0
  1176  007C8E  6E17               	movwf	___awdiv@quotient,c
  1177  007C90  5013               	movf	___awdiv@divisor,w,c
  1178  007C92  1014               	iorwf	___awdiv@divisor+1,w,c
  1179  007C94  B4D8               	btfsc	status,2,c
  1180  007C96  D01C               	goto	l1219
  1181  007C98  0E01               	movlw	1
  1182  007C9A  6E15               	movwf	___awdiv@counter,c
  1183  007C9C  D004               	goto	l1205
  1184  007C9E                     l1203:
  1185  007C9E  90D8               	bcf	status,0,c
  1186  007CA0  3613               	rlcf	___awdiv@divisor,f,c
  1187  007CA2  3614               	rlcf	___awdiv@divisor+1,f,c
  1188  007CA4  2A15               	incf	___awdiv@counter,f,c
  1189  007CA6                     l1205:
  1190  007CA6  AE14               	btfss	___awdiv@divisor+1,7,c
  1191  007CA8  D7FA               	goto	l1203
  1192  007CAA                     l1207:
  1193  007CAA  90D8               	bcf	status,0,c
  1194  007CAC  3617               	rlcf	___awdiv@quotient,f,c
  1195  007CAE  3618               	rlcf	___awdiv@quotient+1,f,c
  1196  007CB0  5013               	movf	___awdiv@divisor,w,c
  1197  007CB2  5C11               	subwf	___awdiv@dividend,w,c
  1198  007CB4  5014               	movf	___awdiv@divisor+1,w,c
  1199  007CB6  5812               	subwfb	___awdiv@dividend+1,w,c
  1200  007CB8  A0D8               	btfss	status,0,c
  1201  007CBA  D005               	goto	l1215
  1202  007CBC  5013               	movf	___awdiv@divisor,w,c
  1203  007CBE  5E11               	subwf	___awdiv@dividend,f,c
  1204  007CC0  5014               	movf	___awdiv@divisor+1,w,c
  1205  007CC2  5A12               	subwfb	___awdiv@dividend+1,f,c
  1206  007CC4  8017               	bsf	___awdiv@quotient,0,c
  1207  007CC6                     l1215:
  1208  007CC6  90D8               	bcf	status,0,c
  1209  007CC8  3214               	rrcf	___awdiv@divisor+1,f,c
  1210  007CCA  3213               	rrcf	___awdiv@divisor,f,c
  1211  007CCC  2E15               	decfsz	___awdiv@counter,f,c
  1212  007CCE  D7ED               	goto	l1207
  1213  007CD0                     l1219:
  1214  007CD0  5016               	movf	___awdiv@sign,w,c
  1215  007CD2  B4D8               	btfsc	status,2,c
  1216  007CD4  D004               	goto	l1223
  1217  007CD6  6C17               	negf	___awdiv@quotient,c
  1218  007CD8  1E18               	comf	___awdiv@quotient+1,f,c
  1219  007CDA  B0D8               	btfsc	status,0,c
  1220  007CDC  2A18               	incf	___awdiv@quotient+1,f,c
  1221  007CDE                     l1223:
  1222  007CDE  C017  F011         	movff	___awdiv@quotient,?___awdiv
  1223  007CE2  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  1224  007CE6  0012               	return	
  1225  007CE8                     __end_of___awdiv:
  1226                           	opt stack 0
  1227                           tblptru	equ	0xFF8
  1228                           prodl	equ	0xFF3
  1229                           postinc0	equ	0xFEE
  1230                           wreg	equ	0xFE8
  1231                           status	equ	0xFD8
  1232                           
  1233 ;; *************** function _convertSensors *****************
  1234 ;; Defined at:
  1235 ;;		line 97 in file "Hand.c"
  1236 ;; Parameters:    Size  Location     Type
  1237 ;;		None
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;  i               1    3[COMRAM] unsigned char 
  1240 ;;  cMax            1    2[COMRAM] unsigned char 
  1241 ;; Return value:  Size  Location     Type
  1242 ;;                  1    wreg      void 
  1243 ;; Registers used:
  1244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1245 ;; Tracked objects:
  1246 ;;		On entry : 0/0
  1247 ;;		On exit  : 0/0
  1248 ;;		Unchanged: 0/0
  1249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1250 ;;      Params:         0       0       0       0       0       0       0       0       0
  1251 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1252 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1253 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1254 ;;Total ram usage:        4 bytes
  1255 ;; Hardware stack levels used:    1
  1256 ;; This function calls:
  1257 ;;		Nothing
  1258 ;; This function is called by:
  1259 ;;		_main
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263                           	psect	text9
  1264  007B72                     __ptext9:
  1265                           	opt stack 0
  1266  007B72                     _convertSensors:
  1267                           	opt stack 30
  1268                           
  1269                           ;Hand.c: 103: unsigned char cMax = 0;
  1270                           
  1271                           ;incstack = 0
  1272  007B72  0E00               	movlw	0
  1273  007B74  6E13               	movwf	convertSensors@cMax,c
  1274                           
  1275                           ;Hand.c: 104: if (arcPos[2] > (arcPos[0] && arcPos[1] && arcPos[3] && arcPos[4])) {
  1276  007B76  0E00               	movlw	0
  1277  007B78  6E12               	movwf	_convertSensors$148,c
  1278  007B7A  5001               	movf	_arcPos,w,c
  1279  007B7C  B4D8               	btfsc	status,2,c
  1280  007B7E  D00B               	goto	l1255
  1281  007B80  5002               	movf	_arcPos+1,w,c
  1282  007B82  B4D8               	btfsc	status,2,c
  1283  007B84  D008               	goto	l1255
  1284  007B86  5004               	movf	_arcPos+3,w,c
  1285  007B88  B4D8               	btfsc	status,2,c
  1286  007B8A  D005               	goto	l1255
  1287  007B8C  5005               	movf	_arcPos+4,w,c
  1288  007B8E  B4D8               	btfsc	status,2,c
  1289  007B90  D002               	goto	l1255
  1290  007B92  0E01               	movlw	1
  1291  007B94  6E12               	movwf	_convertSensors$148,c
  1292  007B96                     l1255:
  1293  007B96  5003               	movf	_arcPos+2,w,c
  1294  007B98  5C12               	subwf	_convertSensors$148,w,c
  1295  007B9A  B0D8               	btfsc	status,0,c
  1296  007B9C  0012               	return	
  1297                           
  1298                           ;Hand.c: 105: for (unsigned char i = 0; i < 5 ; i++) {
  1299  007B9E  0E00               	movlw	0
  1300  007BA0  6E14               	movwf	convertSensors@i,c
  1301  007BA2                     l1259:
  1302  007BA2  0E04               	movlw	4
  1303  007BA4  6414               	cpfsgt	convertSensors@i,c
  1304  007BA6  D001               	goto	l1263
  1305  007BA8  D01C               	goto	l117
  1306  007BAA                     l1263:
  1307                           
  1308                           ;Hand.c: 106: if (arcPos[i] > cMax && i != 2) {
  1309  007BAA  5014               	movf	convertSensors@i,w,c
  1310  007BAC  0D01               	mullw	1
  1311  007BAE  0E01               	movlw	low _arcPos
  1312  007BB0  24F3               	addwf	prodl,w,c
  1313  007BB2  6ED9               	movwf	fsr2l,c
  1314  007BB4  0E00               	movlw	high _arcPos
  1315  007BB6  20F4               	addwfc	prodh,w,c
  1316  007BB8  6EDA               	movwf	fsr2h,c
  1317  007BBA  50DE               	movf	postinc2,w,c
  1318  007BBC  5C13               	subwf	convertSensors@cMax,w,c
  1319  007BBE  B0D8               	btfsc	status,0,c
  1320  007BC0  D00E               	goto	l1269
  1321  007BC2  0E02               	movlw	2
  1322  007BC4  1814               	xorwf	convertSensors@i,w,c
  1323  007BC6  B4D8               	btfsc	status,2,c
  1324  007BC8  D00A               	goto	l1269
  1325                           
  1326                           ;Hand.c: 107: arcPos[i] = cMax;
  1327  007BCA  5014               	movf	convertSensors@i,w,c
  1328  007BCC  0D01               	mullw	1
  1329  007BCE  0E01               	movlw	low _arcPos
  1330  007BD0  24F3               	addwf	prodl,w,c
  1331  007BD2  6ED9               	movwf	fsr2l,c
  1332  007BD4  0E00               	movlw	high _arcPos
  1333  007BD6  20F4               	addwfc	prodh,w,c
  1334  007BD8  6EDA               	movwf	fsr2h,c
  1335  007BDA  C013  FFDF         	movff	convertSensors@cMax,indf2
  1336  007BDE                     l1269:
  1337  007BDE  2A14               	incf	convertSensors@i,f,c
  1338  007BE0  D7E0               	goto	l1259
  1339  007BE2                     l117:
  1340                           
  1341                           ;Hand.c: 108: }
  1342                           ;Hand.c: 109: }
  1343                           ;Hand.c: 110: arcPos[2] = cMax;
  1344  007BE2  C013  F003         	movff	convertSensors@cMax,_arcPos+2
  1345  007BE6  0012               	return	
  1346  007BE8                     __end_of_convertSensors:
  1347                           	opt stack 0
  1348                           tblptru	equ	0xFF8
  1349                           prodh	equ	0xFF4
  1350                           prodl	equ	0xFF3
  1351                           postinc0	equ	0xFEE
  1352                           wreg	equ	0xFE8
  1353                           indf2	equ	0xFDF
  1354                           postinc2	equ	0xFDE
  1355                           fsr2h	equ	0xFDA
  1356                           fsr2l	equ	0xFD9
  1357                           status	equ	0xFD8
  1358                           
  1359 ;; *************** function _commands *****************
  1360 ;; Defined at:
  1361 ;;		line 119 in file "Hand.c"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;		None
  1364 ;; Auto vars:     Size  Location     Type
  1365 ;;		None
  1366 ;; Return value:  Size  Location     Type
  1367 ;;                  1    wreg      void 
  1368 ;; Registers used:
  1369 ;;		wreg, status,2, status,0, cstack
  1370 ;; Tracked objects:
  1371 ;;		On entry : 0/0
  1372 ;;		On exit  : 0/0
  1373 ;;		Unchanged: 0/0
  1374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1375 ;;      Params:         0       0       0       0       0       0       0       0       0
  1376 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1377 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1378 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1379 ;;Total ram usage:        0 bytes
  1380 ;; Hardware stack levels used:    1
  1381 ;; Hardware stack levels required when called:    1
  1382 ;; This function calls:
  1383 ;;		_setPos
  1384 ;; This function is called by:
  1385 ;;		_main
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           	psect	text10
  1390  007EBC                     __ptext10:
  1391                           	opt stack 0
  1392  007EBC                     _commands:
  1393                           	opt stack 29
  1394                           
  1395                           ;Hand.c: 125: if (PORTEbits.RE3 == 0 && !modeSelect) {
  1396                           
  1397                           ;incstack = 0
  1398  007EBC  B684               	btfsc	3972,3,c	;volatile
  1399  007EBE  D005               	goto	l1279
  1400  007EC0  500B               	movf	_modeSelect,w,c
  1401  007EC2  A4D8               	btfss	status,2,c
  1402  007EC4  D002               	goto	l1279
  1403                           
  1404                           ;Hand.c: 126: isPressedForGesture = 1;
  1405  007EC6  0E01               	movlw	1
  1406  007EC8  6E09               	movwf	_isPressedForGesture,c
  1407  007ECA                     l1279:
  1408                           
  1409                           ;Hand.c: 127: }
  1410                           ;Hand.c: 128: if (PORTEbits.RE3 == 1 && isPressedForGesture && !modeSelect) {
  1411  007ECA  A684               	btfss	3972,3,c	;volatile
  1412  007ECC  0012               	return	
  1413  007ECE  5009               	movf	_isPressedForGesture,w,c
  1414  007ED0  B4D8               	btfsc	status,2,c
  1415  007ED2  0012               	return	
  1416  007ED4  500B               	movf	_modeSelect,w,c
  1417  007ED6  A4D8               	btfss	status,2,c
  1418  007ED8  0012               	return	
  1419                           
  1420                           ;Hand.c: 129: isPressedForGesture = 0;
  1421  007EDA  0E00               	movlw	0
  1422  007EDC  6E09               	movwf	_isPressedForGesture,c
  1423                           
  1424                           ;Hand.c: 130: cGesture++;
  1425  007EDE  2A0C               	incf	_cGesture,f,c
  1426                           
  1427                           ;Hand.c: 131: if (cGesture == 9)cGesture = 0;
  1428  007EE0  0E09               	movlw	9
  1429  007EE2  180C               	xorwf	_cGesture,w,c
  1430  007EE4  A4D8               	btfss	status,2,c
  1431  007EE6  D06F               	goto	l1313
  1432  007EE8  0E00               	movlw	0
  1433  007EEA  6E0C               	movwf	_cGesture,c
  1434                           
  1435                           ;Hand.c: 132: switch (cGesture) {
  1436  007EEC  D06C               	goto	l1313
  1437  007EEE                     l1293:
  1438                           
  1439                           ;Hand.c: 134: setPos(0, 0, 0, 0, 0);
  1440  007EEE  0E00               	movlw	0
  1441  007EF0  6E11               	movwf	setPos@b,c
  1442  007EF2  0E00               	movlw	0
  1443  007EF4  6E12               	movwf	setPos@c,c
  1444  007EF6  0E00               	movlw	0
  1445  007EF8  6E13               	movwf	setPos@d,c
  1446  007EFA  0E00               	movlw	0
  1447  007EFC  6E14               	movwf	setPos@e,c
  1448  007EFE  0E00               	movlw	0
  1449  007F00  EC26  F03D         	call	_setPos
  1450                           
  1451                           ;Hand.c: 135: break;
  1452  007F04  0012               	return	
  1453  007F06                     l1295:
  1454                           
  1455                           ;Hand.c: 137: setPos(255, 255, 255, 255, 255);
  1456  007F06  0EFF               	movlw	255
  1457  007F08  6E11               	movwf	setPos@b,c
  1458  007F0A  0EFF               	movlw	255
  1459  007F0C  6E12               	movwf	setPos@c,c
  1460  007F0E  0EFF               	movlw	255
  1461  007F10  6E13               	movwf	setPos@d,c
  1462  007F12  0EFF               	movlw	255
  1463  007F14  6E14               	movwf	setPos@e,c
  1464  007F16  0EFF               	movlw	255
  1465  007F18  EC26  F03D         	call	_setPos
  1466                           
  1467                           ;Hand.c: 138: break;
  1468  007F1C  0012               	return	
  1469  007F1E                     l1297:
  1470                           
  1471                           ;Hand.c: 140: setPos(0, 0, 255, 255, 0);
  1472  007F1E  0E00               	movlw	0
  1473  007F20  6E11               	movwf	setPos@b,c
  1474  007F22  0EFF               	movlw	255
  1475  007F24  6E12               	movwf	setPos@c,c
  1476  007F26  0EFF               	movlw	255
  1477  007F28  6E13               	movwf	setPos@d,c
  1478  007F2A  0E00               	movlw	0
  1479  007F2C  6E14               	movwf	setPos@e,c
  1480  007F2E  0E00               	movlw	0
  1481  007F30  EC26  F03D         	call	_setPos
  1482                           
  1483                           ;Hand.c: 141: break;
  1484  007F34  0012               	return	
  1485  007F36                     l1299:
  1486                           
  1487                           ;Hand.c: 143: setPos(0, 255, 255, 255, 0);
  1488  007F36  0EFF               	movlw	255
  1489  007F38  6E11               	movwf	setPos@b,c
  1490  007F3A  0EFF               	movlw	255
  1491  007F3C  6E12               	movwf	setPos@c,c
  1492  007F3E  0EFF               	movlw	255
  1493  007F40  6E13               	movwf	setPos@d,c
  1494  007F42  0E00               	movlw	0
  1495  007F44  6E14               	movwf	setPos@e,c
  1496  007F46  0E00               	movlw	0
  1497  007F48  EC26  F03D         	call	_setPos
  1498                           
  1499                           ;Hand.c: 144: break;
  1500  007F4C  0012               	return	
  1501  007F4E                     l1301:
  1502                           
  1503                           ;Hand.c: 146: setPos(200, 0, 0, 255, 255);
  1504  007F4E  0E00               	movlw	0
  1505  007F50  6E11               	movwf	setPos@b,c
  1506  007F52  0E00               	movlw	0
  1507  007F54  6E12               	movwf	setPos@c,c
  1508  007F56  0EFF               	movlw	255
  1509  007F58  6E13               	movwf	setPos@d,c
  1510  007F5A  0EFF               	movlw	255
  1511  007F5C  6E14               	movwf	setPos@e,c
  1512  007F5E  0EC8               	movlw	200
  1513  007F60  EC26  F03D         	call	_setPos
  1514                           
  1515                           ;Hand.c: 147: break;
  1516  007F64  0012               	return	
  1517  007F66                     l1303:
  1518                           
  1519                           ;Hand.c: 149: setPos(200, 200, 0, 0, 0);
  1520  007F66  0EC8               	movlw	200
  1521  007F68  6E11               	movwf	setPos@b,c
  1522  007F6A  0E00               	movlw	0
  1523  007F6C  6E12               	movwf	setPos@c,c
  1524  007F6E  0E00               	movlw	0
  1525  007F70  6E13               	movwf	setPos@d,c
  1526  007F72  0E00               	movlw	0
  1527  007F74  6E14               	movwf	setPos@e,c
  1528  007F76  0EC8               	movlw	200
  1529  007F78  EC26  F03D         	call	_setPos
  1530                           
  1531                           ;Hand.c: 150: break;
  1532  007F7C  0012               	return	
  1533  007F7E                     l1305:
  1534                           
  1535                           ;Hand.c: 152: setPos(0, 255, 255, 255, 255);
  1536  007F7E  0EFF               	movlw	255
  1537  007F80  6E11               	movwf	setPos@b,c
  1538  007F82  0EFF               	movlw	255
  1539  007F84  6E12               	movwf	setPos@c,c
  1540  007F86  0EFF               	movlw	255
  1541  007F88  6E13               	movwf	setPos@d,c
  1542  007F8A  0EFF               	movlw	255
  1543  007F8C  6E14               	movwf	setPos@e,c
  1544  007F8E  0E00               	movlw	0
  1545  007F90  EC26  F03D         	call	_setPos
  1546                           
  1547                           ;Hand.c: 153: break;
  1548  007F94  0012               	return	
  1549  007F96                     l1307:
  1550                           
  1551                           ;Hand.c: 155: setPos(255, 0, 255, 255, 255);
  1552  007F96  0E00               	movlw	0
  1553  007F98  6E11               	movwf	setPos@b,c
  1554  007F9A  0EFF               	movlw	255
  1555  007F9C  6E12               	movwf	setPos@c,c
  1556  007F9E  0EFF               	movlw	255
  1557  007FA0  6E13               	movwf	setPos@d,c
  1558  007FA2  0EFF               	movlw	255
  1559  007FA4  6E14               	movwf	setPos@e,c
  1560  007FA6  0EFF               	movlw	255
  1561  007FA8  EC26  F03D         	call	_setPos
  1562                           
  1563                           ;Hand.c: 156: break;
  1564  007FAC  0012               	return	
  1565  007FAE                     l1309:
  1566                           
  1567                           ;Hand.c: 158: setPos(255, 0, 255, 255, 0);
  1568  007FAE  0E00               	movlw	0
  1569  007FB0  6E11               	movwf	setPos@b,c
  1570  007FB2  0EFF               	movlw	255
  1571  007FB4  6E12               	movwf	setPos@c,c
  1572  007FB6  0EFF               	movlw	255
  1573  007FB8  6E13               	movwf	setPos@d,c
  1574  007FBA  0E00               	movlw	0
  1575  007FBC  6E14               	movwf	setPos@e,c
  1576  007FBE  0EFF               	movlw	255
  1577  007FC0  EC26  F03D         	call	_setPos
  1578                           
  1579                           ;Hand.c: 162: }
  1580                           
  1581                           ;Hand.c: 161: break;
  1582                           
  1583                           ;Hand.c: 160: default:
  1584                           
  1585                           ;Hand.c: 159: break;
  1586  007FC4  0012               	return	
  1587  007FC6                     l1313:
  1588  007FC6  500C               	movf	_cGesture,w,c
  1589                           
  1590                           ; Switch size 1, requested type "space"
  1591                           ; Number of cases is 9, Range of values is 0 to 8
  1592                           ; switch strategies available:
  1593                           ; Name         Instructions Cycles
  1594                           ; simple_byte           28    15 (average)
  1595                           ;	Chosen strategy is simple_byte
  1596  007FC8  0A00               	xorlw	0	; case 0
  1597  007FCA  B4D8               	btfsc	status,2,c
  1598  007FCC  D790               	goto	l1293
  1599  007FCE  0A01               	xorlw	1	; case 1
  1600  007FD0  B4D8               	btfsc	status,2,c
  1601  007FD2  D799               	goto	l1295
  1602  007FD4  0A03               	xorlw	3	; case 2
  1603  007FD6  B4D8               	btfsc	status,2,c
  1604  007FD8  D7A2               	goto	l1297
  1605  007FDA  0A01               	xorlw	1	; case 3
  1606  007FDC  B4D8               	btfsc	status,2,c
  1607  007FDE  D7AB               	goto	l1299
  1608  007FE0  0A07               	xorlw	7	; case 4
  1609  007FE2  B4D8               	btfsc	status,2,c
  1610  007FE4  D7B4               	goto	l1301
  1611  007FE6  0A01               	xorlw	1	; case 5
  1612  007FE8  B4D8               	btfsc	status,2,c
  1613  007FEA  D7BD               	goto	l1303
  1614  007FEC  0A03               	xorlw	3	; case 6
  1615  007FEE  B4D8               	btfsc	status,2,c
  1616  007FF0  D7C6               	goto	l1305
  1617  007FF2  0A01               	xorlw	1	; case 7
  1618  007FF4  B4D8               	btfsc	status,2,c
  1619  007FF6  D7CF               	goto	l1307
  1620  007FF8  0A0F               	xorlw	15	; case 8
  1621  007FFA  A4D8               	btfss	status,2,c
  1622  007FFC  0012               	return	
  1623  007FFE  D7D7               	goto	l1309
  1624  008000                     __end_of_commands:
  1625                           	opt stack 0
  1626                           tblptru	equ	0xFF8
  1627                           prodh	equ	0xFF4
  1628                           prodl	equ	0xFF3
  1629                           postinc0	equ	0xFEE
  1630                           wreg	equ	0xFE8
  1631                           indf2	equ	0xFDF
  1632                           postinc2	equ	0xFDE
  1633                           fsr2h	equ	0xFDA
  1634                           fsr2l	equ	0xFD9
  1635                           status	equ	0xFD8
  1636                           
  1637 ;; *************** function _checkMode *****************
  1638 ;; Defined at:
  1639 ;;		line 185 in file "Hand.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;		None
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;  i               1   10[COMRAM] unsigned char 
  1644 ;;  i               1    9[COMRAM] unsigned char 
  1645 ;;  cTempMode       1   11[COMRAM] unsigned char 
  1646 ;; Return value:  Size  Location     Type
  1647 ;;                  1    wreg      unsigned char 
  1648 ;; Registers used:
  1649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1650 ;; Tracked objects:
  1651 ;;		On entry : 0/0
  1652 ;;		On exit  : 0/0
  1653 ;;		Unchanged: 0/0
  1654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1655 ;;      Params:         0       0       0       0       0       0       0       0       0
  1656 ;;      Locals:         7       0       0       0       0       0       0       0       0
  1657 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1658 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1659 ;;Total ram usage:        7 bytes
  1660 ;; Hardware stack levels used:    1
  1661 ;; Hardware stack levels required when called:    1
  1662 ;; This function calls:
  1663 ;;		_setPos
  1664 ;; This function is called by:
  1665 ;;		_main
  1666 ;; This function uses a non-reentrant model
  1667 ;;
  1668                           
  1669                           	psect	text11
  1670  007DB2                     __ptext11:
  1671                           	opt stack 0
  1672  007DB2                     _checkMode:
  1673                           	opt stack 29
  1674                           
  1675                           ;Hand.c: 186: unsigned char cTempMode = cMode;
  1676                           
  1677                           ;incstack = 0
  1678  007DB2  C010  F01C         	movff	_cMode,checkMode@cTempMode
  1679                           
  1680                           ;Hand.c: 187: if (PORTEbits.RE3 == 0) {
  1681  007DB6  B684               	btfsc	3972,3,c	;volatile
  1682  007DB8  D06A               	goto	l146
  1683                           
  1684                           ;Hand.c: 188: isPressedForMode = 1;
  1685  007DBA  0E01               	movlw	1
  1686  007DBC  6E0A               	movwf	_isPressedForMode,c
  1687                           
  1688                           ;Hand.c: 189: if (!modeSelect && buttonWasLetGo) {
  1689  007DBE  500B               	movf	_modeSelect,w,c
  1690  007DC0  A4D8               	btfss	status,2,c
  1691  007DC2  D02C               	goto	l1353
  1692  007DC4  5008               	movf	_buttonWasLetGo,w,c
  1693  007DC6  B4D8               	btfsc	status,2,c
  1694  007DC8  D029               	goto	l1353
  1695                           
  1696                           ;Hand.c: 190: cDelay++;
  1697  007DCA  2A0F               	incf	_cDelay,f,c
  1698                           
  1699                           ;Hand.c: 191: if (cDelay == 20) {
  1700  007DCC  0E14               	movlw	20
  1701  007DCE  180F               	xorwf	_cDelay,w,c
  1702  007DD0  A4D8               	btfss	status,2,c
  1703  007DD2  D05D               	goto	l146
  1704                           
  1705                           ;Hand.c: 192: cDelay = 0;
  1706  007DD4  0E00               	movlw	0
  1707  007DD6  6E0F               	movwf	_cDelay,c
  1708                           
  1709                           ;Hand.c: 193: modeSelect = 1;
  1710  007DD8  0E01               	movlw	1
  1711  007DDA  6E0B               	movwf	_modeSelect,c
  1712                           
  1713                           ;Hand.c: 194: buttonWasLetGo = 0;
  1714  007DDC  0E00               	movlw	0
  1715  007DDE  6E08               	movwf	_buttonWasLetGo,c
  1716                           
  1717                           ;Hand.c: 195: for (unsigned char i = 0; i < 5; i++) {
  1718  007DE0  0E00               	movlw	0
  1719  007DE2  6E1A               	movwf	checkMode@i,c
  1720  007DE4                     l1337:
  1721  007DE4  0E04               	movlw	4
  1722  007DE6  641A               	cpfsgt	checkMode@i,c
  1723  007DE8  D001               	goto	l1341
  1724  007DEA  D051               	goto	l146
  1725  007DEC                     l1341:
  1726                           
  1727                           ;Hand.c: 196: arcPos[i] = (cTempMode == i) ? 255 : 0;
  1728  007DEC  501A               	movf	checkMode@i,w,c
  1729  007DEE  181C               	xorwf	checkMode@cTempMode,w,c
  1730  007DF0  B4D8               	btfsc	status,2,c
  1731  007DF2  D005               	goto	l1345
  1732  007DF4  0E00               	movlw	0
  1733  007DF6  6E17               	movwf	_checkMode$157+1,c
  1734  007DF8  0E00               	movlw	0
  1735  007DFA  6E16               	movwf	_checkMode$157,c
  1736  007DFC  D003               	goto	l1347
  1737  007DFE                     l1345:
  1738  007DFE  0E00               	movlw	0
  1739  007E00  6E17               	movwf	_checkMode$157+1,c
  1740  007E02  6816               	setf	_checkMode$157,c
  1741  007E04                     l1347:
  1742  007E04  501A               	movf	checkMode@i,w,c
  1743  007E06  0D01               	mullw	1
  1744  007E08  0E01               	movlw	low _arcPos
  1745  007E0A  24F3               	addwf	prodl,w,c
  1746  007E0C  6ED9               	movwf	fsr2l,c
  1747  007E0E  0E00               	movlw	high _arcPos
  1748  007E10  20F4               	addwfc	prodh,w,c
  1749  007E12  6EDA               	movwf	fsr2h,c
  1750  007E14  C016  FFDF         	movff	_checkMode$157,indf2
  1751  007E18  2A1A               	incf	checkMode@i,f,c
  1752  007E1A  D7E4               	goto	l1337
  1753  007E1C                     l1353:
  1754  007E1C  5008               	movf	_buttonWasLetGo,w,c
  1755  007E1E  B4D8               	btfsc	status,2,c
  1756  007E20  D036               	goto	l146
  1757                           
  1758                           ;Hand.c: 200: cDelay++;
  1759  007E22  2A0F               	incf	_cDelay,f,c
  1760                           
  1761                           ;Hand.c: 201: if (cDelay == 20) {
  1762  007E24  0E14               	movlw	20
  1763  007E26  180F               	xorwf	_cDelay,w,c
  1764  007E28  A4D8               	btfss	status,2,c
  1765  007E2A  D013               	goto	l1365
  1766                           
  1767                           ;Hand.c: 202: cDelay = 0;
  1768  007E2C  0E00               	movlw	0
  1769  007E2E  6E0F               	movwf	_cDelay,c
  1770                           
  1771                           ;Hand.c: 203: modeSelect = 0;
  1772  007E30  0E00               	movlw	0
  1773  007E32  6E0B               	movwf	_modeSelect,c
  1774                           
  1775                           ;Hand.c: 204: buttonWasLetGo = 0;
  1776  007E34  0E00               	movlw	0
  1777  007E36  6E08               	movwf	_buttonWasLetGo,c
  1778                           
  1779                           ;Hand.c: 205: cTempMode--;
  1780  007E38  061C               	decf	checkMode@cTempMode,f,c
  1781                           
  1782                           ;Hand.c: 206: setPos(0, 0, 0, 0, 0);
  1783  007E3A  0E00               	movlw	0
  1784  007E3C  6E11               	movwf	setPos@b,c
  1785  007E3E  0E00               	movlw	0
  1786  007E40  6E12               	movwf	setPos@c,c
  1787  007E42  0E00               	movlw	0
  1788  007E44  6E13               	movwf	setPos@d,c
  1789  007E46  0E00               	movlw	0
  1790  007E48  6E14               	movwf	setPos@e,c
  1791  007E4A  0E00               	movlw	0
  1792  007E4C  EC26  F03D         	call	_setPos
  1793                           
  1794                           ;Hand.c: 207: } else {
  1795  007E50  D01E               	goto	l146
  1796  007E52                     l1365:
  1797                           
  1798                           ;Hand.c: 208: for (unsigned char i = 0; i < 5; i++) {
  1799  007E52  0E00               	movlw	0
  1800  007E54  6E1B               	movwf	checkMode@i_158,c
  1801  007E56                     l1367:
  1802  007E56  0E04               	movlw	4
  1803  007E58  641B               	cpfsgt	checkMode@i_158,c
  1804  007E5A  D001               	goto	l1371
  1805  007E5C  D018               	goto	l146
  1806  007E5E                     l1371:
  1807                           
  1808                           ;Hand.c: 209: arcPos[i] = (cTempMode == i) ? 255 : 0;
  1809  007E5E  501B               	movf	checkMode@i_158,w,c
  1810  007E60  181C               	xorwf	checkMode@cTempMode,w,c
  1811  007E62  B4D8               	btfsc	status,2,c
  1812  007E64  D005               	goto	l1375
  1813  007E66  0E00               	movlw	0
  1814  007E68  6E19               	movwf	_checkMode$159+1,c
  1815  007E6A  0E00               	movlw	0
  1816  007E6C  6E18               	movwf	_checkMode$159,c
  1817  007E6E  D003               	goto	l1377
  1818  007E70                     l1375:
  1819  007E70  0E00               	movlw	0
  1820  007E72  6E19               	movwf	_checkMode$159+1,c
  1821  007E74  6818               	setf	_checkMode$159,c
  1822  007E76                     l1377:
  1823  007E76  501B               	movf	checkMode@i_158,w,c
  1824  007E78  0D01               	mullw	1
  1825  007E7A  0E01               	movlw	low _arcPos
  1826  007E7C  24F3               	addwf	prodl,w,c
  1827  007E7E  6ED9               	movwf	fsr2l,c
  1828  007E80  0E00               	movlw	high _arcPos
  1829  007E82  20F4               	addwfc	prodh,w,c
  1830  007E84  6EDA               	movwf	fsr2h,c
  1831  007E86  C018  FFDF         	movff	_checkMode$159,indf2
  1832  007E8A  2A1B               	incf	checkMode@i_158,f,c
  1833  007E8C  D7E4               	goto	l1367
  1834  007E8E                     l146:
  1835                           
  1836                           ;Hand.c: 210: }
  1837                           ;Hand.c: 211: }
  1838                           ;Hand.c: 212: }
  1839                           ;Hand.c: 213: }
  1840                           ;Hand.c: 215: if (PORTEbits.RE3 == 1) {
  1841  007E8E  A684               	btfss	3972,3,c	;volatile
  1842  007E90  D013               	goto	l165
  1843                           
  1844                           ;Hand.c: 216: if (isPressedForMode && modeSelect) {
  1845  007E92  500A               	movf	_isPressedForMode,w,c
  1846  007E94  B4D8               	btfsc	status,2,c
  1847  007E96  D00A               	goto	l166
  1848  007E98  500B               	movf	_modeSelect,w,c
  1849  007E9A  B4D8               	btfsc	status,2,c
  1850  007E9C  D007               	goto	l166
  1851                           
  1852                           ;Hand.c: 217: cTempMode++;
  1853  007E9E  2A1C               	incf	checkMode@cTempMode,f,c
  1854                           
  1855                           ;Hand.c: 218: if (cTempMode == 5)cTempMode = 0;
  1856  007EA0  0E05               	movlw	5
  1857  007EA2  181C               	xorwf	checkMode@cTempMode,w,c
  1858  007EA4  A4D8               	btfss	status,2,c
  1859  007EA6  D002               	goto	l166
  1860  007EA8  0E00               	movlw	0
  1861  007EAA  6E1C               	movwf	checkMode@cTempMode,c
  1862  007EAC                     l166:
  1863                           
  1864                           ;Hand.c: 219: }
  1865                           ;Hand.c: 220: buttonWasLetGo = 1;
  1866  007EAC  0E01               	movlw	1
  1867  007EAE  6E08               	movwf	_buttonWasLetGo,c
  1868                           
  1869                           ;Hand.c: 221: cDelay = 0;
  1870  007EB0  0E00               	movlw	0
  1871  007EB2  6E0F               	movwf	_cDelay,c
  1872                           
  1873                           ;Hand.c: 222: isPressedForMode = 0;
  1874  007EB4  0E00               	movlw	0
  1875  007EB6  6E0A               	movwf	_isPressedForMode,c
  1876  007EB8                     l165:
  1877                           
  1878                           ;Hand.c: 223: }
  1879                           ;Hand.c: 224: return cTempMode;
  1880  007EB8  501C               	movf	checkMode@cTempMode,w,c
  1881  007EBA  0012               	return	
  1882  007EBC                     __end_of_checkMode:
  1883                           	opt stack 0
  1884                           tblptru	equ	0xFF8
  1885                           prodh	equ	0xFF4
  1886                           prodl	equ	0xFF3
  1887                           postinc0	equ	0xFEE
  1888                           wreg	equ	0xFE8
  1889                           indf2	equ	0xFDF
  1890                           postinc2	equ	0xFDE
  1891                           fsr2h	equ	0xFDA
  1892                           fsr2l	equ	0xFD9
  1893                           status	equ	0xFD8
  1894                           
  1895 ;; *************** function _setPos *****************
  1896 ;; Defined at:
  1897 ;;		line 43 in file "Hand.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;  a               1    wreg     unsigned char 
  1900 ;;  b               1    0[COMRAM] unsigned char 
  1901 ;;  c               1    1[COMRAM] unsigned char 
  1902 ;;  d               1    2[COMRAM] unsigned char 
  1903 ;;  e               1    3[COMRAM] unsigned char 
  1904 ;; Auto vars:     Size  Location     Type
  1905 ;;  a               1    4[COMRAM] unsigned char 
  1906 ;; Return value:  Size  Location     Type
  1907 ;;                  1    wreg      void 
  1908 ;; Registers used:
  1909 ;;		wreg
  1910 ;; Tracked objects:
  1911 ;;		On entry : 0/0
  1912 ;;		On exit  : 0/0
  1913 ;;		Unchanged: 0/0
  1914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1915 ;;      Params:         4       0       0       0       0       0       0       0       0
  1916 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1917 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1918 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1919 ;;Total ram usage:        5 bytes
  1920 ;; Hardware stack levels used:    1
  1921 ;; This function calls:
  1922 ;;		Nothing
  1923 ;; This function is called by:
  1924 ;;		_initVariables
  1925 ;;		_commands
  1926 ;;		_heyKidWantSomeCandy
  1927 ;;		_checkMode
  1928 ;; This function uses a non-reentrant model
  1929 ;;
  1930                           
  1931                           	psect	text12
  1932  007A4C                     __ptext12:
  1933                           	opt stack 0
  1934  007A4C                     _setPos:
  1935                           	opt stack 29
  1936                           
  1937                           ;incstack = 0
  1938                           ;setPos@a stored from wreg
  1939  007A4C  6E15               	movwf	setPos@a,c
  1940                           
  1941                           ;Hand.c: 44: arcPos[0] = a;
  1942  007A4E  C015  F001         	movff	setPos@a,_arcPos
  1943                           
  1944                           ;Hand.c: 45: arcPos[1] = b;
  1945  007A52  C011  F002         	movff	setPos@b,_arcPos+1
  1946                           
  1947                           ;Hand.c: 46: arcPos[2] = c;
  1948  007A56  C012  F003         	movff	setPos@c,_arcPos+2
  1949                           
  1950                           ;Hand.c: 47: arcPos[3] = d;
  1951  007A5A  C013  F004         	movff	setPos@d,_arcPos+3
  1952                           
  1953                           ;Hand.c: 48: arcPos[4] = e;
  1954  007A5E  C014  F005         	movff	setPos@e,_arcPos+4
  1955  007A62  0012               	return		;funcret
  1956  007A64                     __end_of_setPos:
  1957                           	opt stack 0
  1958  0000                     tblptru	equ	0xFF8
  1959                           prodh	equ	0xFF4
  1960                           prodl	equ	0xFF3
  1961                           postinc0	equ	0xFEE
  1962                           wreg	equ	0xFE8
  1963                           indf2	equ	0xFDF
  1964                           postinc2	equ	0xFDE
  1965                           fsr2h	equ	0xFDA
  1966                           fsr2l	equ	0xFD9
  1967                           status	equ	0xFD8
  1968                           tblptru	equ	0xFF8
  1969                           prodh	equ	0xFF4
  1970                           prodl	equ	0xFF3
  1971                           postinc0	equ	0xFEE
  1972                           wreg	equ	0xFE8
  1973                           indf2	equ	0xFDF
  1974                           postinc2	equ	0xFDE
  1975                           fsr2h	equ	0xFDA
  1976                           fsr2l	equ	0xFD9
  1977                           status	equ	0xFD8
  1978                           
  1979                           	psect	rparam
  1980  0000                     tblptru	equ	0xFF8
  1981                           prodh	equ	0xFF4
  1982                           prodl	equ	0xFF3
  1983                           postinc0	equ	0xFEE
  1984                           wreg	equ	0xFE8
  1985                           indf2	equ	0xFDF
  1986                           postinc2	equ	0xFDE
  1987                           fsr2h	equ	0xFDA
  1988                           fsr2l	equ	0xFD9
  1989                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     14      30
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_delay
    _initVariables->_setPos
    _heyKidWantSomeCandy->_setPos
    _delay->___awdiv
    _commands->_setPos
    _checkMode->_setPos

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   16203
                          _checkMode
                           _commands
                     _convertSensors
                              _delay
                _heyKidWantSomeCandy
                            _initANA
                            _initOsc
                          _initPorts
                      _initVariables
                        _pulseServos
 ---------------------------------------------------------------------------------
 (1) _pulseServos                                          6     6      0     150
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _initVariables                                        0     0      0    3758
                             _setPos
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initOsc                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initANA                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _heyKidWantSomeCandy                                  0     0      0    3758
                             _setPos
 ---------------------------------------------------------------------------------
 (1) _delay                                                6     6      0     498
                                              8 COMRAM     6     6      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _convertSensors                                       4     4      0     203
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _commands                                             0     0      0    3758
                             _setPos
 ---------------------------------------------------------------------------------
 (1) _checkMode                                            7     7      0    4078
                                              5 COMRAM     7     7      0
                             _setPos
 ---------------------------------------------------------------------------------
 (2) _setPos                                               5     1      4    3758
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _checkMode
     _setPos
   _commands
     _setPos
   _convertSensors
   _delay
     ___awdiv
   _heyKidWantSomeCandy
     _setPos
   _initANA
   _initOsc
   _initPorts
   _initVariables
     _setPos
   _pulseServos

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      E      1E       1       31.6%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1E       6        0.0%
DATA                 0      0      1E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon Jun 19 11:04:04 2017

                 _pulseServos 7CE8                            l45 7A30                            _GO 007E11  
                ___awdiv@sign 0016                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                           l117 7BE2  
                         l146 7E8E                           l180 7DAE                           l172 7D0E  
                         l165 7EB8                           l166 7EAC                           l174 7D36  
                         l176 7D5E                           l178 7D86                  __CFG_CPB$OFF 000000  
                __CFG_CPD$OFF 000000                           u977 7CF0                           u987 7D06  
                         u997 7D18                           prod 000FF3                           wreg 000FE8  
                __CFG_LVP$OFF 000000                          l1113 7D9E                          l1203 7C9E  
                        l1301 7F4E                          l1205 7CA6                          l1303 7F66  
                        l1223 7CDE                          l1215 7CC6                          l1207 7CAA  
                        l1071 7D26                          l1305 7F7E                          l1313 7FC6  
                        l1057 7CFE                          l1307 7F96                          l1219 7CD0  
                        l1323 7AA6                          l1341 7DEC                          l1309 7FAE  
                        l1085 7D4E                          l1413 7B3C                          l1421 7B4E  
                        l1263 7BAA                          l1255 7B96                          l1191 7C78  
                        l1415 7B42                          l1423 7B62                          l1345 7DFE  
                        l1337 7DE4                          l1353 7E1C                          l1417 7B48  
                        l1409 7B34                          l1371 7E5E                          l1347 7E04  
                        l1259 7BA2                          l1099 7D76                          l1365 7E52  
                        l1293 7EEE                          l1269 7BDE                          l1197 7C88  
                        l1375 7E70                          l1367 7E56                          l1295 7F06  
                        l1279 7ECA                          l1377 7E76                          l1297 7F1E  
                        l1299 7F36                          l1399 7C4E                          _ADON 007E10  
                        u1007 7D2E                          u1017 7D40                          u1027 7D56  
                        u1037 7D68                          u1047 7D7E                          u1057 7D90  
                        u1067 7DA6                          u1077 7C58                          _LATA 000F89  
                        _LATB 000F8A                          _LATC 000F8B                          _main 7B24  
                        indf2 000FDF                          fsr2l 000FD9                 __CFG_BORV$190 000000  
                        prodl 000FF3                          start 2000                 __CFG_IESO$OFF 000000  
                ___param_bank 000000                         ?_main 0011               __end_of___awdiv 7CE8  
                       _T0CON 000FD5               ___awdiv@divisor 0013               ___awdiv@counter 0015  
                       _PORTA 000F80                         _PORTB 000F81                         _PORTC 000F82  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISC 000F94  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
                       _cMode 0010                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000               __end_of_initANA 7A80                __CFG_EBTRB$OFF 000000  
                       _delay 7BE8               __end_of_initOsc 7A36                         status 000FD8  
              __CFG_T3CMX$RC0 000000                __CFG_MCLRE$OFF 000000               __initialization 7A36  
                __end_of_main 7B72                        ??_main 001F  __size_of_heyKidWantSomeCandy 0030  
               __activetblptr 000002                _convertSensors 7B72        __size_of_initVariables 0038  
              __CFG_SDOMX$RB3 000000               __CFG_CCP2MX$RC1 000000                        ?_delay 0011  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        _ADCON2 000FC0  
                      _ACTCON 000FB5                        _ADRESH 000FC4              ___awdiv@dividend 0011  
                pulseServos@i 0012                        _ANSELA 000F5B                        _ANSELB 000F5C  
                      _ANSELC 000F5D                        _OSCCON 000FD3                        _PLLRDY 007E97  
              __CFG_XINST$OFF 000000                        _cDelay 000F              __end_of_commands 8000  
                      _nDelay 0006                     ??___awdiv 0015                __CFG_STVREN$ON 000000  
                      _arcPos 0001                        delay@i 001D                        clear_0 7A3C  
            ___awdiv@quotient 0017        __end_of_convertSensors 7BE8                        _setPos 7A4C  
                   ??_initANA 0011                     ??_initOsc 0011                        tblptru 000FF8  
        __CFG_LS48MHZ$SYS48X8 000000                    __accesstop 0060       __end_of__initialization 7A42  
             __CFG_PBADEN$OFF 000000                 _initVariables 7AB0                 ___rparam_used 000001  
              __pcstackCOMRAM 0011              __CFG_nPWRTEN$OFF 000000            __size_of_checkMode 010A  
               __end_of_delay 7C64                  ?_pulseServos 0011               ?_convertSensors 0011  
         _isPressedForGesture 0009               __CFG_PCLKEN$OFF 000000                __CFG_nLPBOR$ON 000000  
                     ??_delay 0019                ?_initVariables 0011            __size_of_initPorts 003C  
           __CFG_PLLSEL$PLL3X 000000               _cCycleIncrement 000D                       ?_setPos 0011  
             __CFG_WDTEN$SWON 000000                       _OSCCON2 000FD2                       _OSCTUNE 000F9B  
           __end_of_checkMode 7EBC                     ?_commands 0011           _heyKidWantSomeCandy 7A80  
                     __Hparam 0000                       __Lparam 0000                    checkMode@i 001A  
                     ___awdiv 7C64                       __pcinit 7A36                       __ramtop 0800  
                  _modeSelect 000B               __size_of_setPos 0018                       __ptext0 7B24  
                     __ptext1 7CE8                       __ptext2 7AB0                       __ptext3 7AE8  
                     __ptext4 7A20                       __ptext5 7A64                       __ptext6 7A80  
                     __ptext7 7BE8                       __ptext8 7C64                       __ptext9 7B72  
              checkMode@i_158 001B          ?_heyKidWantSomeCandy 0011                       _initANA 7A64  
           __end_of_initPorts 7B24                       _initOsc 7A20                    ??_commands 0016  
        end_of_initialization 7A42               ??_initVariables 0016                 __Lmediumconst 0000  
                     setPos@a 0015                       setPos@b 0011                       setPos@c 0012  
                     setPos@d 0013                       setPos@e 0014                 _checkMode$157 0016  
               _checkMode$159 0018                       postinc0 000FEE                       postinc2 000FDE  
       ??_heyKidWantSomeCandy 0016          __size_of_pulseServos 00CA                     _PORTEbits 000F84  
          _convertSensors$148 0012              ??_convertSensors 0011                __end_of_setPos 7A64  
         start_initialization 7A36                _buttonWasLetGo 0008                      ??_setPos 0015  
                 __pbssCOMRAM 0001             _cCountFingerCycle 000E            convertSensors@cMax 0013  
           __size_of_commands 0144                     _checkMode 7DB2              _isPressedForMode 000A  
                    ?___awdiv 0011                      ?_initANA 0011                      ?_initOsc 0011  
                   _initPorts 7AE8                __size_of_delay 007C               convertSensors@i 0014  
                    _LATBbits 000F8A                    ?_checkMode 0011              __CFG_WDTPS$32768 000000  
           __CFG_CFGPLLEN$OFF 000000                    ?_initPorts 0011            checkMode@cTempMode 001C  
       __end_of_initVariables 7AE8                      __Hrparam 0000              pulseServos@i_170 0013  
            pulseServos@i_171 0014              pulseServos@i_172 0015              pulseServos@i_173 0016  
                    __Lrparam 0000                      _cGesture 000C            __CFG_BOREN$SBORDIS 000000  
 __end_of_heyKidWantSomeCandy 7AB0                 ??_pulseServos 0011              __size_of___awdiv 0084  
            __size_of_initANA 001C              __size_of_initOsc 0016                      __ptext10 7EBC  
                    __ptext11 7DB2                      __ptext12 7A4C                      _commands 7EBC  
               __size_of_main 004E                   ??_checkMode 0016           __end_of_pulseServos 7DB2  
                 ??_initPorts 0011          __CFG_CPUDIV$NOCLKDIV 000000       __size_of_convertSensors 0076  
          __CFG_FOSC$INTOSCIO 000000  
