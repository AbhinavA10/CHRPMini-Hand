

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat Jun 17 01:19:40 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20  0000                     
    21                           ; Version 1.41
    22                           ; Generated 25/01/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F25K50 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     _ANSELC	set	3933
    56  0000                     _ANSELB	set	3932
    57  0000                     _ANSELA	set	3931
    58  0000                     _LATBbits	set	3978
    59  0000                     _PORTEbits	set	3972
    60  0000                     _ADRESH	set	4036
    61  0000                     _ADCON2	set	4032
    62  0000                     _ADCON1	set	4033
    63  0000                     _ADCON0	set	4034
    64  0000                     _PORTC	set	3970
    65  0000                     _PORTB	set	3969
    66  0000                     _PORTA	set	3968
    67  0000                     _T0CON	set	4053
    68  0000                     _TRISC	set	3988
    69  0000                     _LATC	set	3979
    70  0000                     _TRISB	set	3987
    71  0000                     _LATB	set	3978
    72  0000                     _TRISA	set	3986
    73  0000                     _LATA	set	3977
    74  0000                     _ACTCON	set	4021
    75  0000                     _OSCCON2	set	4050
    76  0000                     _OSCCON	set	4051
    77  0000                     _OSCTUNE	set	3995
    78  0000                     _GO	set	32273
    79  0000                     _ADON	set	32272
    80  0000                     _PLLRDY	set	32407
    81                           
    82                           ; #config settings
    83  0000                     
    84                           	psect	cinit
    85  007AFA                     __pcinit:
    86                           	opt stack 0
    87  007AFA                     start_initialization:
    88                           	opt stack 0
    89  007AFA                     __initialization:
    90                           	opt stack 0
    91                           
    92                           ; Clear objects allocated to COMRAM (14 bytes)
    93  007AFA  EE00  F001         	lfsr	0,__pbssCOMRAM
    94  007AFE  0E0E               	movlw	14
    95  007B00                     clear_0:
    96  007B00  6AEE               	clrf	postinc0,c
    97  007B02  06E8               	decf	wreg,f,c
    98  007B04  E1FD               	bnz	clear_0
    99  007B06                     end_of_initialization:
   100                           	opt stack 0
   101  007B06                     __end_of__initialization:
   102                           	opt stack 0
   103  007B06  0E00               	movlw	low (__Lmediumconst shr (0+16))
   104  007B08  6EF8               	movwf	tblptru,c
   105  007B0A  0100               	movlb	0
   106  007B0C  EF46  F03F         	goto	_main	;jump to C main() function
   107                           tblptru	equ	0xFF8
   108                           postinc0	equ	0xFEE
   109                           wreg	equ	0xFE8
   110                           
   111                           	psect	bssCOMRAM
   112  000001                     __pbssCOMRAM:
   113                           	opt stack 0
   114  000001                     _arcPos:
   115                           	opt stack 0
   116  000001                     	ds	5
   117  000006                     _nDelay:
   118                           	opt stack 0
   119  000006                     	ds	2
   120  000008                     _isPressedForGesture:
   121                           	opt stack 0
   122  000008                     	ds	1
   123  000009                     _cGesture:
   124                           	opt stack 0
   125  000009                     	ds	1
   126  00000A                     _buttonWasLetGo:
   127                           	opt stack 0
   128  00000A                     	ds	1
   129  00000B                     _isPressedForMode:
   130                           	opt stack 0
   131  00000B                     	ds	1
   132  00000C                     _modeSelect:
   133                           	opt stack 0
   134  00000C                     	ds	1
   135  00000D                     _cDelay:
   136                           	opt stack 0
   137  00000D                     	ds	1
   138  00000E                     _cMode:
   139                           	opt stack 0
   140  00000E                     	ds	1
   141                           tblptru	equ	0xFF8
   142                           postinc0	equ	0xFEE
   143                           wreg	equ	0xFE8
   144                           
   145                           	psect	cstackCOMRAM
   146  00000F                     __pcstackCOMRAM:
   147                           	opt stack 0
   148  00000F                     ??_pulseServos:
   149  00000F                     ?___awdiv:
   150                           	opt stack 0
   151  00000F                     setPos@b:
   152                           	opt stack 0
   153  00000F                     _checkMode$149:
   154                           	opt stack 0
   155  00000F                     ___awdiv@dividend:
   156                           	opt stack 0
   157                           
   158                           ; 2 bytes @ 0x0
   159  00000F                     	ds	1
   160  000010                     setPos@c:
   161                           	opt stack 0
   162  000010                     pulseServos@i:
   163                           	opt stack 0
   164                           
   165                           ; 1 bytes @ 0x1
   166  000010                     	ds	1
   167  000011                     setPos@d:
   168                           	opt stack 0
   169  000011                     pulseServos@i_163:
   170                           	opt stack 0
   171  000011                     _checkMode$152:
   172                           	opt stack 0
   173  000011                     ___awdiv@divisor:
   174                           	opt stack 0
   175                           
   176                           ; 2 bytes @ 0x2
   177  000011                     	ds	1
   178  000012                     setPos@e:
   179                           	opt stack 0
   180  000012                     pulseServos@i_164:
   181                           	opt stack 0
   182                           
   183                           ; 1 bytes @ 0x3
   184  000012                     	ds	1
   185  000013                     setPos@a:
   186                           	opt stack 0
   187  000013                     checkMode@i_150:
   188                           	opt stack 0
   189  000013                     pulseServos@i_165:
   190                           	opt stack 0
   191  000013                     ___awdiv@counter:
   192                           	opt stack 0
   193                           
   194                           ; 1 bytes @ 0x4
   195  000013                     	ds	1
   196  000014                     checkMode@i:
   197                           	opt stack 0
   198  000014                     pulseServos@i_166:
   199                           	opt stack 0
   200  000014                     ___awdiv@sign:
   201                           	opt stack 0
   202                           
   203                           ; 1 bytes @ 0x5
   204  000014                     	ds	1
   205  000015                     checkMode@i_151:
   206                           	opt stack 0
   207  000015                     ___awdiv@quotient:
   208                           	opt stack 0
   209                           
   210                           ; 2 bytes @ 0x6
   211  000015                     	ds	1
   212  000016                     checkMode@cTempMode:
   213                           	opt stack 0
   214                           
   215                           ; 1 bytes @ 0x7
   216  000016                     	ds	1
   217  000017                     ??_delay:
   218                           
   219                           ; 1 bytes @ 0x8
   220  000017                     	ds	4
   221  00001B                     delay@i:
   222                           	opt stack 0
   223                           
   224                           ; 2 bytes @ 0xC
   225  00001B                     	ds	2
   226  00001D                     tblptru	equ	0xFF8
   227                           postinc0	equ	0xFEE
   228                           wreg	equ	0xFE8
   229                           
   230                           ; 1 bytes @ 0xE
   231 ;;
   232 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   233 ;;
   234 ;; *************** function _main *****************
   235 ;; Defined at:
   236 ;;		line 227 in file "Hand.c"
   237 ;; Parameters:    Size  Location     Type
   238 ;;		None
   239 ;; Auto vars:     Size  Location     Type
   240 ;;		None
   241 ;; Return value:  Size  Location     Type
   242 ;;                  2  156[None  ] int 
   243 ;; Registers used:
   244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   245 ;; Tracked objects:
   246 ;;		On entry : 0/0
   247 ;;		On exit  : 0/0
   248 ;;		Unchanged: 0/0
   249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   250 ;;      Params:         0       0       0       0       0       0       0       0       0
   251 ;;      Locals:         0       0       0       0       0       0       0       0       0
   252 ;;      Temps:          0       0       0       0       0       0       0       0       0
   253 ;;      Totals:         0       0       0       0       0       0       0       0       0
   254 ;;Total ram usage:        0 bytes
   255 ;; Hardware stack levels required when called:    2
   256 ;; This function calls:
   257 ;;		_checkMode
   258 ;;		_delay
   259 ;;		_initANA
   260 ;;		_initOsc
   261 ;;		_initPorts
   262 ;;		_initVariables
   263 ;;		_pulseServos
   264 ;;		_setPos
   265 ;; This function is called by:
   266 ;;		Startup code after reset
   267 ;; This function uses a non-reentrant model
   268 ;;
   269                           
   270                           	psect	text0
   271  007E8C                     __ptext0:
   272                           	opt stack 0
   273  007E8C                     _main:
   274                           	opt stack 29
   275                           
   276                           ;Hand.c: 228: initOsc();
   277                           
   278                           ;incstack = 0
   279  007E8C  EC72  F03D         	call	_initOsc	;wreg free
   280                           
   281                           ;Hand.c: 229: initPorts();
   282  007E90  ECB8  F03D         	call	_initPorts	;wreg free
   283                           
   284                           ;Hand.c: 230: initANA();
   285  007E94  EC94  F03D         	call	_initANA	;wreg free
   286                           
   287                           ;Hand.c: 231: initVariables();
   288  007E98  ECA2  F03D         	call	_initVariables	;wreg free
   289                           
   290                           ;Hand.c: 233: switch (cMode) {
   291                           
   292                           ;Hand.c: 232: while (1) {
   293  007E9C  D0A2               	goto	l1286
   294  007E9E                     l161:
   295                           
   296                           ;Hand.c: 243: if (PORTEbits.RE3 == 0 && !modeSelect) {
   297  007E9E  B684               	btfsc	3972,3,c	;volatile
   298  007EA0  D005               	goto	l1248
   299  007EA2  500C               	movf	_modeSelect,w,c
   300  007EA4  A4D8               	btfss	status,2,c
   301  007EA6  D002               	goto	l1248
   302                           
   303                           ;Hand.c: 244: isPressedForGesture = 1;
   304  007EA8  0E01               	movlw	1
   305  007EAA  6E08               	movwf	_isPressedForGesture,c
   306  007EAC                     l1248:
   307                           
   308                           ;Hand.c: 245: }
   309                           ;Hand.c: 246: if (PORTEbits.RE3 == 1 && isPressedForGesture&&!modeSelect) {
   310  007EAC  A684               	btfss	3972,3,c	;volatile
   311  007EAE  D0A0               	goto	l1288
   312  007EB0  5008               	movf	_isPressedForGesture,w,c
   313  007EB2  B4D8               	btfsc	status,2,c
   314  007EB4  D09D               	goto	l1288
   315  007EB6  500C               	movf	_modeSelect,w,c
   316  007EB8  A4D8               	btfss	status,2,c
   317  007EBA  D09A               	goto	l1288
   318                           
   319                           ;Hand.c: 247: isPressedForGesture = 0;
   320  007EBC  0E00               	movlw	0
   321  007EBE  6E08               	movwf	_isPressedForGesture,c
   322                           
   323                           ;Hand.c: 248: cGesture++;
   324  007EC0  2A09               	incf	_cGesture,f,c
   325                           
   326                           ;Hand.c: 249: if (cGesture == 9)cGesture = 0;
   327  007EC2  0E09               	movlw	9
   328  007EC4  1809               	xorwf	_cGesture,w,c
   329  007EC6  A4D8               	btfss	status,2,c
   330  007EC8  D06F               	goto	l1282
   331  007ECA  0E00               	movlw	0
   332  007ECC  6E09               	movwf	_cGesture,c
   333                           
   334                           ;Hand.c: 250: switch (cGesture) {
   335  007ECE  D06C               	goto	l1282
   336  007ED0                     l1262:
   337                           
   338                           ;Hand.c: 252: setPos(0, 0, 0, 0, 0);
   339  007ED0  0E00               	movlw	0
   340  007ED2  6E0F               	movwf	setPos@b,c
   341  007ED4  0E00               	movlw	0
   342  007ED6  6E10               	movwf	setPos@c,c
   343  007ED8  0E00               	movlw	0
   344  007EDA  6E11               	movwf	setPos@d,c
   345  007EDC  0E00               	movlw	0
   346  007EDE  6E12               	movwf	setPos@e,c
   347  007EE0  0E00               	movlw	0
   348  007EE2  EC88  F03D         	call	_setPos
   349                           
   350                           ;Hand.c: 253: break;
   351  007EE6  D084               	goto	l1288
   352  007EE8                     l1264:
   353                           
   354                           ;Hand.c: 255: setPos(255, 255, 255, 255, 255);
   355  007EE8  0EFF               	movlw	255
   356  007EEA  6E0F               	movwf	setPos@b,c
   357  007EEC  0EFF               	movlw	255
   358  007EEE  6E10               	movwf	setPos@c,c
   359  007EF0  0EFF               	movlw	255
   360  007EF2  6E11               	movwf	setPos@d,c
   361  007EF4  0EFF               	movlw	255
   362  007EF6  6E12               	movwf	setPos@e,c
   363  007EF8  0EFF               	movlw	255
   364  007EFA  EC88  F03D         	call	_setPos
   365                           
   366                           ;Hand.c: 256: break;
   367  007EFE  D078               	goto	l1288
   368  007F00                     l1266:
   369                           
   370                           ;Hand.c: 258: setPos(0, 0, 255, 255, 0);
   371  007F00  0E00               	movlw	0
   372  007F02  6E0F               	movwf	setPos@b,c
   373  007F04  0EFF               	movlw	255
   374  007F06  6E10               	movwf	setPos@c,c
   375  007F08  0EFF               	movlw	255
   376  007F0A  6E11               	movwf	setPos@d,c
   377  007F0C  0E00               	movlw	0
   378  007F0E  6E12               	movwf	setPos@e,c
   379  007F10  0E00               	movlw	0
   380  007F12  EC88  F03D         	call	_setPos
   381                           
   382                           ;Hand.c: 259: break;
   383  007F16  D06C               	goto	l1288
   384  007F18                     l1268:
   385                           
   386                           ;Hand.c: 261: setPos(0, 255, 255, 255, 0);
   387  007F18  0EFF               	movlw	255
   388  007F1A  6E0F               	movwf	setPos@b,c
   389  007F1C  0EFF               	movlw	255
   390  007F1E  6E10               	movwf	setPos@c,c
   391  007F20  0EFF               	movlw	255
   392  007F22  6E11               	movwf	setPos@d,c
   393  007F24  0E00               	movlw	0
   394  007F26  6E12               	movwf	setPos@e,c
   395  007F28  0E00               	movlw	0
   396  007F2A  EC88  F03D         	call	_setPos
   397                           
   398                           ;Hand.c: 262: break;
   399  007F2E  D060               	goto	l1288
   400  007F30                     l1270:
   401                           
   402                           ;Hand.c: 264: setPos(200, 0, 0, 255, 255);
   403  007F30  0E00               	movlw	0
   404  007F32  6E0F               	movwf	setPos@b,c
   405  007F34  0E00               	movlw	0
   406  007F36  6E10               	movwf	setPos@c,c
   407  007F38  0EFF               	movlw	255
   408  007F3A  6E11               	movwf	setPos@d,c
   409  007F3C  0EFF               	movlw	255
   410  007F3E  6E12               	movwf	setPos@e,c
   411  007F40  0EC8               	movlw	200
   412  007F42  EC88  F03D         	call	_setPos
   413                           
   414                           ;Hand.c: 265: break;
   415  007F46  D054               	goto	l1288
   416  007F48                     l1272:
   417                           
   418                           ;Hand.c: 267: setPos(200, 200, 0, 0, 0);
   419  007F48  0EC8               	movlw	200
   420  007F4A  6E0F               	movwf	setPos@b,c
   421  007F4C  0E00               	movlw	0
   422  007F4E  6E10               	movwf	setPos@c,c
   423  007F50  0E00               	movlw	0
   424  007F52  6E11               	movwf	setPos@d,c
   425  007F54  0E00               	movlw	0
   426  007F56  6E12               	movwf	setPos@e,c
   427  007F58  0EC8               	movlw	200
   428  007F5A  EC88  F03D         	call	_setPos
   429                           
   430                           ;Hand.c: 268: break;
   431  007F5E  D048               	goto	l1288
   432  007F60                     l1274:
   433                           
   434                           ;Hand.c: 270: setPos(0, 255, 255, 255, 255);
   435  007F60  0EFF               	movlw	255
   436  007F62  6E0F               	movwf	setPos@b,c
   437  007F64  0EFF               	movlw	255
   438  007F66  6E10               	movwf	setPos@c,c
   439  007F68  0EFF               	movlw	255
   440  007F6A  6E11               	movwf	setPos@d,c
   441  007F6C  0EFF               	movlw	255
   442  007F6E  6E12               	movwf	setPos@e,c
   443  007F70  0E00               	movlw	0
   444  007F72  EC88  F03D         	call	_setPos
   445                           
   446                           ;Hand.c: 271: break;
   447  007F76  D03C               	goto	l1288
   448  007F78                     l1276:
   449                           
   450                           ;Hand.c: 273: setPos(255, 0, 255, 255, 255);
   451  007F78  0E00               	movlw	0
   452  007F7A  6E0F               	movwf	setPos@b,c
   453  007F7C  0EFF               	movlw	255
   454  007F7E  6E10               	movwf	setPos@c,c
   455  007F80  0EFF               	movlw	255
   456  007F82  6E11               	movwf	setPos@d,c
   457  007F84  0EFF               	movlw	255
   458  007F86  6E12               	movwf	setPos@e,c
   459  007F88  0EFF               	movlw	255
   460  007F8A  EC88  F03D         	call	_setPos
   461                           
   462                           ;Hand.c: 274: break;
   463  007F8E  D030               	goto	l1288
   464  007F90                     l1278:
   465                           
   466                           ;Hand.c: 276: setPos(255, 0, 255, 255, 0);
   467  007F90  0E00               	movlw	0
   468  007F92  6E0F               	movwf	setPos@b,c
   469  007F94  0EFF               	movlw	255
   470  007F96  6E10               	movwf	setPos@c,c
   471  007F98  0EFF               	movlw	255
   472  007F9A  6E11               	movwf	setPos@d,c
   473  007F9C  0E00               	movlw	0
   474  007F9E  6E12               	movwf	setPos@e,c
   475  007FA0  0EFF               	movlw	255
   476  007FA2  EC88  F03D         	call	_setPos
   477                           
   478                           ;Hand.c: 280: }
   479                           
   480                           ;Hand.c: 279: break;
   481                           
   482                           ;Hand.c: 278: default:
   483                           
   484                           ;Hand.c: 277: break;
   485  007FA6  D024               	goto	l1288
   486  007FA8                     l1282:
   487  007FA8  5009               	movf	_cGesture,w,c
   488                           
   489                           ; Switch size 1, requested type "space"
   490                           ; Number of cases is 9, Range of values is 0 to 8
   491                           ; switch strategies available:
   492                           ; Name         Instructions Cycles
   493                           ; simple_byte           28    15 (average)
   494                           ;	Chosen strategy is simple_byte
   495  007FAA  0A00               	xorlw	0	; case 0
   496  007FAC  B4D8               	btfsc	status,2,c
   497  007FAE  D790               	goto	l1262
   498  007FB0  0A01               	xorlw	1	; case 1
   499  007FB2  B4D8               	btfsc	status,2,c
   500  007FB4  D799               	goto	l1264
   501  007FB6  0A03               	xorlw	3	; case 2
   502  007FB8  B4D8               	btfsc	status,2,c
   503  007FBA  D7A2               	goto	l1266
   504  007FBC  0A01               	xorlw	1	; case 3
   505  007FBE  B4D8               	btfsc	status,2,c
   506  007FC0  D7AB               	goto	l1268
   507  007FC2  0A07               	xorlw	7	; case 4
   508  007FC4  B4D8               	btfsc	status,2,c
   509  007FC6  D7B4               	goto	l1270
   510  007FC8  0A01               	xorlw	1	; case 5
   511  007FCA  B4D8               	btfsc	status,2,c
   512  007FCC  D7BD               	goto	l1272
   513  007FCE  0A03               	xorlw	3	; case 6
   514  007FD0  B4D8               	btfsc	status,2,c
   515  007FD2  D7C6               	goto	l1274
   516  007FD4  0A01               	xorlw	1	; case 7
   517  007FD6  B4D8               	btfsc	status,2,c
   518  007FD8  D7CF               	goto	l1276
   519  007FDA  0A0F               	xorlw	15	; case 8
   520  007FDC  B4D8               	btfsc	status,2,c
   521  007FDE  D7D8               	goto	l1278
   522                           
   523                           ;Hand.c: 285: }
   524                           
   525                           ;Hand.c: 284: break;
   526                           
   527                           ;Hand.c: 283: default:
   528                           
   529                           ;Hand.c: 281: }
   530                           ;Hand.c: 282: break;
   531  007FE0  D007               	goto	l1288
   532  007FE2                     l1286:
   533  007FE2  500E               	movf	_cMode,w,c
   534                           
   535                           ; Switch size 1, requested type "space"
   536                           ; Number of cases is 2, Range of values is 0 to 1
   537                           ; switch strategies available:
   538                           ; Name         Instructions Cycles
   539                           ; simple_byte            7     4 (average)
   540                           ;	Chosen strategy is simple_byte
   541  007FE4  0A00               	xorlw	0	; case 0
   542  007FE6  B4D8               	btfsc	status,2,c
   543  007FE8  D003               	goto	l1288
   544  007FEA  0A01               	xorlw	1	; case 1
   545  007FEC  B4D8               	btfsc	status,2,c
   546  007FEE  D757               	goto	l161
   547  007FF0                     l1288:
   548                           
   549                           ;Hand.c: 286: pulseServos();
   550  007FF0  EC56  F03E         	call	_pulseServos	;wreg free
   551                           
   552                           ;Hand.c: 287: delay();
   553  007FF4  ECD6  F03D         	call	_delay	;wreg free
   554                           
   555                           ;Hand.c: 288: cMode = checkMode();
   556  007FF8  ECBB  F03E         	call	_checkMode	;wreg free
   557  007FFC  6E0E               	movwf	_cMode,c
   558  007FFE  D7F1               	goto	l1286
   559  008000                     __end_of_main:
   560                           	opt stack 0
   561                           tblptru	equ	0xFF8
   562                           postinc0	equ	0xFEE
   563                           wreg	equ	0xFE8
   564                           status	equ	0xFD8
   565                           
   566 ;; *************** function _pulseServos *****************
   567 ;; Defined at:
   568 ;;		line 157 in file "Hand.c"
   569 ;; Parameters:    Size  Location     Type
   570 ;;		None
   571 ;; Auto vars:     Size  Location     Type
   572 ;;  i               1    5[COMRAM] unsigned char 
   573 ;;  i               1    4[COMRAM] unsigned char 
   574 ;;  i               1    3[COMRAM] unsigned char 
   575 ;;  i               1    2[COMRAM] unsigned char 
   576 ;;  i               1    1[COMRAM] unsigned char 
   577 ;; Return value:  Size  Location     Type
   578 ;;                  1    wreg      void 
   579 ;; Registers used:
   580 ;;		wreg, status,2, status,0
   581 ;; Tracked objects:
   582 ;;		On entry : 0/0
   583 ;;		On exit  : 0/0
   584 ;;		Unchanged: 0/0
   585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   586 ;;      Params:         0       0       0       0       0       0       0       0       0
   587 ;;      Locals:         5       0       0       0       0       0       0       0       0
   588 ;;      Temps:          1       0       0       0       0       0       0       0       0
   589 ;;      Totals:         6       0       0       0       0       0       0       0       0
   590 ;;Total ram usage:        6 bytes
   591 ;; Hardware stack levels used:    1
   592 ;; This function calls:
   593 ;;		Nothing
   594 ;; This function is called by:
   595 ;;		_main
   596 ;; This function uses a non-reentrant model
   597 ;;
   598                           
   599                           	psect	text1
   600  007CAC                     __ptext1:
   601                           	opt stack 0
   602  007CAC                     _pulseServos:
   603                           	opt stack 30
   604                           
   605                           ;Hand.c: 165: LATBbits.LATB7 = 1;
   606                           
   607                           ;incstack = 0
   608  007CAC  8E8A               	bsf	3978,7,c	;volatile
   609                           
   610                           ;Hand.c: 166: _delay((unsigned long)((540)*(48000000/4000000.0)));
   611  007CAE  0E09               	movlw	9
   612  007CB0  6E0F               	movwf	??_pulseServos& (0+255),c
   613  007CB2  0E69               	movlw	105
   614  007CB4                     u777:
   615  007CB4  2EE8               	decfsz	wreg,f,c
   616  007CB6  D7FE               	bra	u777
   617  007CB8  2E0F               	decfsz	??_pulseServos& (0+255),f,c
   618  007CBA  D7FC               	bra	u777
   619  007CBC  F000               	nop	
   620                           
   621                           ;Hand.c: 167: for (unsigned char i = arcPos[0]; i != 0; i--) {
   622  007CBE  C001  F010         	movff	_arcPos,pulseServos@i
   623  007CC2                     l954:
   624  007CC2  5010               	movf	pulseServos@i,w,c
   625  007CC4  B4D8               	btfsc	status,2,c
   626  007CC6  D005               	goto	l136
   627                           
   628                           ;Hand.c: 168: _delay((unsigned long)((6)*(48000000/4000000.0)));
   629  007CC8  0E18               	movlw	24
   630  007CCA                     u787:
   631  007CCA  2EE8               	decfsz	wreg,f,c
   632  007CCC  D7FE               	bra	u787
   633  007CCE  0610               	decf	pulseServos@i,f,c
   634  007CD0  D7F8               	goto	l954
   635  007CD2                     l136:
   636                           
   637                           ;Hand.c: 170: }
   638                           ;Hand.c: 171: LATBbits.LATB7 = 0;
   639  007CD2  9E8A               	bcf	3978,7,c	;volatile
   640                           
   641                           ;Hand.c: 174: LATBbits.LATB6 = 1;
   642  007CD4  8C8A               	bsf	3978,6,c	;volatile
   643                           
   644                           ;Hand.c: 175: _delay((unsigned long)((540)*(48000000/4000000.0)));
   645  007CD6  0E09               	movlw	9
   646  007CD8  6E0F               	movwf	??_pulseServos& (0+255),c
   647  007CDA  0E69               	movlw	105
   648  007CDC                     u797:
   649  007CDC  2EE8               	decfsz	wreg,f,c
   650  007CDE  D7FE               	bra	u797
   651  007CE0  2E0F               	decfsz	??_pulseServos& (0+255),f,c
   652  007CE2  D7FC               	bra	u797
   653  007CE4  F000               	nop	
   654                           
   655                           ;Hand.c: 176: for (unsigned char i = arcPos[1]; i != 0; i--) {
   656  007CE6  C002  F011         	movff	_arcPos+1,pulseServos@i_163
   657  007CEA                     l968:
   658  007CEA  5011               	movf	pulseServos@i_163,w,c
   659  007CEC  B4D8               	btfsc	status,2,c
   660  007CEE  D005               	goto	l138
   661                           
   662                           ;Hand.c: 177: _delay((unsigned long)((6)*(48000000/4000000.0)));
   663  007CF0  0E18               	movlw	24
   664  007CF2                     u807:
   665  007CF2  2EE8               	decfsz	wreg,f,c
   666  007CF4  D7FE               	bra	u807
   667  007CF6  0611               	decf	pulseServos@i_163,f,c
   668  007CF8  D7F8               	goto	l968
   669  007CFA                     l138:
   670                           
   671                           ;Hand.c: 178: }
   672                           ;Hand.c: 179: LATBbits.LATB6 = 0;
   673  007CFA  9C8A               	bcf	3978,6,c	;volatile
   674                           
   675                           ;Hand.c: 182: LATBbits.LATB5 = 1;
   676  007CFC  8A8A               	bsf	3978,5,c	;volatile
   677                           
   678                           ;Hand.c: 183: _delay((unsigned long)((540)*(48000000/4000000.0)));
   679  007CFE  0E09               	movlw	9
   680  007D00  6E0F               	movwf	??_pulseServos& (0+255),c
   681  007D02  0E69               	movlw	105
   682  007D04                     u817:
   683  007D04  2EE8               	decfsz	wreg,f,c
   684  007D06  D7FE               	bra	u817
   685  007D08  2E0F               	decfsz	??_pulseServos& (0+255),f,c
   686  007D0A  D7FC               	bra	u817
   687  007D0C  F000               	nop	
   688                           
   689                           ;Hand.c: 184: for (unsigned char i = arcPos[2]; i != 0; i--) {
   690  007D0E  C003  F012         	movff	_arcPos+2,pulseServos@i_164
   691  007D12                     l982:
   692  007D12  5012               	movf	pulseServos@i_164,w,c
   693  007D14  B4D8               	btfsc	status,2,c
   694  007D16  D005               	goto	l140
   695                           
   696                           ;Hand.c: 185: _delay((unsigned long)((6)*(48000000/4000000.0)));
   697  007D18  0E18               	movlw	24
   698  007D1A                     u827:
   699  007D1A  2EE8               	decfsz	wreg,f,c
   700  007D1C  D7FE               	bra	u827
   701  007D1E  0612               	decf	pulseServos@i_164,f,c
   702  007D20  D7F8               	goto	l982
   703  007D22                     l140:
   704                           
   705                           ;Hand.c: 186: }
   706                           ;Hand.c: 187: LATBbits.LATB5 = 0;
   707  007D22  9A8A               	bcf	3978,5,c	;volatile
   708                           
   709                           ;Hand.c: 190: LATBbits.LATB4 = 1;
   710  007D24  888A               	bsf	3978,4,c	;volatile
   711                           
   712                           ;Hand.c: 191: _delay((unsigned long)((540)*(48000000/4000000.0)));
   713  007D26  0E09               	movlw	9
   714  007D28  6E0F               	movwf	??_pulseServos& (0+255),c
   715  007D2A  0E69               	movlw	105
   716  007D2C                     u837:
   717  007D2C  2EE8               	decfsz	wreg,f,c
   718  007D2E  D7FE               	bra	u837
   719  007D30  2E0F               	decfsz	??_pulseServos& (0+255),f,c
   720  007D32  D7FC               	bra	u837
   721  007D34  F000               	nop	
   722                           
   723                           ;Hand.c: 192: for (unsigned char i = arcPos[3]; i != 0; i--) {
   724  007D36  C004  F013         	movff	_arcPos+3,pulseServos@i_165
   725  007D3A                     l996:
   726  007D3A  5013               	movf	pulseServos@i_165,w,c
   727  007D3C  B4D8               	btfsc	status,2,c
   728  007D3E  D005               	goto	l142
   729                           
   730                           ;Hand.c: 193: _delay((unsigned long)((6)*(48000000/4000000.0)));
   731  007D40  0E18               	movlw	24
   732  007D42                     u847:
   733  007D42  2EE8               	decfsz	wreg,f,c
   734  007D44  D7FE               	bra	u847
   735  007D46  0613               	decf	pulseServos@i_165,f,c
   736  007D48  D7F8               	goto	l996
   737  007D4A                     l142:
   738                           
   739                           ;Hand.c: 194: }
   740                           ;Hand.c: 195: LATBbits.LATB4 = 0;
   741  007D4A  988A               	bcf	3978,4,c	;volatile
   742                           
   743                           ;Hand.c: 198: LATBbits.LATB2 = 1;
   744  007D4C  848A               	bsf	3978,2,c	;volatile
   745                           
   746                           ;Hand.c: 199: _delay((unsigned long)((540)*(48000000/4000000.0)));
   747  007D4E  0E09               	movlw	9
   748  007D50  6E0F               	movwf	??_pulseServos& (0+255),c
   749  007D52  0E69               	movlw	105
   750  007D54                     u857:
   751  007D54  2EE8               	decfsz	wreg,f,c
   752  007D56  D7FE               	bra	u857
   753  007D58  2E0F               	decfsz	??_pulseServos& (0+255),f,c
   754  007D5A  D7FC               	bra	u857
   755  007D5C  F000               	nop	
   756                           
   757                           ;Hand.c: 200: for (unsigned char i = arcPos[4]; i != 0; i--) {
   758  007D5E  C005  F014         	movff	_arcPos+4,pulseServos@i_166
   759  007D62                     l1010:
   760  007D62  5014               	movf	pulseServos@i_166,w,c
   761  007D64  B4D8               	btfsc	status,2,c
   762  007D66  D005               	goto	l144
   763                           
   764                           ;Hand.c: 201: _delay((unsigned long)((6)*(48000000/4000000.0)));
   765  007D68  0E18               	movlw	24
   766  007D6A                     u867:
   767  007D6A  2EE8               	decfsz	wreg,f,c
   768  007D6C  D7FE               	bra	u867
   769  007D6E  0614               	decf	pulseServos@i_166,f,c
   770  007D70  D7F8               	goto	l1010
   771  007D72                     l144:
   772                           
   773                           ;Hand.c: 202: }
   774                           ;Hand.c: 203: LATBbits.LATB2 = 0;
   775  007D72  948A               	bcf	3978,2,c	;volatile
   776  007D74  0012               	return		;funcret
   777  007D76                     __end_of_pulseServos:
   778                           	opt stack 0
   779                           tblptru	equ	0xFF8
   780                           postinc0	equ	0xFEE
   781                           wreg	equ	0xFE8
   782                           status	equ	0xFD8
   783                           
   784 ;; *************** function _initVariables *****************
   785 ;; Defined at:
   786 ;;		line 58 in file "Hand.c"
   787 ;; Parameters:    Size  Location     Type
   788 ;;		None
   789 ;; Auto vars:     Size  Location     Type
   790 ;;		None
   791 ;; Return value:  Size  Location     Type
   792 ;;                  1    wreg      void 
   793 ;; Registers used:
   794 ;;		wreg, status,2, cstack
   795 ;; Tracked objects:
   796 ;;		On entry : 0/0
   797 ;;		On exit  : 0/0
   798 ;;		Unchanged: 0/0
   799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   800 ;;      Params:         0       0       0       0       0       0       0       0       0
   801 ;;      Locals:         0       0       0       0       0       0       0       0       0
   802 ;;      Temps:          0       0       0       0       0       0       0       0       0
   803 ;;      Totals:         0       0       0       0       0       0       0       0       0
   804 ;;Total ram usage:        0 bytes
   805 ;; Hardware stack levels used:    1
   806 ;; Hardware stack levels required when called:    1
   807 ;; This function calls:
   808 ;;		_setPos
   809 ;; This function is called by:
   810 ;;		_main
   811 ;; This function uses a non-reentrant model
   812 ;;
   813                           
   814                           	psect	text2
   815  007B44                     __ptext2:
   816                           	opt stack 0
   817  007B44                     _initVariables:
   818                           	opt stack 29
   819                           
   820                           ;Hand.c: 59: setPos(0, 0, 0, 0, 0);
   821                           
   822                           ;incstack = 0
   823  007B44  0E00               	movlw	0
   824  007B46  6E0F               	movwf	setPos@b,c
   825  007B48  0E00               	movlw	0
   826  007B4A  6E10               	movwf	setPos@c,c
   827  007B4C  0E00               	movlw	0
   828  007B4E  6E11               	movwf	setPos@d,c
   829  007B50  0E00               	movlw	0
   830  007B52  6E12               	movwf	setPos@e,c
   831  007B54  0E00               	movlw	0
   832  007B56  EC88  F03D         	call	_setPos
   833                           
   834                           ;Hand.c: 60: modeSelect = 0;
   835  007B5A  0E00               	movlw	0
   836  007B5C  6E0C               	movwf	_modeSelect,c
   837                           
   838                           ;Hand.c: 61: isPressedForMode = 0;
   839  007B5E  0E00               	movlw	0
   840  007B60  6E0B               	movwf	_isPressedForMode,c
   841                           
   842                           ;Hand.c: 62: buttonWasLetGo = 1;
   843  007B62  0E01               	movlw	1
   844  007B64  6E0A               	movwf	_buttonWasLetGo,c
   845                           
   846                           ;Hand.c: 63: cMode = 0;
   847  007B66  0E00               	movlw	0
   848  007B68  6E0E               	movwf	_cMode,c
   849                           
   850                           ;Hand.c: 64: cDelay = 0;
   851  007B6A  0E00               	movlw	0
   852  007B6C  6E0D               	movwf	_cDelay,c
   853  007B6E  0012               	return		;funcret
   854  007B70                     __end_of_initVariables:
   855                           	opt stack 0
   856                           tblptru	equ	0xFF8
   857                           postinc0	equ	0xFEE
   858                           wreg	equ	0xFE8
   859                           status	equ	0xFD8
   860                           
   861 ;; *************** function _setPos *****************
   862 ;; Defined at:
   863 ;;		line 44 in file "Hand.c"
   864 ;; Parameters:    Size  Location     Type
   865 ;;  a               1    wreg     unsigned char 
   866 ;;  b               1    0[COMRAM] unsigned char 
   867 ;;  c               1    1[COMRAM] unsigned char 
   868 ;;  d               1    2[COMRAM] unsigned char 
   869 ;;  e               1    3[COMRAM] unsigned char 
   870 ;; Auto vars:     Size  Location     Type
   871 ;;  a               1    4[COMRAM] unsigned char 
   872 ;; Return value:  Size  Location     Type
   873 ;;                  1    wreg      void 
   874 ;; Registers used:
   875 ;;		wreg
   876 ;; Tracked objects:
   877 ;;		On entry : 0/0
   878 ;;		On exit  : 0/0
   879 ;;		Unchanged: 0/0
   880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   881 ;;      Params:         4       0       0       0       0       0       0       0       0
   882 ;;      Locals:         1       0       0       0       0       0       0       0       0
   883 ;;      Temps:          0       0       0       0       0       0       0       0       0
   884 ;;      Totals:         5       0       0       0       0       0       0       0       0
   885 ;;Total ram usage:        5 bytes
   886 ;; Hardware stack levels used:    1
   887 ;; This function calls:
   888 ;;		Nothing
   889 ;; This function is called by:
   890 ;;		_initVariables
   891 ;;		_main
   892 ;; This function uses a non-reentrant model
   893 ;;
   894                           
   895                           	psect	text3
   896  007B10                     __ptext3:
   897                           	opt stack 0
   898  007B10                     _setPos:
   899                           	opt stack 30
   900                           
   901                           ;incstack = 0
   902                           ;setPos@a stored from wreg
   903  007B10  6E13               	movwf	setPos@a,c
   904                           
   905                           ;Hand.c: 45: arcPos[0] = a;
   906  007B12  C013  F001         	movff	setPos@a,_arcPos
   907                           
   908                           ;Hand.c: 46: arcPos[1] = b;
   909  007B16  C00F  F002         	movff	setPos@b,_arcPos+1
   910                           
   911                           ;Hand.c: 47: arcPos[2] = c;
   912  007B1A  C010  F003         	movff	setPos@c,_arcPos+2
   913                           
   914                           ;Hand.c: 48: arcPos[3] = d;
   915  007B1E  C011  F004         	movff	setPos@d,_arcPos+3
   916                           
   917                           ;Hand.c: 49: arcPos[4] = e;
   918  007B22  C012  F005         	movff	setPos@e,_arcPos+4
   919  007B26  0012               	return		;funcret
   920  007B28                     __end_of_setPos:
   921                           	opt stack 0
   922                           tblptru	equ	0xFF8
   923                           postinc0	equ	0xFEE
   924                           wreg	equ	0xFE8
   925                           status	equ	0xFD8
   926                           
   927 ;; *************** function _initPorts *****************
   928 ;; Defined at:
   929 ;;		line 27 in file "CHRP3.c"
   930 ;; Parameters:    Size  Location     Type
   931 ;;		None
   932 ;; Auto vars:     Size  Location     Type
   933 ;;		None
   934 ;; Return value:  Size  Location     Type
   935 ;;                  1    wreg      void 
   936 ;; Registers used:
   937 ;;		wreg, status,2
   938 ;; Tracked objects:
   939 ;;		On entry : 0/0
   940 ;;		On exit  : 0/0
   941 ;;		Unchanged: 0/0
   942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   943 ;;      Params:         0       0       0       0       0       0       0       0       0
   944 ;;      Locals:         0       0       0       0       0       0       0       0       0
   945 ;;      Temps:          0       0       0       0       0       0       0       0       0
   946 ;;      Totals:         0       0       0       0       0       0       0       0       0
   947 ;;Total ram usage:        0 bytes
   948 ;; Hardware stack levels used:    1
   949 ;; This function calls:
   950 ;;		Nothing
   951 ;; This function is called by:
   952 ;;		_main
   953 ;; This function uses a non-reentrant model
   954 ;;
   955                           
   956                           	psect	text4
   957  007B70                     __ptext4:
   958                           	opt stack 0
   959  007B70                     _initPorts:
   960                           	opt stack 30
   961                           
   962                           ;CHRP3.c: 29: LATA = 0b00000000;
   963                           
   964                           ;incstack = 0
   965  007B70  0E00               	movlw	0
   966  007B72  6E89               	movwf	3977,c	;volatile
   967                           
   968                           ;CHRP3.c: 30: ANSELA = 0b00000000;
   969  007B74  0E00               	movlw	0
   970  007B76  010F               	movlb	15	; () banked
   971  007B78  6F5B               	movwf	91,b	;volatile
   972                           
   973                           ;CHRP3.c: 31: TRISA = 0b00101111;
   974  007B7A  0E2F               	movlw	47
   975  007B7C  6E92               	movwf	3986,c	;volatile
   976                           
   977                           ;CHRP3.c: 33: LATB = 0b00000000;
   978  007B7E  0E00               	movlw	0
   979  007B80  6E8A               	movwf	3978,c	;volatile
   980                           
   981                           ;CHRP3.c: 34: ANSELB = 0b00000000;
   982  007B82  0E00               	movlw	0
   983  007B84  010F               	movlb	15	; () banked
   984  007B86  6F5C               	movwf	92,b	;volatile
   985                           
   986                           ;CHRP3.c: 35: TRISB = 0b00000000;
   987  007B88  0E00               	movlw	0
   988  007B8A  6E93               	movwf	3987,c	;volatile
   989                           
   990                           ;CHRP3.c: 36: LATC = 0b00000000;
   991  007B8C  0E00               	movlw	0
   992  007B8E  6E8B               	movwf	3979,c	;volatile
   993                           
   994                           ;CHRP3.c: 37: ANSELC = 0b00000000;
   995  007B90  0E00               	movlw	0
   996  007B92  010F               	movlb	15	; () banked
   997  007B94  6F5D               	movwf	93,b	;volatile
   998                           
   999                           ;CHRP3.c: 38: TRISC = 0b10110000;
  1000  007B96  0EB0               	movlw	176
  1001  007B98  6E94               	movwf	3988,c	;volatile
  1002                           
  1003                           ;CHRP3.c: 41: T0CON = 0b10000001;
  1004  007B9A  0E81               	movlw	129
  1005  007B9C  6ED5               	movwf	4053,c	;volatile
  1006                           
  1007                           ;CHRP3.c: 44: PORTA = 0;
  1008  007B9E  0E00               	movlw	0
  1009  007BA0  6E80               	movwf	3968,c	;volatile
  1010                           
  1011                           ;CHRP3.c: 45: PORTB = 0;
  1012  007BA2  0E00               	movlw	0
  1013  007BA4  6E81               	movwf	3969,c	;volatile
  1014                           
  1015                           ;CHRP3.c: 46: PORTC = 0;
  1016  007BA6  0E00               	movlw	0
  1017  007BA8  6E82               	movwf	3970,c	;volatile
  1018                           
  1019                           ; BSR set to: 15
  1020  007BAA  0012               	return		;funcret
  1021  007BAC                     __end_of_initPorts:
  1022                           	opt stack 0
  1023                           tblptru	equ	0xFF8
  1024                           postinc0	equ	0xFEE
  1025                           wreg	equ	0xFE8
  1026                           status	equ	0xFD8
  1027                           
  1028 ;; *************** function _initOsc *****************
  1029 ;; Defined at:
  1030 ;;		line 16 in file "CHRP3.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;		None
  1033 ;; Auto vars:     Size  Location     Type
  1034 ;;		None
  1035 ;; Return value:  Size  Location     Type
  1036 ;;                  1    wreg      void 
  1037 ;; Registers used:
  1038 ;;		wreg, status,2
  1039 ;; Tracked objects:
  1040 ;;		On entry : 0/0
  1041 ;;		On exit  : 0/0
  1042 ;;		Unchanged: 0/0
  1043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1044 ;;      Params:         0       0       0       0       0       0       0       0       0
  1045 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1046 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1047 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1048 ;;Total ram usage:        0 bytes
  1049 ;; Hardware stack levels used:    1
  1050 ;; This function calls:
  1051 ;;		Nothing
  1052 ;; This function is called by:
  1053 ;;		_main
  1054 ;; This function uses a non-reentrant model
  1055 ;;
  1056                           
  1057                           	psect	text5
  1058  007AE4                     __ptext5:
  1059                           	opt stack 0
  1060  007AE4                     _initOsc:
  1061                           	opt stack 30
  1062                           
  1063                           ;CHRP3.c: 18: OSCTUNE = 0x80;
  1064                           
  1065                           ; BSR set to: 15
  1066                           ;incstack = 0
  1067  007AE4  0E80               	movlw	128
  1068  007AE6  6E9B               	movwf	3995,c	;volatile
  1069                           
  1070                           ;CHRP3.c: 19: OSCCON = 0x70;
  1071  007AE8  0E70               	movlw	112
  1072  007AEA  6ED3               	movwf	4051,c	;volatile
  1073                           
  1074                           ;CHRP3.c: 20: OSCCON2 = 0x10;
  1075  007AEC  0E10               	movlw	16
  1076  007AEE  6ED2               	movwf	4050,c	;volatile
  1077                           
  1078                           ;CHRP3.c: 21: ACTCON = 0x90;
  1079  007AF0  0E90               	movlw	144
  1080  007AF2  6EB5               	movwf	4021,c	;volatile
  1081  007AF4                     l45:
  1082  007AF4  BED2               	btfsc	4050,7,c	;volatile
  1083  007AF6  0012               	return	
  1084  007AF8  D7FD               	goto	l45
  1085  007AFA                     __end_of_initOsc:
  1086                           	opt stack 0
  1087                           tblptru	equ	0xFF8
  1088                           postinc0	equ	0xFEE
  1089                           wreg	equ	0xFE8
  1090                           status	equ	0xFD8
  1091                           
  1092 ;; *************** function _initANA *****************
  1093 ;; Defined at:
  1094 ;;		line 52 in file "CHRP3.c"
  1095 ;; Parameters:    Size  Location     Type
  1096 ;;		None
  1097 ;; Auto vars:     Size  Location     Type
  1098 ;;		None
  1099 ;; Return value:  Size  Location     Type
  1100 ;;                  1    wreg      void 
  1101 ;; Registers used:
  1102 ;;		wreg, status,2
  1103 ;; Tracked objects:
  1104 ;;		On entry : 0/0
  1105 ;;		On exit  : 0/0
  1106 ;;		Unchanged: 0/0
  1107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1108 ;;      Params:         0       0       0       0       0       0       0       0       0
  1109 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1110 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1111 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1112 ;;Total ram usage:        0 bytes
  1113 ;; Hardware stack levels used:    1
  1114 ;; This function calls:
  1115 ;;		Nothing
  1116 ;; This function is called by:
  1117 ;;		_main
  1118 ;; This function uses a non-reentrant model
  1119 ;;
  1120                           
  1121                           	psect	text6
  1122  007B28                     __ptext6:
  1123                           	opt stack 0
  1124  007B28                     _initANA:
  1125                           	opt stack 30
  1126                           
  1127                           ;CHRP3.c: 54: LATA = 0b00000000;
  1128                           
  1129                           ;incstack = 0
  1130  007B28  0E00               	movlw	0
  1131  007B2A  6E89               	movwf	3977,c	;volatile
  1132                           
  1133                           ;CHRP3.c: 55: ANSELA = 0b0011111;
  1134  007B2C  0E1F               	movlw	31
  1135  007B2E  010F               	movlb	15	; () banked
  1136  007B30  6F5B               	movwf	91,b	;volatile
  1137                           
  1138                           ;CHRP3.c: 56: ADCON0 = 0b00000000;
  1139  007B32  0E00               	movlw	0
  1140  007B34  6EC2               	movwf	4034,c	;volatile
  1141                           
  1142                           ;CHRP3.c: 57: ADCON1 = 0b00000000;
  1143  007B36  0E00               	movlw	0
  1144  007B38  6EC1               	movwf	4033,c	;volatile
  1145                           
  1146                           ;CHRP3.c: 58: ADCON2 = 0b00001110;
  1147  007B3A  0E0E               	movlw	14
  1148  007B3C  6EC0               	movwf	4032,c	;volatile
  1149                           
  1150                           ;CHRP3.c: 59: TRISA = 0b00101111;
  1151  007B3E  0E2F               	movlw	47
  1152  007B40  6E92               	movwf	3986,c	;volatile
  1153                           
  1154                           ; BSR set to: 15
  1155  007B42  0012               	return		;funcret
  1156  007B44                     __end_of_initANA:
  1157                           	opt stack 0
  1158                           tblptru	equ	0xFF8
  1159                           postinc0	equ	0xFEE
  1160                           wreg	equ	0xFE8
  1161                           status	equ	0xFD8
  1162                           
  1163 ;; *************** function _delay *****************
  1164 ;; Defined at:
  1165 ;;		line 214 in file "Hand.c"
  1166 ;; Parameters:    Size  Location     Type
  1167 ;;		None
  1168 ;; Auto vars:     Size  Location     Type
  1169 ;;  i               2   12[COMRAM] int 
  1170 ;; Return value:  Size  Location     Type
  1171 ;;                  1    wreg      void 
  1172 ;; Registers used:
  1173 ;;		wreg, status,2, status,0, cstack
  1174 ;; Tracked objects:
  1175 ;;		On entry : 0/0
  1176 ;;		On exit  : 0/0
  1177 ;;		Unchanged: 0/0
  1178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1179 ;;      Params:         0       0       0       0       0       0       0       0       0
  1180 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1181 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1182 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1183 ;;Total ram usage:        6 bytes
  1184 ;; Hardware stack levels used:    1
  1185 ;; Hardware stack levels required when called:    1
  1186 ;; This function calls:
  1187 ;;		___awdiv
  1188 ;; This function is called by:
  1189 ;;		_main
  1190 ;; This function uses a non-reentrant model
  1191 ;;
  1192                           
  1193                           	psect	text7
  1194  007BAC                     __ptext7:
  1195                           	opt stack 0
  1196  007BAC                     _delay:
  1197                           	opt stack 29
  1198                           
  1199                           ;Hand.c: 215: nDelay = (int) ((20000 - 2500 - 540 * 5 - arcPos[0] - arcPos[1] - arcPos[2
      +                          ] - arcPos[3] - arcPos[4]) / 6);
  1200                           
  1201                           ; BSR set to: 15
  1202                           ;incstack = 0
  1203  007BAC  0E50               	movlw	80
  1204  007BAE  6E17               	movwf	??_delay& (0+255),c
  1205  007BB0  0E14               	movlw	20
  1206  007BB2  6E18               	movwf	(??_delay+1)& (0+255),c
  1207  007BB4  5002               	movf	_arcPos+1,w,c
  1208  007BB6  C001  F019         	movff	_arcPos,??_delay+2
  1209  007BBA  6A1A               	clrf	(??_delay+3)& (0+255),c
  1210  007BBC  2619               	addwf	??_delay+2,f,c
  1211  007BBE  0E00               	movlw	0
  1212  007BC0  221A               	addwfc	??_delay+3,f,c
  1213  007BC2  5003               	movf	_arcPos+2,w,c
  1214  007BC4  2619               	addwf	??_delay+2,f,c
  1215  007BC6  0E00               	movlw	0
  1216  007BC8  221A               	addwfc	??_delay+3,f,c
  1217  007BCA  5004               	movf	_arcPos+3,w,c
  1218  007BCC  2619               	addwf	??_delay+2,f,c
  1219  007BCE  0E00               	movlw	0
  1220  007BD0  221A               	addwfc	??_delay+3,f,c
  1221  007BD2  5005               	movf	_arcPos+4,w,c
  1222  007BD4  2619               	addwf	??_delay+2,f,c
  1223  007BD6  0E00               	movlw	0
  1224  007BD8  221A               	addwfc	??_delay+3,f,c
  1225  007BDA  5017               	movf	??_delay,w,c
  1226  007BDC  2619               	addwf	??_delay+2,f,c
  1227  007BDE  5018               	movf	??_delay+1,w,c
  1228  007BE0  221A               	addwfc	??_delay+3,f,c
  1229  007BE2  1E19               	comf	??_delay+2,f,c
  1230  007BE4  1E1A               	comf	??_delay+3,f,c
  1231  007BE6  4A19               	infsnz	??_delay+2,f,c
  1232  007BE8  2A1A               	incf	??_delay+3,f,c
  1233  007BEA  0E20               	movlw	32
  1234  007BEC  2419               	addwf	??_delay+2,w,c
  1235  007BEE  6E0F               	movwf	___awdiv@dividend,c
  1236  007BF0  0E4E               	movlw	78
  1237  007BF2  201A               	addwfc	??_delay+3,w,c
  1238  007BF4  6E10               	movwf	___awdiv@dividend+1,c
  1239  007BF6  0E00               	movlw	0
  1240  007BF8  6E12               	movwf	___awdiv@divisor+1,c
  1241  007BFA  0E06               	movlw	6
  1242  007BFC  6E11               	movwf	___awdiv@divisor,c
  1243  007BFE  EC14  F03E         	call	___awdiv	;wreg free
  1244  007C02  C00F  F006         	movff	?___awdiv,_nDelay
  1245  007C06  C010  F007         	movff	?___awdiv+1,_nDelay+1
  1246                           
  1247                           ;Hand.c: 216: for (int i = nDelay; i != 0; i--) {
  1248  007C0A  C006  F01B         	movff	_nDelay,delay@i
  1249  007C0E  C007  F01C         	movff	_nDelay+1,delay@i+1
  1250  007C12                     l1234:
  1251  007C12  501B               	movf	delay@i,w,c
  1252  007C14  101C               	iorwf	delay@i+1,w,c
  1253  007C16  B4D8               	btfsc	status,2,c
  1254  007C18  0012               	return	
  1255                           
  1256                           ;Hand.c: 217: _delay((unsigned long)((6)*(48000000/4000000.0)));
  1257  007C1A  0E18               	movlw	24
  1258  007C1C                     u877:
  1259  007C1C  2EE8               	decfsz	wreg,f,c
  1260  007C1E  D7FE               	bra	u877
  1261  007C20  061B               	decf	delay@i,f,c
  1262  007C22  A0D8               	btfss	status,0,c
  1263  007C24  061C               	decf	delay@i+1,f,c
  1264  007C26  D7F5               	goto	l1234
  1265  007C28                     __end_of_delay:
  1266                           	opt stack 0
  1267                           tblptru	equ	0xFF8
  1268                           postinc0	equ	0xFEE
  1269                           wreg	equ	0xFE8
  1270                           status	equ	0xFD8
  1271                           
  1272 ;; *************** function ___awdiv *****************
  1273 ;; Defined at:
  1274 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  1275 ;; Parameters:    Size  Location     Type
  1276 ;;  dividend        2    0[COMRAM] int 
  1277 ;;  divisor         2    2[COMRAM] int 
  1278 ;; Auto vars:     Size  Location     Type
  1279 ;;  quotient        2    6[COMRAM] int 
  1280 ;;  sign            1    5[COMRAM] unsigned char 
  1281 ;;  counter         1    4[COMRAM] unsigned char 
  1282 ;; Return value:  Size  Location     Type
  1283 ;;                  2    0[COMRAM] int 
  1284 ;; Registers used:
  1285 ;;		wreg, status,2, status,0
  1286 ;; Tracked objects:
  1287 ;;		On entry : 0/0
  1288 ;;		On exit  : 0/0
  1289 ;;		Unchanged: 0/0
  1290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1291 ;;      Params:         4       0       0       0       0       0       0       0       0
  1292 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1293 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1294 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1295 ;;Total ram usage:        8 bytes
  1296 ;; Hardware stack levels used:    1
  1297 ;; This function calls:
  1298 ;;		Nothing
  1299 ;; This function is called by:
  1300 ;;		_delay
  1301 ;; This function uses a non-reentrant model
  1302 ;;
  1303                           
  1304                           	psect	text8
  1305  007C28                     __ptext8:
  1306                           	opt stack 0
  1307  007C28                     ___awdiv:
  1308                           	opt stack 29
  1309                           
  1310                           ;incstack = 0
  1311  007C28  0E00               	movlw	0
  1312  007C2A  6E14               	movwf	___awdiv@sign,c
  1313  007C2C  AE12               	btfss	___awdiv@divisor+1,7,c
  1314  007C2E  D006               	goto	l1102
  1315  007C30  6C11               	negf	___awdiv@divisor,c
  1316  007C32  1E12               	comf	___awdiv@divisor+1,f,c
  1317  007C34  B0D8               	btfsc	status,0,c
  1318  007C36  2A12               	incf	___awdiv@divisor+1,f,c
  1319  007C38  0E01               	movlw	1
  1320  007C3A  6E14               	movwf	___awdiv@sign,c
  1321  007C3C                     l1102:
  1322  007C3C  AE10               	btfss	___awdiv@dividend+1,7,c
  1323  007C3E  D006               	goto	l1108
  1324  007C40  6C0F               	negf	___awdiv@dividend,c
  1325  007C42  1E10               	comf	___awdiv@dividend+1,f,c
  1326  007C44  B0D8               	btfsc	status,0,c
  1327  007C46  2A10               	incf	___awdiv@dividend+1,f,c
  1328  007C48  0E01               	movlw	1
  1329  007C4A  1A14               	xorwf	___awdiv@sign,f,c
  1330  007C4C                     l1108:
  1331  007C4C  0E00               	movlw	0
  1332  007C4E  6E16               	movwf	___awdiv@quotient+1,c
  1333  007C50  0E00               	movlw	0
  1334  007C52  6E15               	movwf	___awdiv@quotient,c
  1335  007C54  5011               	movf	___awdiv@divisor,w,c
  1336  007C56  1012               	iorwf	___awdiv@divisor+1,w,c
  1337  007C58  B4D8               	btfsc	status,2,c
  1338  007C5A  D01C               	goto	l1130
  1339  007C5C  0E01               	movlw	1
  1340  007C5E  6E13               	movwf	___awdiv@counter,c
  1341  007C60  D004               	goto	l1116
  1342  007C62                     l1114:
  1343  007C62  90D8               	bcf	status,0,c
  1344  007C64  3611               	rlcf	___awdiv@divisor,f,c
  1345  007C66  3612               	rlcf	___awdiv@divisor+1,f,c
  1346  007C68  2A13               	incf	___awdiv@counter,f,c
  1347  007C6A                     l1116:
  1348  007C6A  AE12               	btfss	___awdiv@divisor+1,7,c
  1349  007C6C  D7FA               	goto	l1114
  1350  007C6E                     l1118:
  1351  007C6E  90D8               	bcf	status,0,c
  1352  007C70  3615               	rlcf	___awdiv@quotient,f,c
  1353  007C72  3616               	rlcf	___awdiv@quotient+1,f,c
  1354  007C74  5011               	movf	___awdiv@divisor,w,c
  1355  007C76  5C0F               	subwf	___awdiv@dividend,w,c
  1356  007C78  5012               	movf	___awdiv@divisor+1,w,c
  1357  007C7A  5810               	subwfb	___awdiv@dividend+1,w,c
  1358  007C7C  A0D8               	btfss	status,0,c
  1359  007C7E  D005               	goto	l1126
  1360  007C80  5011               	movf	___awdiv@divisor,w,c
  1361  007C82  5E0F               	subwf	___awdiv@dividend,f,c
  1362  007C84  5012               	movf	___awdiv@divisor+1,w,c
  1363  007C86  5A10               	subwfb	___awdiv@dividend+1,f,c
  1364  007C88  8015               	bsf	___awdiv@quotient,0,c
  1365  007C8A                     l1126:
  1366  007C8A  90D8               	bcf	status,0,c
  1367  007C8C  3212               	rrcf	___awdiv@divisor+1,f,c
  1368  007C8E  3211               	rrcf	___awdiv@divisor,f,c
  1369  007C90  2E13               	decfsz	___awdiv@counter,f,c
  1370  007C92  D7ED               	goto	l1118
  1371  007C94                     l1130:
  1372  007C94  5014               	movf	___awdiv@sign,w,c
  1373  007C96  B4D8               	btfsc	status,2,c
  1374  007C98  D004               	goto	l1134
  1375  007C9A  6C15               	negf	___awdiv@quotient,c
  1376  007C9C  1E16               	comf	___awdiv@quotient+1,f,c
  1377  007C9E  B0D8               	btfsc	status,0,c
  1378  007CA0  2A16               	incf	___awdiv@quotient+1,f,c
  1379  007CA2                     l1134:
  1380  007CA2  C015  F00F         	movff	___awdiv@quotient,?___awdiv
  1381  007CA6  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
  1382  007CAA  0012               	return	
  1383  007CAC                     __end_of___awdiv:
  1384                           	opt stack 0
  1385                           tblptru	equ	0xFF8
  1386                           postinc0	equ	0xFEE
  1387                           wreg	equ	0xFE8
  1388                           status	equ	0xFD8
  1389                           
  1390 ;; *************** function _checkMode *****************
  1391 ;; Defined at:
  1392 ;;		line 109 in file "Hand.c"
  1393 ;; Parameters:    Size  Location     Type
  1394 ;;		None
  1395 ;; Auto vars:     Size  Location     Type
  1396 ;;  i               1    6[COMRAM] unsigned char 
  1397 ;;  i               1    4[COMRAM] unsigned char 
  1398 ;;  i               1    5[COMRAM] unsigned char 
  1399 ;;  cTempMode       1    7[COMRAM] unsigned char 
  1400 ;; Return value:  Size  Location     Type
  1401 ;;                  1    wreg      unsigned char 
  1402 ;; Registers used:
  1403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1404 ;; Tracked objects:
  1405 ;;		On entry : 0/0
  1406 ;;		On exit  : 0/0
  1407 ;;		Unchanged: 0/0
  1408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1409 ;;      Params:         0       0       0       0       0       0       0       0       0
  1410 ;;      Locals:         8       0       0       0       0       0       0       0       0
  1411 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1412 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1413 ;;Total ram usage:        8 bytes
  1414 ;; Hardware stack levels used:    1
  1415 ;; This function calls:
  1416 ;;		Nothing
  1417 ;; This function is called by:
  1418 ;;		_main
  1419 ;; This function uses a non-reentrant model
  1420 ;;
  1421                           
  1422                           	psect	text9
  1423  007D76                     __ptext9:
  1424                           	opt stack 0
  1425  007D76                     _checkMode:
  1426                           	opt stack 30
  1427                           
  1428                           ;Hand.c: 110: unsigned char cTempMode = cMode;
  1429                           
  1430                           ;incstack = 0
  1431  007D76  C00E  F016         	movff	_cMode,checkMode@cTempMode
  1432                           
  1433                           ;Hand.c: 111: if (PORTEbits.RE3 == 0) {
  1434  007D7A  B684               	btfsc	3972,3,c	;volatile
  1435  007D7C  D070               	goto	l108
  1436                           
  1437                           ;Hand.c: 112: isPressedForMode = 1;
  1438  007D7E  0E01               	movlw	1
  1439  007D80  6E0B               	movwf	_isPressedForMode,c
  1440                           
  1441                           ;Hand.c: 113: if (!modeSelect && buttonWasLetGo) {
  1442  007D82  500C               	movf	_modeSelect,w,c
  1443  007D84  A4D8               	btfss	status,2,c
  1444  007D86  D02C               	goto	l1178
  1445  007D88  500A               	movf	_buttonWasLetGo,w,c
  1446  007D8A  B4D8               	btfsc	status,2,c
  1447  007D8C  D029               	goto	l1178
  1448                           
  1449                           ;Hand.c: 114: cDelay++;
  1450  007D8E  2A0D               	incf	_cDelay,f,c
  1451                           
  1452                           ;Hand.c: 115: if (cDelay == 20) {
  1453  007D90  0E14               	movlw	20
  1454  007D92  180D               	xorwf	_cDelay,w,c
  1455  007D94  A4D8               	btfss	status,2,c
  1456  007D96  D063               	goto	l108
  1457                           
  1458                           ;Hand.c: 116: cDelay = 0;
  1459  007D98  0E00               	movlw	0
  1460  007D9A  6E0D               	movwf	_cDelay,c
  1461                           
  1462                           ;Hand.c: 117: modeSelect = 1;
  1463  007D9C  0E01               	movlw	1
  1464  007D9E  6E0C               	movwf	_modeSelect,c
  1465                           
  1466                           ;Hand.c: 118: buttonWasLetGo = 0;
  1467  007DA0  0E00               	movlw	0
  1468  007DA2  6E0A               	movwf	_buttonWasLetGo,c
  1469                           
  1470                           ;Hand.c: 119: for (unsigned char i = 0; i < 5; i++) {
  1471  007DA4  0E00               	movlw	0
  1472  007DA6  6E14               	movwf	checkMode@i,c
  1473  007DA8                     l1162:
  1474  007DA8  0E04               	movlw	4
  1475  007DAA  6414               	cpfsgt	checkMode@i,c
  1476  007DAC  D001               	goto	l1166
  1477  007DAE  D057               	goto	l108
  1478  007DB0                     l1166:
  1479                           
  1480                           ;Hand.c: 120: arcPos[i] = (cTempMode == i) ? 255 : 0;
  1481  007DB0  5014               	movf	checkMode@i,w,c
  1482  007DB2  1816               	xorwf	checkMode@cTempMode,w,c
  1483  007DB4  B4D8               	btfsc	status,2,c
  1484  007DB6  D005               	goto	l1170
  1485  007DB8  0E00               	movlw	0
  1486  007DBA  6E10               	movwf	_checkMode$149+1,c
  1487  007DBC  0E00               	movlw	0
  1488  007DBE  6E0F               	movwf	_checkMode$149,c
  1489  007DC0  D003               	goto	l1172
  1490  007DC2                     l1170:
  1491  007DC2  0E00               	movlw	0
  1492  007DC4  6E10               	movwf	_checkMode$149+1,c
  1493  007DC6  680F               	setf	_checkMode$149,c
  1494  007DC8                     l1172:
  1495  007DC8  5014               	movf	checkMode@i,w,c
  1496  007DCA  0D01               	mullw	1
  1497  007DCC  0E01               	movlw	low _arcPos
  1498  007DCE  24F3               	addwf	prodl,w,c
  1499  007DD0  6ED9               	movwf	fsr2l,c
  1500  007DD2  0E00               	movlw	high _arcPos
  1501  007DD4  20F4               	addwfc	prodh,w,c
  1502  007DD6  6EDA               	movwf	fsr2h,c
  1503  007DD8  C00F  FFDF         	movff	_checkMode$149,indf2
  1504  007DDC  2A14               	incf	checkMode@i,f,c
  1505  007DDE  D7E4               	goto	l1162
  1506  007DE0                     l1178:
  1507  007DE0  500A               	movf	_buttonWasLetGo,w,c
  1508  007DE2  B4D8               	btfsc	status,2,c
  1509  007DE4  D03C               	goto	l108
  1510                           
  1511                           ;Hand.c: 124: cDelay++;
  1512  007DE6  2A0D               	incf	_cDelay,f,c
  1513                           
  1514                           ;Hand.c: 125: if (cDelay == 20) {
  1515  007DE8  0E14               	movlw	20
  1516  007DEA  180D               	xorwf	_cDelay,w,c
  1517  007DEC  A4D8               	btfss	status,2,c
  1518  007DEE  D019               	goto	l1200
  1519                           
  1520                           ;Hand.c: 126: cDelay = 0;
  1521  007DF0  0E00               	movlw	0
  1522  007DF2  6E0D               	movwf	_cDelay,c
  1523                           
  1524                           ;Hand.c: 127: modeSelect = 0;
  1525  007DF4  0E00               	movlw	0
  1526  007DF6  6E0C               	movwf	_modeSelect,c
  1527                           
  1528                           ;Hand.c: 128: buttonWasLetGo = 0;
  1529  007DF8  0E00               	movlw	0
  1530  007DFA  6E0A               	movwf	_buttonWasLetGo,c
  1531                           
  1532                           ;Hand.c: 129: cTempMode--;
  1533  007DFC  0616               	decf	checkMode@cTempMode,f,c
  1534                           
  1535                           ;Hand.c: 130: for (unsigned char i = 0; i < 5; i++) {
  1536  007DFE  0E00               	movlw	0
  1537  007E00  6E13               	movwf	checkMode@i_150,c
  1538  007E02                     l1190:
  1539  007E02  0E04               	movlw	4
  1540  007E04  6413               	cpfsgt	checkMode@i_150,c
  1541  007E06  D001               	goto	l1194
  1542  007E08  D02A               	goto	l108
  1543  007E0A                     l1194:
  1544                           
  1545                           ;Hand.c: 131: arcPos[i] = 0;
  1546  007E0A  5013               	movf	checkMode@i_150,w,c
  1547  007E0C  0D01               	mullw	1
  1548  007E0E  0E01               	movlw	low _arcPos
  1549  007E10  24F3               	addwf	prodl,w,c
  1550  007E12  6ED9               	movwf	fsr2l,c
  1551  007E14  0E00               	movlw	high _arcPos
  1552  007E16  20F4               	addwfc	prodh,w,c
  1553  007E18  6EDA               	movwf	fsr2h,c
  1554  007E1A  0E00               	movlw	0
  1555  007E1C  6EDF               	movwf	indf2,c
  1556  007E1E  2A13               	incf	checkMode@i_150,f,c
  1557  007E20  D7F0               	goto	l1190
  1558  007E22                     l1200:
  1559                           
  1560                           ;Hand.c: 134: for (unsigned char i = 0; i < 5; i++) {
  1561  007E22  0E00               	movlw	0
  1562  007E24  6E15               	movwf	checkMode@i_151,c
  1563  007E26                     l1202:
  1564  007E26  0E04               	movlw	4
  1565  007E28  6415               	cpfsgt	checkMode@i_151,c
  1566  007E2A  D001               	goto	l1206
  1567  007E2C  D018               	goto	l108
  1568  007E2E                     l1206:
  1569                           
  1570                           ;Hand.c: 135: arcPos[i] = (cTempMode == i) ? 255 : 0;
  1571  007E2E  5015               	movf	checkMode@i_151,w,c
  1572  007E30  1816               	xorwf	checkMode@cTempMode,w,c
  1573  007E32  B4D8               	btfsc	status,2,c
  1574  007E34  D005               	goto	l1210
  1575  007E36  0E00               	movlw	0
  1576  007E38  6E12               	movwf	_checkMode$152+1,c
  1577  007E3A  0E00               	movlw	0
  1578  007E3C  6E11               	movwf	_checkMode$152,c
  1579  007E3E  D003               	goto	l1212
  1580  007E40                     l1210:
  1581  007E40  0E00               	movlw	0
  1582  007E42  6E12               	movwf	_checkMode$152+1,c
  1583  007E44  6811               	setf	_checkMode$152,c
  1584  007E46                     l1212:
  1585  007E46  5015               	movf	checkMode@i_151,w,c
  1586  007E48  0D01               	mullw	1
  1587  007E4A  0E01               	movlw	low _arcPos
  1588  007E4C  24F3               	addwf	prodl,w,c
  1589  007E4E  6ED9               	movwf	fsr2l,c
  1590  007E50  0E00               	movlw	high _arcPos
  1591  007E52  20F4               	addwfc	prodh,w,c
  1592  007E54  6EDA               	movwf	fsr2h,c
  1593  007E56  C011  FFDF         	movff	_checkMode$152,indf2
  1594  007E5A  2A15               	incf	checkMode@i_151,f,c
  1595  007E5C  D7E4               	goto	l1202
  1596  007E5E                     l108:
  1597                           
  1598                           ;Hand.c: 136: }
  1599                           ;Hand.c: 137: }
  1600                           ;Hand.c: 138: }
  1601                           ;Hand.c: 139: }
  1602                           ;Hand.c: 141: if (PORTEbits.RE3 == 1) {
  1603  007E5E  A684               	btfss	3972,3,c	;volatile
  1604  007E60  D013               	goto	l129
  1605                           
  1606                           ;Hand.c: 142: if (isPressedForMode && modeSelect) {
  1607  007E62  500B               	movf	_isPressedForMode,w,c
  1608  007E64  B4D8               	btfsc	status,2,c
  1609  007E66  D00A               	goto	l130
  1610  007E68  500C               	movf	_modeSelect,w,c
  1611  007E6A  B4D8               	btfsc	status,2,c
  1612  007E6C  D007               	goto	l130
  1613                           
  1614                           ;Hand.c: 143: cTempMode++;
  1615  007E6E  2A16               	incf	checkMode@cTempMode,f,c
  1616                           
  1617                           ;Hand.c: 144: if (cTempMode == 5)cTempMode = 0;
  1618  007E70  0E05               	movlw	5
  1619  007E72  1816               	xorwf	checkMode@cTempMode,w,c
  1620  007E74  A4D8               	btfss	status,2,c
  1621  007E76  D002               	goto	l130
  1622  007E78  0E00               	movlw	0
  1623  007E7A  6E16               	movwf	checkMode@cTempMode,c
  1624  007E7C                     l130:
  1625                           
  1626                           ;Hand.c: 145: }
  1627                           ;Hand.c: 146: buttonWasLetGo = 1;
  1628  007E7C  0E01               	movlw	1
  1629  007E7E  6E0A               	movwf	_buttonWasLetGo,c
  1630                           
  1631                           ;Hand.c: 147: cDelay = 0;
  1632  007E80  0E00               	movlw	0
  1633  007E82  6E0D               	movwf	_cDelay,c
  1634                           
  1635                           ;Hand.c: 148: isPressedForMode = 0;
  1636  007E84  0E00               	movlw	0
  1637  007E86  6E0B               	movwf	_isPressedForMode,c
  1638  007E88                     l129:
  1639                           
  1640                           ;Hand.c: 149: }
  1641                           ;Hand.c: 150: return cTempMode;
  1642  007E88  5016               	movf	checkMode@cTempMode,w,c
  1643  007E8A  0012               	return	
  1644  007E8C                     __end_of_checkMode:
  1645                           	opt stack 0
  1646  0000                     tblptru	equ	0xFF8
  1647                           prodh	equ	0xFF4
  1648                           prodl	equ	0xFF3
  1649                           postinc0	equ	0xFEE
  1650                           wreg	equ	0xFE8
  1651                           indf2	equ	0xFDF
  1652                           fsr2h	equ	0xFDA
  1653                           fsr2l	equ	0xFD9
  1654                           status	equ	0xFD8
  1655                           tblptru	equ	0xFF8
  1656                           prodh	equ	0xFF4
  1657                           prodl	equ	0xFF3
  1658                           postinc0	equ	0xFEE
  1659                           wreg	equ	0xFE8
  1660                           indf2	equ	0xFDF
  1661                           fsr2h	equ	0xFDA
  1662                           fsr2l	equ	0xFD9
  1663                           status	equ	0xFD8
  1664                           
  1665                           	psect	rparam
  1666  0000                     tblptru	equ	0xFF8
  1667                           prodh	equ	0xFF4
  1668                           prodl	equ	0xFF3
  1669                           postinc0	equ	0xFEE
  1670                           wreg	equ	0xFE8
  1671                           indf2	equ	0xFDF
  1672                           fsr2h	equ	0xFDA
  1673                           fsr2l	equ	0xFD9
  1674                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     14      28
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_delay
    _initVariables->_setPos
    _delay->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4630
                          _checkMode
                              _delay
                            _initANA
                            _initOsc
                          _initPorts
                      _initVariables
                        _pulseServos
                             _setPos
 ---------------------------------------------------------------------------------
 (1) _pulseServos                                          6     6      0     150
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _initVariables                                        0     0      0    1830
                             _setPos
 ---------------------------------------------------------------------------------
 (1) _setPos                                               5     1      4    1830
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initOsc                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initANA                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delay                                                6     6      0     432
                                              8 COMRAM     6     6      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     386
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _checkMode                                            8     8      0     388
                                              0 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _checkMode
   _delay
     ___awdiv
   _initANA
   _initOsc
   _initPorts
   _initVariables
     _setPos
   _pulseServos
   _setPos

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      E      1C       1       29.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1C       6        0.0%
DATA                 0      0      1C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Jun 17 01:19:40 2017

            _pulseServos 7CAC                       l45 7AF4                       _GO 007E11  
           ___awdiv@sign 0014             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000                      l130 7E7C  
                    l108 7E5E                      l140 7D22                      l142 7D4A  
                    l144 7D72                      l136 7CD2                      l129 7E88  
                    l161 7E9E                      l138 7CFA                      l954 7CC2  
                    l982 7D12                      l968 7CEA                      l996 7D3A  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      u807 7CF2  
                    u817 7D04                      u827 7D1A                      u837 7D2C  
                    u847 7D42                      u857 7D54                      u777 7CB4  
                    u867 7D6A                      u787 7CCA                      u877 7C1C  
                    u797 7CDC                      prod 000FF3                      wreg 000FE8  
           __CFG_LVP$OFF 000000                     l1010 7D62                     l1102 7C3C  
                   l1200 7E22                     l1210 7E40                     l1202 7E26  
                   l1114 7C62                     l1130 7C94                     l1212 7E46  
                   l1116 7C6A                     l1108 7C4C                     l1206 7E2E  
                   l1134 7CA2                     l1126 7C8A                     l1118 7C6E  
                   l1170 7DC2                     l1162 7DA8                     l1234 7C12  
                   l1172 7DC8                     l1190 7E02                     l1166 7DB0  
                   l1270 7F30                     l1262 7ED0                     l1272 7F48  
                   l1264 7EE8                     l1248 7EAC                     l1194 7E0A  
                   l1178 7DE0                     l1274 7F60                     l1266 7F00  
                   l1282 7FA8                     l1276 7F78                     l1268 7F18  
                   l1278 7F90                     l1286 7FE2                     l1288 7FF0  
                   _ADON 007E10                     _LATA 000F89                     _LATB 000F8A  
                   _LATC 000F8B                     _main 7E8C                     indf2 000FDF  
                   fsr2l 000FD9            __CFG_BORV$190 000000                     prodl 000FF3  
                   start 2000            __CFG_IESO$OFF 000000             ___param_bank 000000  
                  ?_main 000F          __end_of___awdiv 7CAC                    _T0CON 000FD5  
        ___awdiv@divisor 0011          ___awdiv@counter 0013                    _PORTA 000F80  
                  _PORTB 000F81                    _PORTC 000F82                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000                    _cMode 000E  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
        __end_of_initANA 7B44           __CFG_EBTRB$OFF 000000                    _delay 7BAC  
        __end_of_initOsc 7AFA                    status 000FD8           __CFG_T3CMX$RC0 000000  
         __CFG_MCLRE$OFF 000000          __initialization 7AFA             __end_of_main 8000  
                 ??_main 001D            __activetblptr 000002   __size_of_initVariables 002C  
         __CFG_SDOMX$RB3 000000          __CFG_CCP2MX$RC1 000000                   ?_delay 000F  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
                 _ACTCON 000FB5                   _ADRESH 000FC4         ___awdiv@dividend 000F  
           pulseServos@i 0010                   _ANSELA 000F5B                   _ANSELB 000F5C  
                 _ANSELC 000F5D                   _OSCCON 000FD3                   _PLLRDY 007E97  
         __CFG_XINST$OFF 000000                   _cDelay 000D                   _nDelay 0006  
              ??___awdiv 0013           __CFG_STVREN$ON 000000                   _arcPos 0001  
                 delay@i 001B                   clear_0 7B00         ___awdiv@quotient 0015  
                 _setPos 7B10                ??_initANA 000F                ??_initOsc 000F  
                 tblptru 000FF8     __CFG_LS48MHZ$SYS48X8 000000               __accesstop 0060  
__end_of__initialization 7B06          __CFG_PBADEN$OFF 000000            _initVariables 7B44  
          ___rparam_used 000001           __pcstackCOMRAM 000F         __CFG_nPWRTEN$OFF 000000  
     __size_of_checkMode 0116            __end_of_delay 7C28             ?_pulseServos 000F  
    _isPressedForGesture 0008          __CFG_PCLKEN$OFF 000000           __CFG_nLPBOR$ON 000000  
                ??_delay 0017           ?_initVariables 000F       __size_of_initPorts 003C  
      __CFG_PLLSEL$PLL3X 000000                  ?_setPos 000F          __CFG_WDTEN$SWON 000000  
                _OSCCON2 000FD2                  _OSCTUNE 000F9B        __end_of_checkMode 7E8C  
                __Hparam 0000                  __Lparam 0000               checkMode@i 0014  
                ___awdiv 7C28                  __pcinit 7AFA                  __ramtop 0800  
             _modeSelect 000C          __size_of_setPos 0018                  __ptext0 7E8C  
                __ptext1 7CAC                  __ptext2 7B44                  __ptext3 7B10  
                __ptext4 7B70                  __ptext5 7AE4                  __ptext6 7B28  
                __ptext7 7BAC                  __ptext8 7C28                  __ptext9 7D76  
         checkMode@i_150 0013           checkMode@i_151 0015                  _initANA 7B28  
      __end_of_initPorts 7BAC                  _initOsc 7AE4     end_of_initialization 7B06  
        ??_initVariables 0014            __Lmediumconst 0000                  setPos@a 0013  
                setPos@b 000F                  setPos@c 0010                  setPos@d 0011  
                setPos@e 0012            _checkMode$152 0011            _checkMode$149 000F  
                postinc0 000FEE     __size_of_pulseServos 00CA                _PORTEbits 000F84  
         __end_of_setPos 7B28      start_initialization 7AFA           _buttonWasLetGo 000A  
               ??_setPos 0013              __pbssCOMRAM 0001                _checkMode 7D76  
       _isPressedForMode 000B                 ?___awdiv 000F                 ?_initANA 000F  
               ?_initOsc 000F                _initPorts 7B70           __size_of_delay 007C  
               _LATBbits 000F8A               ?_checkMode 000F         __CFG_WDTPS$32768 000000  
      __CFG_CFGPLLEN$OFF 000000               ?_initPorts 000F       checkMode@cTempMode 0016  
  __end_of_initVariables 7B70                 __Hrparam 0000         pulseServos@i_163 0011  
       pulseServos@i_164 0012         pulseServos@i_165 0013         pulseServos@i_166 0014  
               __Lrparam 0000                 _cGesture 0009       __CFG_BOREN$SBORDIS 000000  
          ??_pulseServos 000F         __size_of___awdiv 0084         __size_of_initANA 001C  
       __size_of_initOsc 0016            __size_of_main 0174              ??_checkMode 000F  
    __end_of_pulseServos 7D76              ??_initPorts 000F     __CFG_CPUDIV$NOCLKDIV 000000  
     __CFG_FOSC$INTOSCIO 000000  
