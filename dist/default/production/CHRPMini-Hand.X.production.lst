

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Jun 20 22:51:09 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27  0000                     
    28                           ; Version 1.41
    29                           ; Generated 25/01/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F25K50 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     
    63                           	psect	idataCOMRAM
    64  002008                     __pidataCOMRAM:
    65                           	opt stack 0
    66                           
    67                           ;initializer for _arcMinPos
    68  002008  FF                 	db	255
    69  002009  FF                 	db	255
    70  00200A  FF                 	db	255
    71  00200B  FF                 	db	255
    72  00200C  FF                 	db	255
    73  0000                     _ANSELC	set	3933
    74  0000                     _ANSELB	set	3932
    75  0000                     _ANSELA	set	3931
    76  0000                     _ADCON2	set	4032
    77  0000                     _ADCON1	set	4033
    78  0000                     _PORTC	set	3970
    79  0000                     _PORTB	set	3969
    80  0000                     _PORTA	set	3968
    81  0000                     _T0CON	set	4053
    82  0000                     _TRISC	set	3988
    83  0000                     _LATC	set	3979
    84  0000                     _TRISB	set	3987
    85  0000                     _LATB	set	3978
    86  0000                     _TRISA	set	3986
    87  0000                     _LATA	set	3977
    88  0000                     _ACTCON	set	4021
    89  0000                     _OSCCON2	set	4050
    90  0000                     _OSCCON	set	4051
    91  0000                     _OSCTUNE	set	3995
    92  0000                     _LATBbits	set	3978
    93  0000                     _PORTEbits	set	3972
    94  0000                     _ADRESH	set	4036
    95  0000                     _ADCON0	set	4034
    96  0000                     _LATAbits	set	3977
    97  0000                     _PLLRDY	set	32407
    98  0000                     _GO	set	32273
    99  0000                     _ADON	set	32272
   100                           
   101                           ; #config settings
   102  0000                     
   103                           	psect	cinit
   104  0079F8                     __pcinit:
   105                           	opt stack 0
   106  0079F8                     start_initialization:
   107                           	opt stack 0
   108  0079F8                     __initialization:
   109                           	opt stack 0
   110                           
   111                           ; Initialize objects allocated to COMRAM (5 bytes)
   112                           ; load TBLPTR registers with __pidataCOMRAM
   113  0079F8  0E08               	movlw	low __pidataCOMRAM
   114  0079FA  6EF6               	movwf	tblptrl,c
   115  0079FC  0E20               	movlw	high __pidataCOMRAM
   116  0079FE  6EF7               	movwf	tblptrh,c
   117  007A00  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   118  007A02  6EF8               	movwf	tblptru,c
   119  007A04  EE00  F022         	lfsr	0,__pdataCOMRAM
   120  007A08  EE10 F005          	lfsr	1,5
   121  007A0C                     copy_data0:
   122  007A0C  0009               	tblrd		*+
   123  007A0E  CFF5 FFEE          	movff	tablat,postinc0
   124  007A12  50E5               	movf	postdec1,w,c
   125  007A14  50E1               	movf	fsr1l,w,c
   126  007A16  E1FA               	bnz	copy_data0
   127                           
   128                           ; Clear objects allocated to COMRAM (19 bytes)
   129  007A18  EE00  F001         	lfsr	0,__pbssCOMRAM
   130  007A1C  0E13               	movlw	19
   131  007A1E                     clear_0:
   132  007A1E  6AEE               	clrf	postinc0,c
   133  007A20  06E8               	decf	wreg,f,c
   134  007A22  E1FD               	bnz	clear_0
   135  007A24                     end_of_initialization:
   136                           	opt stack 0
   137  007A24                     __end_of__initialization:
   138                           	opt stack 0
   139  007A24  0E00               	movlw	low (__Lmediumconst shr (0+16))
   140  007A26  6EF8               	movwf	tblptru,c
   141  007A28  0100               	movlb	0
   142  007A2A  EF9D  F03D         	goto	_main	;jump to C main() function
   143                           tblptru	equ	0xFF8
   144                           tblptrh	equ	0xFF7
   145                           tblptrl	equ	0xFF6
   146                           tablat	equ	0xFF5
   147                           postinc0	equ	0xFEE
   148                           wreg	equ	0xFE8
   149                           postdec1	equ	0xFE5
   150                           fsr1l	equ	0xFE1
   151                           
   152                           	psect	bssCOMRAM
   153  000001                     __pbssCOMRAM:
   154                           	opt stack 0
   155  000001                     _arcPos:
   156                           	opt stack 0
   157  000001                     	ds	5
   158  000006                     _nCalibrationCounter:
   159                           	opt stack 0
   160  000006                     	ds	2
   161  000008                     _nDelay:
   162                           	opt stack 0
   163  000008                     	ds	2
   164  00000A                     _calibMode:
   165                           	opt stack 0
   166  00000A                     	ds	1
   167  00000B                     _buttonWasLetGo:
   168                           	opt stack 0
   169  00000B                     	ds	1
   170  00000C                     _isPressedForGesture:
   171                           	opt stack 0
   172  00000C                     	ds	1
   173  00000D                     _isPressedForMode:
   174                           	opt stack 0
   175  00000D                     	ds	1
   176  00000E                     _modeSelect:
   177                           	opt stack 0
   178  00000E                     	ds	1
   179  00000F                     _cCycleIncrement:
   180                           	opt stack 0
   181  00000F                     	ds	1
   182  000010                     _cCountFingerCycle:
   183                           	opt stack 0
   184  000010                     	ds	1
   185  000011                     _cGesture:
   186                           	opt stack 0
   187  000011                     	ds	1
   188  000012                     _cDelay:
   189                           	opt stack 0
   190  000012                     	ds	1
   191  000013                     _cMode:
   192                           	opt stack 0
   193  000013                     	ds	1
   194                           tblptru	equ	0xFF8
   195                           tblptrh	equ	0xFF7
   196                           tblptrl	equ	0xFF6
   197                           tablat	equ	0xFF5
   198                           postinc0	equ	0xFEE
   199                           wreg	equ	0xFE8
   200                           postdec1	equ	0xFE5
   201                           fsr1l	equ	0xFE1
   202                           
   203                           	psect	dataCOMRAM
   204  000022                     __pdataCOMRAM:
   205                           	opt stack 0
   206  000022                     _arcMinPos:
   207                           	opt stack 0
   208  000022                     	ds	5
   209                           tblptru	equ	0xFF8
   210                           tblptrh	equ	0xFF7
   211                           tblptrl	equ	0xFF6
   212                           tablat	equ	0xFF5
   213                           postinc0	equ	0xFEE
   214                           wreg	equ	0xFE8
   215                           postdec1	equ	0xFE5
   216                           fsr1l	equ	0xFE1
   217                           
   218                           	psect	cstackCOMRAM
   219  000014                     __pcstackCOMRAM:
   220                           	opt stack 0
   221  000014                     ??_pulseServos:
   222  000014                     ?___awdiv:
   223                           	opt stack 0
   224  000014                     setPos@b:
   225                           	opt stack 0
   226  000014                     adConvert@chan:
   227                           	opt stack 0
   228  000014                     beep@pitch:
   229                           	opt stack 0
   230  000014                     ___awdiv@dividend:
   231                           	opt stack 0
   232                           
   233                           ; 2 bytes @ 0x0
   234  000014                     	ds	1
   235  000015                     ??_convertSensors:
   236  000015                     setPos@c:
   237                           	opt stack 0
   238  000015                     pulseServos@i:
   239                           	opt stack 0
   240                           
   241                           ; 1 bytes @ 0x1
   242  000015                     	ds	1
   243  000016                     setPos@d:
   244                           	opt stack 0
   245  000016                     pulseServos@i_205:
   246                           	opt stack 0
   247  000016                     beep@duration:
   248                           	opt stack 0
   249  000016                     ___awdiv@divisor:
   250                           	opt stack 0
   251                           
   252                           ; 2 bytes @ 0x2
   253  000016                     	ds	1
   254  000017                     setPos@e:
   255                           	opt stack 0
   256  000017                     pulseServos@i_206:
   257                           	opt stack 0
   258                           
   259                           ; 1 bytes @ 0x3
   260  000017                     	ds	1
   261  000018                     ??_beep:
   262  000018                     setPos@a:
   263                           	opt stack 0
   264  000018                     pulseServos@i_207:
   265                           	opt stack 0
   266  000018                     ___awdiv@counter:
   267                           	opt stack 0
   268                           
   269                           ; 1 bytes @ 0x4
   270  000018                     	ds	1
   271  000019                     pulseServos@i_208:
   272                           	opt stack 0
   273  000019                     ___awdiv@sign:
   274                           	opt stack 0
   275  000019                     beep@j:
   276                           	opt stack 0
   277                           
   278                           ; 2 bytes @ 0x5
   279  000019                     	ds	1
   280  00001A                     ___awdiv@quotient:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x6
   284  00001A                     	ds	1
   285  00001B                     _checkMode$192:
   286                           	opt stack 0
   287                           
   288                           ; 2 bytes @ 0x7
   289  00001B                     	ds	1
   290  00001C                     ??_delay:
   291                           
   292                           ; 1 bytes @ 0x8
   293  00001C                     	ds	1
   294  00001D                     _checkMode$194:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x9
   298  00001D                     	ds	2
   299  00001F                     checkMode@i:
   300                           	opt stack 0
   301                           
   302                           ; 1 bytes @ 0xB
   303  00001F                     	ds	1
   304  000020                     checkMode@i_193:
   305                           	opt stack 0
   306  000020                     delay@i:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0xC
   310  000020                     	ds	1
   311  000021                     checkMode@cTempMode:
   312                           	opt stack 0
   313                           
   314                           ; 1 bytes @ 0xD
   315  000021                     	ds	1
   316  000022                     tblptru	equ	0xFF8
   317                           tblptrh	equ	0xFF7
   318                           tblptrl	equ	0xFF6
   319                           tablat	equ	0xFF5
   320                           postinc0	equ	0xFEE
   321                           wreg	equ	0xFE8
   322                           postdec1	equ	0xFE5
   323                           fsr1l	equ	0xFE1
   324                           
   325                           ; 1 bytes @ 0xE
   326 ;;
   327 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   328 ;;
   329 ;; *************** function _main *****************
   330 ;; Defined at:
   331 ;;		line 373 in file "Hand.c"
   332 ;; Parameters:    Size  Location     Type
   333 ;;		None
   334 ;; Auto vars:     Size  Location     Type
   335 ;;		None
   336 ;; Return value:  Size  Location     Type
   337 ;;                  2  161[None  ] int 
   338 ;; Registers used:
   339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   340 ;; Tracked objects:
   341 ;;		On entry : 0/0
   342 ;;		On exit  : 0/0
   343 ;;		Unchanged: 0/0
   344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   345 ;;      Params:         0       0       0       0       0       0       0       0       0
   346 ;;      Locals:         0       0       0       0       0       0       0       0       0
   347 ;;      Temps:          0       0       0       0       0       0       0       0       0
   348 ;;      Totals:         0       0       0       0       0       0       0       0       0
   349 ;;Total ram usage:        0 bytes
   350 ;; Hardware stack levels required when called:    2
   351 ;; This function calls:
   352 ;;		_checkMode
   353 ;;		_commands
   354 ;;		_convertSensors
   355 ;;		_delay
   356 ;;		_heyKidWantSomeCandy
   357 ;;		_initANA
   358 ;;		_initOsc
   359 ;;		_initPorts
   360 ;;		_initVariables
   361 ;;		_pulseServos
   362 ;; This function is called by:
   363 ;;		Startup code after reset
   364 ;; This function uses a non-reentrant model
   365 ;;
   366                           
   367                           	psect	text0
   368  007B3A                     __ptext0:
   369                           	opt stack 0
   370  007B3A                     _main:
   371                           	opt stack 29
   372                           
   373                           ;Hand.c: 374: initOsc();
   374                           
   375                           ;incstack = 0
   376  007B3A  ECAD  F03C         	call	_initOsc	;wreg free
   377                           
   378                           ;Hand.c: 375: initPorts();
   379  007B3E  EC17  F03D         	call	_initPorts	;wreg free
   380                           
   381                           ;Hand.c: 376: initANA();
   382  007B42  ECC4  F03C         	call	_initANA	;wreg free
   383                           
   384                           ;Hand.c: 377: initVariables();
   385  007B46  EC57  F03D         	call	_initVariables	;wreg free
   386  007B4A                     l1523:
   387                           
   388                           ;Hand.c: 379: if (!modeSelect) {
   389  007B4A  500E               	movf	_modeSelect,w,c
   390  007B4C  B4D8               	btfsc	status,2,c
   391  007B4E  D00A               	goto	l1535
   392  007B50  D013               	goto	l1537
   393  007B52                     l1527:
   394                           
   395                           ;Hand.c: 382: convertSensors();
   396  007B52  EC79  F03D         	call	_convertSensors	;wreg free
   397                           
   398                           ;Hand.c: 385: break;
   399  007B56  D010               	goto	l1537
   400  007B58                     l1529:
   401                           
   402                           ;Hand.c: 387: commands();
   403  007B58  EC5E  F03F         	call	_commands	;wreg free
   404                           
   405                           ;Hand.c: 388: break;
   406  007B5C  D00D               	goto	l1537
   407  007B5E                     l1531:
   408                           
   409                           ;Hand.c: 390: heyKidWantSomeCandy();
   410  007B5E  ECE4  F03C         	call	_heyKidWantSomeCandy	;wreg free
   411                           
   412                           ;Hand.c: 394: }
   413                           
   414                           ;Hand.c: 393: break;
   415                           
   416                           ;Hand.c: 392: default:
   417                           
   418                           ;Hand.c: 391: break;
   419  007B62  D00A               	goto	l1537
   420  007B64                     l1535:
   421  007B64  5013               	movf	_cMode,w,c
   422                           
   423                           ; Switch size 1, requested type "space"
   424                           ; Number of cases is 3, Range of values is 0 to 2
   425                           ; switch strategies available:
   426                           ; Name         Instructions Cycles
   427                           ; simple_byte           10     6 (average)
   428                           ;	Chosen strategy is simple_byte
   429  007B66  0A00               	xorlw	0	; case 0
   430  007B68  B4D8               	btfsc	status,2,c
   431  007B6A  D7F3               	goto	l1527
   432  007B6C  0A01               	xorlw	1	; case 1
   433  007B6E  B4D8               	btfsc	status,2,c
   434  007B70  D7F3               	goto	l1529
   435  007B72  0A03               	xorlw	3	; case 2
   436  007B74  B4D8               	btfsc	status,2,c
   437  007B76  D7F3               	goto	l1531
   438  007B78                     l1537:
   439                           
   440                           ;Hand.c: 395: }
   441                           ;Hand.c: 396: if (!calibMode || modeSelect) {
   442  007B78  500A               	movf	_calibMode,w,c
   443  007B7A  B4D8               	btfsc	status,2,c
   444  007B7C  D003               	goto	l1541
   445  007B7E  500E               	movf	_modeSelect,w,c
   446  007B80  B4D8               	btfsc	status,2,c
   447  007B82  D004               	goto	l1543
   448  007B84                     l1541:
   449                           
   450                           ;Hand.c: 397: pulseServos();
   451  007B84  EC4A  F03E         	call	_pulseServos	;wreg free
   452                           
   453                           ;Hand.c: 398: delay();
   454  007B88  ECCA  F03D         	call	_delay	;wreg free
   455  007B8C                     l1543:
   456                           
   457                           ;Hand.c: 399: }
   458                           ;Hand.c: 400: cMode = checkMode();
   459  007B8C  ECBE  F03E         	call	_checkMode	;wreg free
   460  007B90  6E13               	movwf	_cMode,c
   461  007B92  D7DB               	goto	l1523
   462  007B94                     __end_of_main:
   463                           	opt stack 0
   464                           tblptru	equ	0xFF8
   465                           tblptrh	equ	0xFF7
   466                           tblptrl	equ	0xFF6
   467                           tablat	equ	0xFF5
   468                           postinc0	equ	0xFEE
   469                           wreg	equ	0xFE8
   470                           postdec1	equ	0xFE5
   471                           fsr1l	equ	0xFE1
   472                           status	equ	0xFD8
   473                           
   474 ;; *************** function _pulseServos *****************
   475 ;; Defined at:
   476 ;;		line 168 in file "Hand.c"
   477 ;; Parameters:    Size  Location     Type
   478 ;;		None
   479 ;; Auto vars:     Size  Location     Type
   480 ;;  i               1    5[COMRAM] unsigned char 
   481 ;;  i               1    4[COMRAM] unsigned char 
   482 ;;  i               1    3[COMRAM] unsigned char 
   483 ;;  i               1    2[COMRAM] unsigned char 
   484 ;;  i               1    1[COMRAM] unsigned char 
   485 ;; Return value:  Size  Location     Type
   486 ;;                  1    wreg      void 
   487 ;; Registers used:
   488 ;;		wreg, status,2, status,0
   489 ;; Tracked objects:
   490 ;;		On entry : 0/0
   491 ;;		On exit  : 0/0
   492 ;;		Unchanged: 0/0
   493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   494 ;;      Params:         0       0       0       0       0       0       0       0       0
   495 ;;      Locals:         5       0       0       0       0       0       0       0       0
   496 ;;      Temps:          1       0       0       0       0       0       0       0       0
   497 ;;      Totals:         6       0       0       0       0       0       0       0       0
   498 ;;Total ram usage:        6 bytes
   499 ;; Hardware stack levels used:    1
   500 ;; This function calls:
   501 ;;		Nothing
   502 ;; This function is called by:
   503 ;;		_main
   504 ;; This function uses a non-reentrant model
   505 ;;
   506                           
   507                           	psect	text1
   508  007C94                     __ptext1:
   509                           	opt stack 0
   510  007C94                     _pulseServos:
   511                           	opt stack 30
   512                           
   513                           ;Hand.c: 176: LATBbits.LATB7 = 1;
   514                           
   515                           ;incstack = 0
   516  007C94  8E8A               	bsf	3978,7,c	;volatile
   517                           
   518                           ;Hand.c: 177: _delay((unsigned long)((540)*(48000000/4000000.0)));
   519  007C96  0E09               	movlw	9
   520  007C98  6E14               	movwf	??_pulseServos& (0+255),c
   521  007C9A  0E69               	movlw	105
   522  007C9C                     u1207:
   523  007C9C  2EE8               	decfsz	wreg,f,c
   524  007C9E  D7FE               	bra	u1207
   525  007CA0  2E14               	decfsz	??_pulseServos& (0+255),f,c
   526  007CA2  D7FC               	bra	u1207
   527  007CA4  F000               	nop	
   528                           
   529                           ;Hand.c: 178: for (unsigned char i = 255 - arcPos[0]; i != 0; i--) {
   530  007CA6  5001               	movf	_arcPos,w,c
   531  007CA8  0800               	sublw	0
   532  007CAA  6E14               	movwf	??_pulseServos& (0+255),c
   533  007CAC  0414               	decf	??_pulseServos,w,c
   534  007CAE  6E15               	movwf	pulseServos@i,c
   535  007CB0                     l1027:
   536  007CB0  5015               	movf	pulseServos@i,w,c
   537  007CB2  B4D8               	btfsc	status,2,c
   538  007CB4  D005               	goto	l102
   539                           
   540                           ;Hand.c: 184: _delay((unsigned long)((6)*(48000000/4000000.0)));
   541  007CB6  0E18               	movlw	24
   542  007CB8                     u1217:
   543  007CB8  2EE8               	decfsz	wreg,f,c
   544  007CBA  D7FE               	bra	u1217
   545  007CBC  0615               	decf	pulseServos@i,f,c
   546  007CBE  D7F8               	goto	l1027
   547  007CC0                     l102:
   548                           
   549                           ;Hand.c: 186: }
   550                           ;Hand.c: 187: LATBbits.LATB7 = 0;
   551  007CC0  9E8A               	bcf	3978,7,c	;volatile
   552                           
   553                           ;Hand.c: 190: LATBbits.LATB6 = 1;
   554  007CC2  8C8A               	bsf	3978,6,c	;volatile
   555                           
   556                           ;Hand.c: 191: _delay((unsigned long)((540)*(48000000/4000000.0)));
   557  007CC4  0E09               	movlw	9
   558  007CC6  6E14               	movwf	??_pulseServos& (0+255),c
   559  007CC8  0E69               	movlw	105
   560  007CCA                     u1227:
   561  007CCA  2EE8               	decfsz	wreg,f,c
   562  007CCC  D7FE               	bra	u1227
   563  007CCE  2E14               	decfsz	??_pulseServos& (0+255),f,c
   564  007CD0  D7FC               	bra	u1227
   565  007CD2  F000               	nop	
   566                           
   567                           ;Hand.c: 192: for (unsigned char i = 255 - arcPos[1]; i != 0; i--) {
   568  007CD4  5002               	movf	_arcPos+1,w,c
   569  007CD6  0800               	sublw	0
   570  007CD8  6E14               	movwf	??_pulseServos& (0+255),c
   571  007CDA  0414               	decf	??_pulseServos,w,c
   572  007CDC  6E16               	movwf	pulseServos@i_205,c
   573  007CDE                     l1041:
   574  007CDE  5016               	movf	pulseServos@i_205,w,c
   575  007CE0  B4D8               	btfsc	status,2,c
   576  007CE2  D005               	goto	l104
   577                           
   578                           ;Hand.c: 193: _delay((unsigned long)((6)*(48000000/4000000.0)));
   579  007CE4  0E18               	movlw	24
   580  007CE6                     u1237:
   581  007CE6  2EE8               	decfsz	wreg,f,c
   582  007CE8  D7FE               	bra	u1237
   583  007CEA  0616               	decf	pulseServos@i_205,f,c
   584  007CEC  D7F8               	goto	l1041
   585  007CEE                     l104:
   586                           
   587                           ;Hand.c: 194: }
   588                           ;Hand.c: 195: LATBbits.LATB6 = 0;
   589  007CEE  9C8A               	bcf	3978,6,c	;volatile
   590                           
   591                           ;Hand.c: 198: LATBbits.LATB5 = 1;
   592  007CF0  8A8A               	bsf	3978,5,c	;volatile
   593                           
   594                           ;Hand.c: 199: _delay((unsigned long)((540)*(48000000/4000000.0)));
   595  007CF2  0E09               	movlw	9
   596  007CF4  6E14               	movwf	??_pulseServos& (0+255),c
   597  007CF6  0E69               	movlw	105
   598  007CF8                     u1247:
   599  007CF8  2EE8               	decfsz	wreg,f,c
   600  007CFA  D7FE               	bra	u1247
   601  007CFC  2E14               	decfsz	??_pulseServos& (0+255),f,c
   602  007CFE  D7FC               	bra	u1247
   603  007D00  F000               	nop	
   604                           
   605                           ;Hand.c: 200: for (unsigned char i = 255 - arcPos[2]; i != 0; i--) {
   606  007D02  5003               	movf	_arcPos+2,w,c
   607  007D04  0800               	sublw	0
   608  007D06  6E14               	movwf	??_pulseServos& (0+255),c
   609  007D08  0414               	decf	??_pulseServos,w,c
   610  007D0A  6E17               	movwf	pulseServos@i_206,c
   611  007D0C                     l1055:
   612  007D0C  5017               	movf	pulseServos@i_206,w,c
   613  007D0E  B4D8               	btfsc	status,2,c
   614  007D10  D005               	goto	l106
   615                           
   616                           ;Hand.c: 201: _delay((unsigned long)((6)*(48000000/4000000.0)));
   617  007D12  0E18               	movlw	24
   618  007D14                     u1257:
   619  007D14  2EE8               	decfsz	wreg,f,c
   620  007D16  D7FE               	bra	u1257
   621  007D18  0617               	decf	pulseServos@i_206,f,c
   622  007D1A  D7F8               	goto	l1055
   623  007D1C                     l106:
   624                           
   625                           ;Hand.c: 202: }
   626                           ;Hand.c: 203: LATBbits.LATB5 = 0;
   627  007D1C  9A8A               	bcf	3978,5,c	;volatile
   628                           
   629                           ;Hand.c: 206: LATBbits.LATB4 = 1;
   630  007D1E  888A               	bsf	3978,4,c	;volatile
   631                           
   632                           ;Hand.c: 207: _delay((unsigned long)((540)*(48000000/4000000.0)));
   633  007D20  0E09               	movlw	9
   634  007D22  6E14               	movwf	??_pulseServos& (0+255),c
   635  007D24  0E69               	movlw	105
   636  007D26                     u1267:
   637  007D26  2EE8               	decfsz	wreg,f,c
   638  007D28  D7FE               	bra	u1267
   639  007D2A  2E14               	decfsz	??_pulseServos& (0+255),f,c
   640  007D2C  D7FC               	bra	u1267
   641  007D2E  F000               	nop	
   642                           
   643                           ;Hand.c: 208: for (unsigned char i = 255 - arcPos[3]; i != 0; i--) {
   644  007D30  5004               	movf	_arcPos+3,w,c
   645  007D32  0800               	sublw	0
   646  007D34  6E14               	movwf	??_pulseServos& (0+255),c
   647  007D36  0414               	decf	??_pulseServos,w,c
   648  007D38  6E18               	movwf	pulseServos@i_207,c
   649  007D3A                     l1069:
   650  007D3A  5018               	movf	pulseServos@i_207,w,c
   651  007D3C  B4D8               	btfsc	status,2,c
   652  007D3E  D005               	goto	l108
   653                           
   654                           ;Hand.c: 209: _delay((unsigned long)((6)*(48000000/4000000.0)));
   655  007D40  0E18               	movlw	24
   656  007D42                     u1277:
   657  007D42  2EE8               	decfsz	wreg,f,c
   658  007D44  D7FE               	bra	u1277
   659  007D46  0618               	decf	pulseServos@i_207,f,c
   660  007D48  D7F8               	goto	l1069
   661  007D4A                     l108:
   662                           
   663                           ;Hand.c: 210: }
   664                           ;Hand.c: 211: LATBbits.LATB4 = 0;
   665  007D4A  988A               	bcf	3978,4,c	;volatile
   666                           
   667                           ;Hand.c: 214: LATBbits.LATB2 = 1;
   668  007D4C  848A               	bsf	3978,2,c	;volatile
   669                           
   670                           ;Hand.c: 215: _delay((unsigned long)((540)*(48000000/4000000.0)));
   671  007D4E  0E09               	movlw	9
   672  007D50  6E14               	movwf	??_pulseServos& (0+255),c
   673  007D52  0E69               	movlw	105
   674  007D54                     u1287:
   675  007D54  2EE8               	decfsz	wreg,f,c
   676  007D56  D7FE               	bra	u1287
   677  007D58  2E14               	decfsz	??_pulseServos& (0+255),f,c
   678  007D5A  D7FC               	bra	u1287
   679  007D5C  F000               	nop	
   680                           
   681                           ;Hand.c: 216: for (unsigned char i = 255 - arcPos[4]; i != 0; i--) {
   682  007D5E  5005               	movf	_arcPos+4,w,c
   683  007D60  0800               	sublw	0
   684  007D62  6E14               	movwf	??_pulseServos& (0+255),c
   685  007D64  0414               	decf	??_pulseServos,w,c
   686  007D66  6E19               	movwf	pulseServos@i_208,c
   687  007D68                     l1083:
   688  007D68  5019               	movf	pulseServos@i_208,w,c
   689  007D6A  B4D8               	btfsc	status,2,c
   690  007D6C  D005               	goto	l110
   691                           
   692                           ;Hand.c: 217: _delay((unsigned long)((6)*(48000000/4000000.0)));
   693  007D6E  0E18               	movlw	24
   694  007D70                     u1297:
   695  007D70  2EE8               	decfsz	wreg,f,c
   696  007D72  D7FE               	bra	u1297
   697  007D74  0619               	decf	pulseServos@i_208,f,c
   698  007D76  D7F8               	goto	l1083
   699  007D78                     l110:
   700                           
   701                           ;Hand.c: 218: }
   702                           ;Hand.c: 219: LATBbits.LATB2 = 0;
   703  007D78  948A               	bcf	3978,2,c	;volatile
   704  007D7A  0012               	return		;funcret
   705  007D7C                     __end_of_pulseServos:
   706                           	opt stack 0
   707                           tblptru	equ	0xFF8
   708                           tblptrh	equ	0xFF7
   709                           tblptrl	equ	0xFF6
   710                           tablat	equ	0xFF5
   711                           postinc0	equ	0xFEE
   712                           wreg	equ	0xFE8
   713                           postdec1	equ	0xFE5
   714                           fsr1l	equ	0xFE1
   715                           status	equ	0xFD8
   716                           
   717 ;; *************** function _initVariables *****************
   718 ;; Defined at:
   719 ;;		line 72 in file "Hand.c"
   720 ;; Parameters:    Size  Location     Type
   721 ;;		None
   722 ;; Auto vars:     Size  Location     Type
   723 ;;		None
   724 ;; Return value:  Size  Location     Type
   725 ;;                  1    wreg      void 
   726 ;; Registers used:
   727 ;;		wreg, status,2, cstack
   728 ;; Tracked objects:
   729 ;;		On entry : 0/0
   730 ;;		On exit  : 0/0
   731 ;;		Unchanged: 0/0
   732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   733 ;;      Params:         0       0       0       0       0       0       0       0       0
   734 ;;      Locals:         0       0       0       0       0       0       0       0       0
   735 ;;      Temps:          0       0       0       0       0       0       0       0       0
   736 ;;      Totals:         0       0       0       0       0       0       0       0       0
   737 ;;Total ram usage:        0 bytes
   738 ;; Hardware stack levels used:    1
   739 ;; Hardware stack levels required when called:    1
   740 ;; This function calls:
   741 ;;		_setPos
   742 ;; This function is called by:
   743 ;;		_main
   744 ;; This function uses a non-reentrant model
   745 ;;
   746                           
   747                           	psect	text2
   748  007AAE                     __ptext2:
   749                           	opt stack 0
   750  007AAE                     _initVariables:
   751                           	opt stack 29
   752                           
   753                           ;Hand.c: 73: setPos(0, 0, 0, 0, 0);
   754                           
   755                           ;incstack = 0
   756  007AAE  0E00               	movlw	0
   757  007AB0  6E14               	movwf	setPos@b,c
   758  007AB2  0E00               	movlw	0
   759  007AB4  6E15               	movwf	setPos@c,c
   760  007AB6  0E00               	movlw	0
   761  007AB8  6E16               	movwf	setPos@d,c
   762  007ABA  0E00               	movlw	0
   763  007ABC  6E17               	movwf	setPos@e,c
   764  007ABE  0E00               	movlw	0
   765  007AC0  ECB8  F03C         	call	_setPos
   766                           
   767                           ;Hand.c: 74: modeSelect = 0;
   768  007AC4  0E00               	movlw	0
   769  007AC6  6E0E               	movwf	_modeSelect,c
   770                           
   771                           ;Hand.c: 75: isPressedForMode = 0;
   772  007AC8  0E00               	movlw	0
   773  007ACA  6E0D               	movwf	_isPressedForMode,c
   774                           
   775                           ;Hand.c: 76: isPressedForGesture = 0;
   776  007ACC  0E00               	movlw	0
   777  007ACE  6E0C               	movwf	_isPressedForGesture,c
   778                           
   779                           ;Hand.c: 77: buttonWasLetGo = 1;
   780  007AD0  0E01               	movlw	1
   781  007AD2  6E0B               	movwf	_buttonWasLetGo,c
   782                           
   783                           ;Hand.c: 78: calibMode = 0;
   784  007AD4  0E00               	movlw	0
   785  007AD6  6E0A               	movwf	_calibMode,c
   786                           
   787                           ;Hand.c: 79: cMode = 0;
   788  007AD8  0E00               	movlw	0
   789  007ADA  6E13               	movwf	_cMode,c
   790                           
   791                           ;Hand.c: 80: cDelay = 0;
   792  007ADC  0E00               	movlw	0
   793  007ADE  6E12               	movwf	_cDelay,c
   794                           
   795                           ;Hand.c: 81: cCountFingerCycle = 5;
   796  007AE0  0E05               	movlw	5
   797  007AE2  6E10               	movwf	_cCountFingerCycle,c
   798                           
   799                           ;Hand.c: 82: cCycleIncrement = 5;
   800  007AE4  0E05               	movlw	5
   801  007AE6  6E0F               	movwf	_cCycleIncrement,c
   802                           
   803                           ;Hand.c: 83: nCalibrationCounter = 0;
   804  007AE8  0E00               	movlw	0
   805  007AEA  6E07               	movwf	_nCalibrationCounter+1,c
   806  007AEC  0E00               	movlw	0
   807  007AEE  6E06               	movwf	_nCalibrationCounter,c
   808  007AF0  0012               	return		;funcret
   809  007AF2                     __end_of_initVariables:
   810                           	opt stack 0
   811                           tblptru	equ	0xFF8
   812                           tblptrh	equ	0xFF7
   813                           tblptrl	equ	0xFF6
   814                           tablat	equ	0xFF5
   815                           postinc0	equ	0xFEE
   816                           wreg	equ	0xFE8
   817                           postdec1	equ	0xFE5
   818                           fsr1l	equ	0xFE1
   819                           status	equ	0xFD8
   820                           
   821 ;; *************** function _initPorts *****************
   822 ;; Defined at:
   823 ;;		line 27 in file "CHRPMini.c"
   824 ;; Parameters:    Size  Location     Type
   825 ;;		None
   826 ;; Auto vars:     Size  Location     Type
   827 ;;		None
   828 ;; Return value:  Size  Location     Type
   829 ;;                  1    wreg      void 
   830 ;; Registers used:
   831 ;;		wreg, status,2
   832 ;; Tracked objects:
   833 ;;		On entry : 0/0
   834 ;;		On exit  : 0/0
   835 ;;		Unchanged: 0/0
   836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   837 ;;      Params:         0       0       0       0       0       0       0       0       0
   838 ;;      Locals:         0       0       0       0       0       0       0       0       0
   839 ;;      Temps:          0       0       0       0       0       0       0       0       0
   840 ;;      Totals:         0       0       0       0       0       0       0       0       0
   841 ;;Total ram usage:        0 bytes
   842 ;; Hardware stack levels used:    1
   843 ;; This function calls:
   844 ;;		Nothing
   845 ;; This function is called by:
   846 ;;		_main
   847 ;; This function uses a non-reentrant model
   848 ;;
   849                           
   850                           	psect	text3
   851  007A2E                     __ptext3:
   852                           	opt stack 0
   853  007A2E                     _initPorts:
   854                           	opt stack 30
   855                           
   856                           ;CHRPMini.c: 29: LATA = 0b00000000;
   857                           
   858                           ;incstack = 0
   859  007A2E  0E00               	movlw	0
   860  007A30  6E89               	movwf	3977,c	;volatile
   861                           
   862                           ;CHRPMini.c: 30: ANSELA = 0b00000000;
   863  007A32  0E00               	movlw	0
   864  007A34  010F               	movlb	15	; () banked
   865  007A36  6F5B               	movwf	91,b	;volatile
   866                           
   867                           ;CHRPMini.c: 31: TRISA = 0b00101111;
   868  007A38  0E2F               	movlw	47
   869  007A3A  6E92               	movwf	3986,c	;volatile
   870                           
   871                           ;CHRPMini.c: 33: LATB = 0b00000000;
   872  007A3C  0E00               	movlw	0
   873  007A3E  6E8A               	movwf	3978,c	;volatile
   874                           
   875                           ;CHRPMini.c: 34: ANSELB = 0b00000000;
   876  007A40  0E00               	movlw	0
   877  007A42  010F               	movlb	15	; () banked
   878  007A44  6F5C               	movwf	92,b	;volatile
   879                           
   880                           ;CHRPMini.c: 35: TRISB = 0b00000000;
   881  007A46  0E00               	movlw	0
   882  007A48  6E93               	movwf	3987,c	;volatile
   883                           
   884                           ;CHRPMini.c: 36: LATC = 0b00000000;
   885  007A4A  0E00               	movlw	0
   886  007A4C  6E8B               	movwf	3979,c	;volatile
   887                           
   888                           ;CHRPMini.c: 37: ANSELC = 0b00000000;
   889  007A4E  0E00               	movlw	0
   890  007A50  010F               	movlb	15	; () banked
   891  007A52  6F5D               	movwf	93,b	;volatile
   892                           
   893                           ;CHRPMini.c: 38: TRISC = 0b10110000;
   894  007A54  0EB0               	movlw	176
   895  007A56  6E94               	movwf	3988,c	;volatile
   896                           
   897                           ;CHRPMini.c: 41: T0CON = 0b10000001;
   898  007A58  0E81               	movlw	129
   899  007A5A  6ED5               	movwf	4053,c	;volatile
   900                           
   901                           ;CHRPMini.c: 44: PORTA = 0;
   902  007A5C  0E00               	movlw	0
   903  007A5E  6E80               	movwf	3968,c	;volatile
   904                           
   905                           ;CHRPMini.c: 45: PORTB = 0;
   906  007A60  0E00               	movlw	0
   907  007A62  6E81               	movwf	3969,c	;volatile
   908                           
   909                           ;CHRPMini.c: 46: PORTC = 0;
   910  007A64  0E00               	movlw	0
   911  007A66  6E82               	movwf	3970,c	;volatile
   912                           
   913                           ; BSR set to: 15
   914  007A68  0012               	return		;funcret
   915  007A6A                     __end_of_initPorts:
   916                           	opt stack 0
   917                           tblptru	equ	0xFF8
   918                           tblptrh	equ	0xFF7
   919                           tblptrl	equ	0xFF6
   920                           tablat	equ	0xFF5
   921                           postinc0	equ	0xFEE
   922                           wreg	equ	0xFE8
   923                           postdec1	equ	0xFE5
   924                           fsr1l	equ	0xFE1
   925                           status	equ	0xFD8
   926                           
   927 ;; *************** function _initOsc *****************
   928 ;; Defined at:
   929 ;;		line 16 in file "CHRPMini.c"
   930 ;; Parameters:    Size  Location     Type
   931 ;;		None
   932 ;; Auto vars:     Size  Location     Type
   933 ;;		None
   934 ;; Return value:  Size  Location     Type
   935 ;;                  1    wreg      void 
   936 ;; Registers used:
   937 ;;		wreg, status,2
   938 ;; Tracked objects:
   939 ;;		On entry : 0/0
   940 ;;		On exit  : 0/0
   941 ;;		Unchanged: 0/0
   942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   943 ;;      Params:         0       0       0       0       0       0       0       0       0
   944 ;;      Locals:         0       0       0       0       0       0       0       0       0
   945 ;;      Temps:          0       0       0       0       0       0       0       0       0
   946 ;;      Totals:         0       0       0       0       0       0       0       0       0
   947 ;;Total ram usage:        0 bytes
   948 ;; Hardware stack levels used:    1
   949 ;; This function calls:
   950 ;;		Nothing
   951 ;; This function is called by:
   952 ;;		_main
   953 ;; This function uses a non-reentrant model
   954 ;;
   955                           
   956                           	psect	text4
   957  00795A                     __ptext4:
   958                           	opt stack 0
   959  00795A                     _initOsc:
   960                           	opt stack 30
   961                           
   962                           ;CHRPMini.c: 18: OSCTUNE = 0x80;
   963                           
   964                           ; BSR set to: 15
   965                           ;incstack = 0
   966  00795A  0E80               	movlw	128
   967  00795C  6E9B               	movwf	3995,c	;volatile
   968                           
   969                           ;CHRPMini.c: 19: OSCCON = 0x70;
   970  00795E  0E70               	movlw	112
   971  007960  6ED3               	movwf	4051,c	;volatile
   972                           
   973                           ;CHRPMini.c: 20: OSCCON2 = 0x10;
   974  007962  0E10               	movlw	16
   975  007964  6ED2               	movwf	4050,c	;volatile
   976                           
   977                           ;CHRPMini.c: 21: ACTCON = 0x90;
   978  007966  0E90               	movlw	144
   979  007968  6EB5               	movwf	4021,c	;volatile
   980  00796A                     l220:
   981  00796A  BED2               	btfsc	4050,7,c	;volatile
   982  00796C  0012               	return	
   983  00796E  D7FD               	goto	l220
   984  007970                     __end_of_initOsc:
   985                           	opt stack 0
   986                           tblptru	equ	0xFF8
   987                           tblptrh	equ	0xFF7
   988                           tblptrl	equ	0xFF6
   989                           tablat	equ	0xFF5
   990                           postinc0	equ	0xFEE
   991                           wreg	equ	0xFE8
   992                           postdec1	equ	0xFE5
   993                           fsr1l	equ	0xFE1
   994                           status	equ	0xFD8
   995                           
   996 ;; *************** function _initANA *****************
   997 ;; Defined at:
   998 ;;		line 52 in file "CHRPMini.c"
   999 ;; Parameters:    Size  Location     Type
  1000 ;;		None
  1001 ;; Auto vars:     Size  Location     Type
  1002 ;;		None
  1003 ;; Return value:  Size  Location     Type
  1004 ;;                  1    wreg      void 
  1005 ;; Registers used:
  1006 ;;		wreg, status,2
  1007 ;; Tracked objects:
  1008 ;;		On entry : 0/0
  1009 ;;		On exit  : 0/0
  1010 ;;		Unchanged: 0/0
  1011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1012 ;;      Params:         0       0       0       0       0       0       0       0       0
  1013 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1014 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1015 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1016 ;;Total ram usage:        0 bytes
  1017 ;; Hardware stack levels used:    1
  1018 ;; This function calls:
  1019 ;;		Nothing
  1020 ;; This function is called by:
  1021 ;;		_main
  1022 ;; This function uses a non-reentrant model
  1023 ;;
  1024                           
  1025                           	psect	text5
  1026  007988                     __ptext5:
  1027                           	opt stack 0
  1028  007988                     _initANA:
  1029                           	opt stack 30
  1030                           
  1031                           ;CHRPMini.c: 54: LATA = 0b00000000;
  1032                           
  1033                           ;incstack = 0
  1034  007988  0E00               	movlw	0
  1035  00798A  6E89               	movwf	3977,c	;volatile
  1036                           
  1037                           ;CHRPMini.c: 55: ANSELA = 0b0011111;
  1038  00798C  0E1F               	movlw	31
  1039  00798E  010F               	movlb	15	; () banked
  1040  007990  6F5B               	movwf	91,b	;volatile
  1041                           
  1042                           ;CHRPMini.c: 56: ADCON0 = 0b00000000;
  1043  007992  0E00               	movlw	0
  1044  007994  6EC2               	movwf	4034,c	;volatile
  1045                           
  1046                           ;CHRPMini.c: 57: ADCON1 = 0b00000000;
  1047  007996  0E00               	movlw	0
  1048  007998  6EC1               	movwf	4033,c	;volatile
  1049                           
  1050                           ;CHRPMini.c: 58: ADCON2 = 0b00001110;
  1051  00799A  0E0E               	movlw	14
  1052  00799C  6EC0               	movwf	4032,c	;volatile
  1053                           
  1054                           ;CHRPMini.c: 59: TRISA = 0b00101111;
  1055  00799E  0E2F               	movlw	47
  1056  0079A0  6E92               	movwf	3986,c	;volatile
  1057                           
  1058                           ; BSR set to: 15
  1059  0079A2  0012               	return		;funcret
  1060  0079A4                     __end_of_initANA:
  1061                           	opt stack 0
  1062                           tblptru	equ	0xFF8
  1063                           tblptrh	equ	0xFF7
  1064                           tblptrl	equ	0xFF6
  1065                           tablat	equ	0xFF5
  1066                           postinc0	equ	0xFEE
  1067                           wreg	equ	0xFE8
  1068                           postdec1	equ	0xFE5
  1069                           fsr1l	equ	0xFE1
  1070                           status	equ	0xFD8
  1071                           
  1072 ;; *************** function _heyKidWantSomeCandy *****************
  1073 ;; Defined at:
  1074 ;;		line 362 in file "Hand.c"
  1075 ;; Parameters:    Size  Location     Type
  1076 ;;		None
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;		None
  1079 ;; Return value:  Size  Location     Type
  1080 ;;                  1    wreg      void 
  1081 ;; Registers used:
  1082 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1083 ;; Tracked objects:
  1084 ;;		On entry : 0/0
  1085 ;;		On exit  : 0/0
  1086 ;;		Unchanged: 0/0
  1087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1088 ;;      Params:         0       0       0       0       0       0       0       0       0
  1089 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1090 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1091 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1092 ;;Total ram usage:        0 bytes
  1093 ;; Hardware stack levels used:    1
  1094 ;; Hardware stack levels required when called:    1
  1095 ;; This function calls:
  1096 ;;		_setPos
  1097 ;; This function is called by:
  1098 ;;		_main
  1099 ;; This function uses a non-reentrant model
  1100 ;;
  1101                           
  1102                           	psect	text6
  1103  0079C8                     __ptext6:
  1104                           	opt stack 0
  1105  0079C8                     _heyKidWantSomeCandy:
  1106                           	opt stack 29
  1107                           
  1108                           ;Hand.c: 363: setPos(255, cCountFingerCycle, 255, 255, 255);
  1109                           
  1110                           ; BSR set to: 15
  1111                           ;incstack = 0
  1112  0079C8  C010  F014         	movff	_cCountFingerCycle,setPos@b
  1113  0079CC  0EFF               	movlw	255
  1114  0079CE  6E15               	movwf	setPos@c,c
  1115  0079D0  0EFF               	movlw	255
  1116  0079D2  6E16               	movwf	setPos@d,c
  1117  0079D4  0EFF               	movlw	255
  1118  0079D6  6E17               	movwf	setPos@e,c
  1119  0079D8  0EFF               	movlw	255
  1120  0079DA  ECB8  F03C         	call	_setPos
  1121                           
  1122                           ;Hand.c: 364: cCountFingerCycle += cCycleIncrement;
  1123  0079DE  500F               	movf	_cCycleIncrement,w,c
  1124  0079E0  2610               	addwf	_cCountFingerCycle,f,c
  1125                           
  1126                           ;Hand.c: 365: if (cCountFingerCycle == 255 || cCountFingerCycle == 0) {
  1127  0079E2  2810               	incf	_cCountFingerCycle,w,c
  1128  0079E4  B4D8               	btfsc	status,2,c
  1129  0079E6  D003               	goto	l1487
  1130  0079E8  5010               	movf	_cCountFingerCycle,w,c
  1131  0079EA  A4D8               	btfss	status,2,c
  1132  0079EC  0012               	return	
  1133  0079EE                     l1487:
  1134                           
  1135                           ;Hand.c: 366: cCycleIncrement *= -1;
  1136  0079EE  0EFF               	movlw	255
  1137  0079F0  020F               	mulwf	_cCycleIncrement,c
  1138  0079F2  50F3               	movf	prodl,w,c
  1139  0079F4  6E0F               	movwf	_cCycleIncrement,c
  1140  0079F6  0012               	return	
  1141  0079F8                     __end_of_heyKidWantSomeCandy:
  1142                           	opt stack 0
  1143                           tblptru	equ	0xFF8
  1144                           tblptrh	equ	0xFF7
  1145                           tblptrl	equ	0xFF6
  1146                           tablat	equ	0xFF5
  1147                           prodl	equ	0xFF3
  1148                           postinc0	equ	0xFEE
  1149                           wreg	equ	0xFE8
  1150                           postdec1	equ	0xFE5
  1151                           fsr1l	equ	0xFE1
  1152                           status	equ	0xFD8
  1153                           
  1154 ;; *************** function _delay *****************
  1155 ;; Defined at:
  1156 ;;		line 231 in file "Hand.c"
  1157 ;; Parameters:    Size  Location     Type
  1158 ;;		None
  1159 ;; Auto vars:     Size  Location     Type
  1160 ;;  i               2   12[COMRAM] int 
  1161 ;; Return value:  Size  Location     Type
  1162 ;;                  1    wreg      void 
  1163 ;; Registers used:
  1164 ;;		wreg, status,2, status,0, cstack
  1165 ;; Tracked objects:
  1166 ;;		On entry : 0/0
  1167 ;;		On exit  : 0/0
  1168 ;;		Unchanged: 0/0
  1169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1170 ;;      Params:         0       0       0       0       0       0       0       0       0
  1171 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1172 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1173 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1174 ;;Total ram usage:        6 bytes
  1175 ;; Hardware stack levels used:    1
  1176 ;; Hardware stack levels required when called:    1
  1177 ;; This function calls:
  1178 ;;		___awdiv
  1179 ;; This function is called by:
  1180 ;;		_main
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           	psect	text7
  1185  007B94                     __ptext7:
  1186                           	opt stack 0
  1187  007B94                     _delay:
  1188                           	opt stack 29
  1189                           
  1190                           ;Hand.c: 232: nDelay = (int) ((20000 - 2500 - 540 * 5 - arcPos[0] - arcPos[1] - arcPos[2
      +                          ] - arcPos[3] - arcPos[4]) / 6);
  1191                           
  1192                           ;incstack = 0
  1193  007B94  0E50               	movlw	80
  1194  007B96  6E1C               	movwf	??_delay& (0+255),c
  1195  007B98  0E14               	movlw	20
  1196  007B9A  6E1D               	movwf	(??_delay+1)& (0+255),c
  1197  007B9C  5002               	movf	_arcPos+1,w,c
  1198  007B9E  C001  F01E         	movff	_arcPos,??_delay+2
  1199  007BA2  6A1F               	clrf	(??_delay+3)& (0+255),c
  1200  007BA4  261E               	addwf	??_delay+2,f,c
  1201  007BA6  0E00               	movlw	0
  1202  007BA8  221F               	addwfc	??_delay+3,f,c
  1203  007BAA  5003               	movf	_arcPos+2,w,c
  1204  007BAC  261E               	addwf	??_delay+2,f,c
  1205  007BAE  0E00               	movlw	0
  1206  007BB0  221F               	addwfc	??_delay+3,f,c
  1207  007BB2  5004               	movf	_arcPos+3,w,c
  1208  007BB4  261E               	addwf	??_delay+2,f,c
  1209  007BB6  0E00               	movlw	0
  1210  007BB8  221F               	addwfc	??_delay+3,f,c
  1211  007BBA  5005               	movf	_arcPos+4,w,c
  1212  007BBC  261E               	addwf	??_delay+2,f,c
  1213  007BBE  0E00               	movlw	0
  1214  007BC0  221F               	addwfc	??_delay+3,f,c
  1215  007BC2  501C               	movf	??_delay,w,c
  1216  007BC4  261E               	addwf	??_delay+2,f,c
  1217  007BC6  501D               	movf	??_delay+1,w,c
  1218  007BC8  221F               	addwfc	??_delay+3,f,c
  1219  007BCA  1E1E               	comf	??_delay+2,f,c
  1220  007BCC  1E1F               	comf	??_delay+3,f,c
  1221  007BCE  4A1E               	infsnz	??_delay+2,f,c
  1222  007BD0  2A1F               	incf	??_delay+3,f,c
  1223  007BD2  0E20               	movlw	32
  1224  007BD4  241E               	addwf	??_delay+2,w,c
  1225  007BD6  6E14               	movwf	___awdiv@dividend,c
  1226  007BD8  0E4E               	movlw	78
  1227  007BDA  201F               	addwfc	??_delay+3,w,c
  1228  007BDC  6E15               	movwf	___awdiv@dividend+1,c
  1229  007BDE  0E00               	movlw	0
  1230  007BE0  6E17               	movwf	___awdiv@divisor+1,c
  1231  007BE2  0E06               	movlw	6
  1232  007BE4  6E16               	movwf	___awdiv@divisor,c
  1233  007BE6  EC08  F03E         	call	___awdiv	;wreg free
  1234  007BEA  C014  F008         	movff	?___awdiv,_nDelay
  1235  007BEE  C015  F009         	movff	?___awdiv+1,_nDelay+1
  1236                           
  1237                           ;Hand.c: 233: for (int i = nDelay; i != 0; i--) {
  1238  007BF2  C008  F020         	movff	_nDelay,delay@i
  1239  007BF6  C009  F021         	movff	_nDelay+1,delay@i+1
  1240  007BFA                     l1429:
  1241  007BFA  5020               	movf	delay@i,w,c
  1242  007BFC  1021               	iorwf	delay@i+1,w,c
  1243  007BFE  B4D8               	btfsc	status,2,c
  1244  007C00  0012               	return	
  1245                           
  1246                           ;Hand.c: 234: _delay((unsigned long)((6)*(48000000/4000000.0)));
  1247  007C02  0E18               	movlw	24
  1248  007C04                     u1307:
  1249  007C04  2EE8               	decfsz	wreg,f,c
  1250  007C06  D7FE               	bra	u1307
  1251  007C08  0620               	decf	delay@i,f,c
  1252  007C0A  A0D8               	btfss	status,0,c
  1253  007C0C  0621               	decf	delay@i+1,f,c
  1254  007C0E  D7F5               	goto	l1429
  1255  007C10                     __end_of_delay:
  1256                           	opt stack 0
  1257                           tblptru	equ	0xFF8
  1258                           tblptrh	equ	0xFF7
  1259                           tblptrl	equ	0xFF6
  1260                           tablat	equ	0xFF5
  1261                           prodl	equ	0xFF3
  1262                           postinc0	equ	0xFEE
  1263                           wreg	equ	0xFE8
  1264                           postdec1	equ	0xFE5
  1265                           fsr1l	equ	0xFE1
  1266                           status	equ	0xFD8
  1267                           
  1268 ;; *************** function ___awdiv *****************
  1269 ;; Defined at:
  1270 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  1271 ;; Parameters:    Size  Location     Type
  1272 ;;  dividend        2    0[COMRAM] int 
  1273 ;;  divisor         2    2[COMRAM] int 
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;  quotient        2    6[COMRAM] int 
  1276 ;;  sign            1    5[COMRAM] unsigned char 
  1277 ;;  counter         1    4[COMRAM] unsigned char 
  1278 ;; Return value:  Size  Location     Type
  1279 ;;                  2    0[COMRAM] int 
  1280 ;; Registers used:
  1281 ;;		wreg, status,2, status,0
  1282 ;; Tracked objects:
  1283 ;;		On entry : 0/0
  1284 ;;		On exit  : 0/0
  1285 ;;		Unchanged: 0/0
  1286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1287 ;;      Params:         4       0       0       0       0       0       0       0       0
  1288 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1289 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1290 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1291 ;;Total ram usage:        8 bytes
  1292 ;; Hardware stack levels used:    1
  1293 ;; This function calls:
  1294 ;;		Nothing
  1295 ;; This function is called by:
  1296 ;;		_delay
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           	psect	text8
  1301  007C10                     __ptext8:
  1302                           	opt stack 0
  1303  007C10                     ___awdiv:
  1304                           	opt stack 29
  1305                           
  1306                           ;incstack = 0
  1307  007C10  0E00               	movlw	0
  1308  007C12  6E19               	movwf	___awdiv@sign,c
  1309  007C14  AE17               	btfss	___awdiv@divisor+1,7,c
  1310  007C16  D006               	goto	l1285
  1311  007C18  6C16               	negf	___awdiv@divisor,c
  1312  007C1A  1E17               	comf	___awdiv@divisor+1,f,c
  1313  007C1C  B0D8               	btfsc	status,0,c
  1314  007C1E  2A17               	incf	___awdiv@divisor+1,f,c
  1315  007C20  0E01               	movlw	1
  1316  007C22  6E19               	movwf	___awdiv@sign,c
  1317  007C24                     l1285:
  1318  007C24  AE15               	btfss	___awdiv@dividend+1,7,c
  1319  007C26  D006               	goto	l1291
  1320  007C28  6C14               	negf	___awdiv@dividend,c
  1321  007C2A  1E15               	comf	___awdiv@dividend+1,f,c
  1322  007C2C  B0D8               	btfsc	status,0,c
  1323  007C2E  2A15               	incf	___awdiv@dividend+1,f,c
  1324  007C30  0E01               	movlw	1
  1325  007C32  1A19               	xorwf	___awdiv@sign,f,c
  1326  007C34                     l1291:
  1327  007C34  0E00               	movlw	0
  1328  007C36  6E1B               	movwf	___awdiv@quotient+1,c
  1329  007C38  0E00               	movlw	0
  1330  007C3A  6E1A               	movwf	___awdiv@quotient,c
  1331  007C3C  5016               	movf	___awdiv@divisor,w,c
  1332  007C3E  1017               	iorwf	___awdiv@divisor+1,w,c
  1333  007C40  B4D8               	btfsc	status,2,c
  1334  007C42  D01C               	goto	l1313
  1335  007C44  0E01               	movlw	1
  1336  007C46  6E18               	movwf	___awdiv@counter,c
  1337  007C48  D004               	goto	l1299
  1338  007C4A                     l1297:
  1339  007C4A  90D8               	bcf	status,0,c
  1340  007C4C  3616               	rlcf	___awdiv@divisor,f,c
  1341  007C4E  3617               	rlcf	___awdiv@divisor+1,f,c
  1342  007C50  2A18               	incf	___awdiv@counter,f,c
  1343  007C52                     l1299:
  1344  007C52  AE17               	btfss	___awdiv@divisor+1,7,c
  1345  007C54  D7FA               	goto	l1297
  1346  007C56                     l1301:
  1347  007C56  90D8               	bcf	status,0,c
  1348  007C58  361A               	rlcf	___awdiv@quotient,f,c
  1349  007C5A  361B               	rlcf	___awdiv@quotient+1,f,c
  1350  007C5C  5016               	movf	___awdiv@divisor,w,c
  1351  007C5E  5C14               	subwf	___awdiv@dividend,w,c
  1352  007C60  5017               	movf	___awdiv@divisor+1,w,c
  1353  007C62  5815               	subwfb	___awdiv@dividend+1,w,c
  1354  007C64  A0D8               	btfss	status,0,c
  1355  007C66  D005               	goto	l1309
  1356  007C68  5016               	movf	___awdiv@divisor,w,c
  1357  007C6A  5E14               	subwf	___awdiv@dividend,f,c
  1358  007C6C  5017               	movf	___awdiv@divisor+1,w,c
  1359  007C6E  5A15               	subwfb	___awdiv@dividend+1,f,c
  1360  007C70  801A               	bsf	___awdiv@quotient,0,c
  1361  007C72                     l1309:
  1362  007C72  90D8               	bcf	status,0,c
  1363  007C74  3217               	rrcf	___awdiv@divisor+1,f,c
  1364  007C76  3216               	rrcf	___awdiv@divisor,f,c
  1365  007C78  2E18               	decfsz	___awdiv@counter,f,c
  1366  007C7A  D7ED               	goto	l1301
  1367  007C7C                     l1313:
  1368  007C7C  5019               	movf	___awdiv@sign,w,c
  1369  007C7E  B4D8               	btfsc	status,2,c
  1370  007C80  D004               	goto	l1317
  1371  007C82  6C1A               	negf	___awdiv@quotient,c
  1372  007C84  1E1B               	comf	___awdiv@quotient+1,f,c
  1373  007C86  B0D8               	btfsc	status,0,c
  1374  007C88  2A1B               	incf	___awdiv@quotient+1,f,c
  1375  007C8A                     l1317:
  1376  007C8A  C01A  F014         	movff	___awdiv@quotient,?___awdiv
  1377  007C8E  C01B  F015         	movff	___awdiv@quotient+1,?___awdiv+1
  1378  007C92  0012               	return	
  1379  007C94                     __end_of___awdiv:
  1380                           	opt stack 0
  1381                           tblptru	equ	0xFF8
  1382                           tblptrh	equ	0xFF7
  1383                           tblptrl	equ	0xFF6
  1384                           tablat	equ	0xFF5
  1385                           prodl	equ	0xFF3
  1386                           postinc0	equ	0xFEE
  1387                           wreg	equ	0xFE8
  1388                           postdec1	equ	0xFE5
  1389                           fsr1l	equ	0xFE1
  1390                           status	equ	0xFD8
  1391                           
  1392 ;; *************** function _convertSensors *****************
  1393 ;; Defined at:
  1394 ;;		line 248 in file "Hand.c"
  1395 ;; Parameters:    Size  Location     Type
  1396 ;;		None
  1397 ;; Auto vars:     Size  Location     Type
  1398 ;;		None
  1399 ;; Return value:  Size  Location     Type
  1400 ;;                  1    wreg      void 
  1401 ;; Registers used:
  1402 ;;		wreg, status,2, status,0, cstack
  1403 ;; Tracked objects:
  1404 ;;		On entry : 0/0
  1405 ;;		On exit  : 0/0
  1406 ;;		Unchanged: 0/0
  1407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1408 ;;      Params:         0       0       0       0       0       0       0       0       0
  1409 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1410 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1411 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1412 ;;Total ram usage:        1 bytes
  1413 ;; Hardware stack levels used:    1
  1414 ;; Hardware stack levels required when called:    1
  1415 ;; This function calls:
  1416 ;;		_adConvert
  1417 ;; This function is called by:
  1418 ;;		_main
  1419 ;; This function uses a non-reentrant model
  1420 ;;
  1421                           
  1422                           	psect	text9
  1423  007AF2                     __ptext9:
  1424                           	opt stack 0
  1425  007AF2                     _convertSensors:
  1426                           	opt stack 29
  1427                           
  1428                           ;Hand.c: 249: arcPos[0] = 255 - adConvert(0b00000000);
  1429                           
  1430                           ;incstack = 0
  1431  007AF2  0E00               	movlw	0
  1432  007AF4  ECD2  F03C         	call	_adConvert
  1433  007AF8  0800               	sublw	0
  1434  007AFA  6E15               	movwf	??_convertSensors& (0+255),c
  1435  007AFC  0415               	decf	??_convertSensors,w,c
  1436  007AFE  6E01               	movwf	_arcPos,c
  1437                           
  1438                           ;Hand.c: 250: arcPos[1] = 255 - adConvert(0b00000100);
  1439  007B00  0E04               	movlw	4
  1440  007B02  ECD2  F03C         	call	_adConvert
  1441  007B06  0800               	sublw	0
  1442  007B08  6E15               	movwf	??_convertSensors& (0+255),c
  1443  007B0A  0415               	decf	??_convertSensors,w,c
  1444  007B0C  6E02               	movwf	_arcPos+1,c
  1445                           
  1446                           ;Hand.c: 251: arcPos[2] = 255 - adConvert(0b00001000);
  1447  007B0E  0E08               	movlw	8
  1448  007B10  ECD2  F03C         	call	_adConvert
  1449  007B14  0800               	sublw	0
  1450  007B16  6E15               	movwf	??_convertSensors& (0+255),c
  1451  007B18  0415               	decf	??_convertSensors,w,c
  1452  007B1A  6E03               	movwf	_arcPos+2,c
  1453                           
  1454                           ;Hand.c: 252: arcPos[3] = 255 - adConvert(0b00001100);
  1455  007B1C  0E0C               	movlw	12
  1456  007B1E  ECD2  F03C         	call	_adConvert
  1457  007B22  0800               	sublw	0
  1458  007B24  6E15               	movwf	??_convertSensors& (0+255),c
  1459  007B26  0415               	decf	??_convertSensors,w,c
  1460  007B28  6E04               	movwf	_arcPos+3,c
  1461                           
  1462                           ;Hand.c: 253: arcPos[4] = 255 - adConvert(0b00010000);
  1463  007B2A  0E10               	movlw	16
  1464  007B2C  ECD2  F03C         	call	_adConvert
  1465  007B30  0800               	sublw	0
  1466  007B32  6E15               	movwf	??_convertSensors& (0+255),c
  1467  007B34  0415               	decf	??_convertSensors,w,c
  1468  007B36  6E05               	movwf	_arcPos+4,c
  1469  007B38  0012               	return		;funcret
  1470  007B3A                     __end_of_convertSensors:
  1471                           	opt stack 0
  1472                           tblptru	equ	0xFF8
  1473                           tblptrh	equ	0xFF7
  1474                           tblptrl	equ	0xFF6
  1475                           tablat	equ	0xFF5
  1476                           prodl	equ	0xFF3
  1477                           postinc0	equ	0xFEE
  1478                           wreg	equ	0xFE8
  1479                           postdec1	equ	0xFE5
  1480                           fsr1l	equ	0xFE1
  1481                           status	equ	0xFD8
  1482                           
  1483 ;; *************** function _adConvert *****************
  1484 ;; Defined at:
  1485 ;;		line 91 in file "Hand.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;  chan            1    wreg     unsigned char 
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;  chan            1    0[COMRAM] unsigned char 
  1490 ;; Return value:  Size  Location     Type
  1491 ;;                  1    wreg      unsigned char 
  1492 ;; Registers used:
  1493 ;;		wreg, status,2, status,0
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1499 ;;      Params:         0       0       0       0       0       0       0       0       0
  1500 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1501 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1502 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1503 ;;Total ram usage:        1 bytes
  1504 ;; Hardware stack levels used:    1
  1505 ;; This function calls:
  1506 ;;		Nothing
  1507 ;; This function is called by:
  1508 ;;		_convertSensors
  1509 ;; This function uses a non-reentrant model
  1510 ;;
  1511                           
  1512                           	psect	text10
  1513  0079A4                     __ptext10:
  1514                           	opt stack 0
  1515  0079A4                     _adConvert:
  1516                           	opt stack 29
  1517                           
  1518                           ;incstack = 0
  1519                           ;adConvert@chan stored from wreg
  1520  0079A4  6E14               	movwf	adConvert@chan,c
  1521                           
  1522                           ;Hand.c: 92: ADON = 1;
  1523  0079A6  80C2               	bsf	4034,0,c	;volatile
  1524                           
  1525                           ;Hand.c: 93: ADCON0 = (ADCON0 & 0b11000011);
  1526  0079A8  50C2               	movf	4034,w,c	;volatile
  1527  0079AA  0BC3               	andlw	195
  1528  0079AC  6EC2               	movwf	4034,c	;volatile
  1529                           
  1530                           ;Hand.c: 94: ADCON0 = (ADCON0 | chan);
  1531  0079AE  50C2               	movf	4034,w,c	;volatile
  1532  0079B0  1014               	iorwf	adConvert@chan,w,c
  1533  0079B2  6EC2               	movwf	4034,c	;volatile
  1534                           
  1535                           ;Hand.c: 96: __nop();
  1536  0079B4  F000               	nop	
  1537                           
  1538                           ;Hand.c: 97: __nop();
  1539  0079B6  F000               	nop	
  1540                           
  1541                           ;Hand.c: 98: __nop();
  1542  0079B8  F000               	nop	
  1543                           
  1544                           ;Hand.c: 99: __nop();
  1545  0079BA  F000               	nop	
  1546                           
  1547                           ;Hand.c: 101: GO = 1;
  1548  0079BC  82C2               	bsf	4034,1,c	;volatile
  1549  0079BE                     l68:
  1550  0079BE  B2C2               	btfsc	4034,1,c	;volatile
  1551  0079C0  D7FE               	goto	l68
  1552                           
  1553                           ;Hand.c: 105: ADON = 0;
  1554  0079C2  90C2               	bcf	4034,0,c	;volatile
  1555                           
  1556                           ;Hand.c: 106: return (ADRESH);
  1557  0079C4  50C4               	movf	4036,w,c	;volatile
  1558  0079C6  0012               	return	
  1559  0079C8                     __end_of_adConvert:
  1560                           	opt stack 0
  1561                           tblptru	equ	0xFF8
  1562                           tblptrh	equ	0xFF7
  1563                           tblptrl	equ	0xFF6
  1564                           tablat	equ	0xFF5
  1565                           prodl	equ	0xFF3
  1566                           postinc0	equ	0xFEE
  1567                           wreg	equ	0xFE8
  1568                           postdec1	equ	0xFE5
  1569                           fsr1l	equ	0xFE1
  1570                           status	equ	0xFD8
  1571                           
  1572 ;; *************** function _commands *****************
  1573 ;; Defined at:
  1574 ;;		line 306 in file "Hand.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;		None
  1577 ;; Auto vars:     Size  Location     Type
  1578 ;;		None
  1579 ;; Return value:  Size  Location     Type
  1580 ;;                  1    wreg      void 
  1581 ;; Registers used:
  1582 ;;		wreg, status,2, status,0, cstack
  1583 ;; Tracked objects:
  1584 ;;		On entry : 0/0
  1585 ;;		On exit  : 0/0
  1586 ;;		Unchanged: 0/0
  1587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1588 ;;      Params:         0       0       0       0       0       0       0       0       0
  1589 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1590 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1591 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1592 ;;Total ram usage:        0 bytes
  1593 ;; Hardware stack levels used:    1
  1594 ;; Hardware stack levels required when called:    1
  1595 ;; This function calls:
  1596 ;;		_setPos
  1597 ;; This function is called by:
  1598 ;;		_main
  1599 ;; This function uses a non-reentrant model
  1600 ;;
  1601                           
  1602                           	psect	text11
  1603  007EBC                     __ptext11:
  1604                           	opt stack 0
  1605  007EBC                     _commands:
  1606                           	opt stack 29
  1607                           
  1608                           ;Hand.c: 312: if (PORTEbits.RE3 == 0 && !modeSelect) {
  1609                           
  1610                           ;incstack = 0
  1611  007EBC  B684               	btfsc	3972,3,c	;volatile
  1612  007EBE  D005               	goto	l1443
  1613  007EC0  500E               	movf	_modeSelect,w,c
  1614  007EC2  A4D8               	btfss	status,2,c
  1615  007EC4  D002               	goto	l1443
  1616                           
  1617                           ;Hand.c: 313: isPressedForGesture = 1;
  1618  007EC6  0E01               	movlw	1
  1619  007EC8  6E0C               	movwf	_isPressedForGesture,c
  1620  007ECA                     l1443:
  1621                           
  1622                           ;Hand.c: 314: }
  1623                           ;Hand.c: 315: if (PORTEbits.RE3 == 1 && isPressedForGesture && !modeSelect) {
  1624  007ECA  A684               	btfss	3972,3,c	;volatile
  1625  007ECC  0012               	return	
  1626  007ECE  500C               	movf	_isPressedForGesture,w,c
  1627  007ED0  B4D8               	btfsc	status,2,c
  1628  007ED2  0012               	return	
  1629  007ED4  500E               	movf	_modeSelect,w,c
  1630  007ED6  A4D8               	btfss	status,2,c
  1631  007ED8  0012               	return	
  1632                           
  1633                           ;Hand.c: 316: isPressedForGesture = 0;
  1634  007EDA  0E00               	movlw	0
  1635  007EDC  6E0C               	movwf	_isPressedForGesture,c
  1636                           
  1637                           ;Hand.c: 317: cGesture++;
  1638  007EDE  2A11               	incf	_cGesture,f,c
  1639                           
  1640                           ;Hand.c: 318: if (cGesture == 9)cGesture = 0;
  1641  007EE0  0E09               	movlw	9
  1642  007EE2  1811               	xorwf	_cGesture,w,c
  1643  007EE4  A4D8               	btfss	status,2,c
  1644  007EE6  D06F               	goto	l1477
  1645  007EE8  0E00               	movlw	0
  1646  007EEA  6E11               	movwf	_cGesture,c
  1647                           
  1648                           ;Hand.c: 319: switch (cGesture) {
  1649  007EEC  D06C               	goto	l1477
  1650  007EEE                     l1457:
  1651                           
  1652                           ;Hand.c: 321: setPos(0, 0, 0, 0, 0);
  1653  007EEE  0E00               	movlw	0
  1654  007EF0  6E14               	movwf	setPos@b,c
  1655  007EF2  0E00               	movlw	0
  1656  007EF4  6E15               	movwf	setPos@c,c
  1657  007EF6  0E00               	movlw	0
  1658  007EF8  6E16               	movwf	setPos@d,c
  1659  007EFA  0E00               	movlw	0
  1660  007EFC  6E17               	movwf	setPos@e,c
  1661  007EFE  0E00               	movlw	0
  1662  007F00  ECB8  F03C         	call	_setPos
  1663                           
  1664                           ;Hand.c: 322: break;
  1665  007F04  0012               	return	
  1666  007F06                     l1459:
  1667                           
  1668                           ;Hand.c: 324: setPos(255, 255, 255, 255, 255);
  1669  007F06  0EFF               	movlw	255
  1670  007F08  6E14               	movwf	setPos@b,c
  1671  007F0A  0EFF               	movlw	255
  1672  007F0C  6E15               	movwf	setPos@c,c
  1673  007F0E  0EFF               	movlw	255
  1674  007F10  6E16               	movwf	setPos@d,c
  1675  007F12  0EFF               	movlw	255
  1676  007F14  6E17               	movwf	setPos@e,c
  1677  007F16  0EFF               	movlw	255
  1678  007F18  ECB8  F03C         	call	_setPos
  1679                           
  1680                           ;Hand.c: 325: break;
  1681  007F1C  0012               	return	
  1682  007F1E                     l1461:
  1683                           
  1684                           ;Hand.c: 327: setPos(0, 0, 255, 255, 0);
  1685  007F1E  0E00               	movlw	0
  1686  007F20  6E14               	movwf	setPos@b,c
  1687  007F22  0EFF               	movlw	255
  1688  007F24  6E15               	movwf	setPos@c,c
  1689  007F26  0EFF               	movlw	255
  1690  007F28  6E16               	movwf	setPos@d,c
  1691  007F2A  0E00               	movlw	0
  1692  007F2C  6E17               	movwf	setPos@e,c
  1693  007F2E  0E00               	movlw	0
  1694  007F30  ECB8  F03C         	call	_setPos
  1695                           
  1696                           ;Hand.c: 328: break;
  1697  007F34  0012               	return	
  1698  007F36                     l1463:
  1699                           
  1700                           ;Hand.c: 330: setPos(0, 255, 255, 255, 0);
  1701  007F36  0EFF               	movlw	255
  1702  007F38  6E14               	movwf	setPos@b,c
  1703  007F3A  0EFF               	movlw	255
  1704  007F3C  6E15               	movwf	setPos@c,c
  1705  007F3E  0EFF               	movlw	255
  1706  007F40  6E16               	movwf	setPos@d,c
  1707  007F42  0E00               	movlw	0
  1708  007F44  6E17               	movwf	setPos@e,c
  1709  007F46  0E00               	movlw	0
  1710  007F48  ECB8  F03C         	call	_setPos
  1711                           
  1712                           ;Hand.c: 331: break;
  1713  007F4C  0012               	return	
  1714  007F4E                     l1465:
  1715                           
  1716                           ;Hand.c: 333: setPos(200, 0, 0, 255, 255);
  1717  007F4E  0E00               	movlw	0
  1718  007F50  6E14               	movwf	setPos@b,c
  1719  007F52  0E00               	movlw	0
  1720  007F54  6E15               	movwf	setPos@c,c
  1721  007F56  0EFF               	movlw	255
  1722  007F58  6E16               	movwf	setPos@d,c
  1723  007F5A  0EFF               	movlw	255
  1724  007F5C  6E17               	movwf	setPos@e,c
  1725  007F5E  0EC8               	movlw	200
  1726  007F60  ECB8  F03C         	call	_setPos
  1727                           
  1728                           ;Hand.c: 334: break;
  1729  007F64  0012               	return	
  1730  007F66                     l1467:
  1731                           
  1732                           ;Hand.c: 336: setPos(200, 200, 0, 0, 0);
  1733  007F66  0EC8               	movlw	200
  1734  007F68  6E14               	movwf	setPos@b,c
  1735  007F6A  0E00               	movlw	0
  1736  007F6C  6E15               	movwf	setPos@c,c
  1737  007F6E  0E00               	movlw	0
  1738  007F70  6E16               	movwf	setPos@d,c
  1739  007F72  0E00               	movlw	0
  1740  007F74  6E17               	movwf	setPos@e,c
  1741  007F76  0EC8               	movlw	200
  1742  007F78  ECB8  F03C         	call	_setPos
  1743                           
  1744                           ;Hand.c: 337: break;
  1745  007F7C  0012               	return	
  1746  007F7E                     l1469:
  1747                           
  1748                           ;Hand.c: 339: setPos(0, 255, 255, 255, 255);
  1749  007F7E  0EFF               	movlw	255
  1750  007F80  6E14               	movwf	setPos@b,c
  1751  007F82  0EFF               	movlw	255
  1752  007F84  6E15               	movwf	setPos@c,c
  1753  007F86  0EFF               	movlw	255
  1754  007F88  6E16               	movwf	setPos@d,c
  1755  007F8A  0EFF               	movlw	255
  1756  007F8C  6E17               	movwf	setPos@e,c
  1757  007F8E  0E00               	movlw	0
  1758  007F90  ECB8  F03C         	call	_setPos
  1759                           
  1760                           ;Hand.c: 340: break;
  1761  007F94  0012               	return	
  1762  007F96                     l1471:
  1763                           
  1764                           ;Hand.c: 342: setPos(255, 0, 255, 255, 255);
  1765  007F96  0E00               	movlw	0
  1766  007F98  6E14               	movwf	setPos@b,c
  1767  007F9A  0EFF               	movlw	255
  1768  007F9C  6E15               	movwf	setPos@c,c
  1769  007F9E  0EFF               	movlw	255
  1770  007FA0  6E16               	movwf	setPos@d,c
  1771  007FA2  0EFF               	movlw	255
  1772  007FA4  6E17               	movwf	setPos@e,c
  1773  007FA6  0EFF               	movlw	255
  1774  007FA8  ECB8  F03C         	call	_setPos
  1775                           
  1776                           ;Hand.c: 343: break;
  1777  007FAC  0012               	return	
  1778  007FAE                     l1473:
  1779                           
  1780                           ;Hand.c: 345: setPos(255, 0, 255, 255, 0);
  1781  007FAE  0E00               	movlw	0
  1782  007FB0  6E14               	movwf	setPos@b,c
  1783  007FB2  0EFF               	movlw	255
  1784  007FB4  6E15               	movwf	setPos@c,c
  1785  007FB6  0EFF               	movlw	255
  1786  007FB8  6E16               	movwf	setPos@d,c
  1787  007FBA  0E00               	movlw	0
  1788  007FBC  6E17               	movwf	setPos@e,c
  1789  007FBE  0EFF               	movlw	255
  1790  007FC0  ECB8  F03C         	call	_setPos
  1791                           
  1792                           ;Hand.c: 349: }
  1793                           
  1794                           ;Hand.c: 348: break;
  1795                           
  1796                           ;Hand.c: 347: default:
  1797                           
  1798                           ;Hand.c: 346: break;
  1799  007FC4  0012               	return	
  1800  007FC6                     l1477:
  1801  007FC6  5011               	movf	_cGesture,w,c
  1802                           
  1803                           ; Switch size 1, requested type "space"
  1804                           ; Number of cases is 9, Range of values is 0 to 8
  1805                           ; switch strategies available:
  1806                           ; Name         Instructions Cycles
  1807                           ; simple_byte           28    15 (average)
  1808                           ;	Chosen strategy is simple_byte
  1809  007FC8  0A00               	xorlw	0	; case 0
  1810  007FCA  B4D8               	btfsc	status,2,c
  1811  007FCC  D790               	goto	l1457
  1812  007FCE  0A01               	xorlw	1	; case 1
  1813  007FD0  B4D8               	btfsc	status,2,c
  1814  007FD2  D799               	goto	l1459
  1815  007FD4  0A03               	xorlw	3	; case 2
  1816  007FD6  B4D8               	btfsc	status,2,c
  1817  007FD8  D7A2               	goto	l1461
  1818  007FDA  0A01               	xorlw	1	; case 3
  1819  007FDC  B4D8               	btfsc	status,2,c
  1820  007FDE  D7AB               	goto	l1463
  1821  007FE0  0A07               	xorlw	7	; case 4
  1822  007FE2  B4D8               	btfsc	status,2,c
  1823  007FE4  D7B4               	goto	l1465
  1824  007FE6  0A01               	xorlw	1	; case 5
  1825  007FE8  B4D8               	btfsc	status,2,c
  1826  007FEA  D7BD               	goto	l1467
  1827  007FEC  0A03               	xorlw	3	; case 6
  1828  007FEE  B4D8               	btfsc	status,2,c
  1829  007FF0  D7C6               	goto	l1469
  1830  007FF2  0A01               	xorlw	1	; case 7
  1831  007FF4  B4D8               	btfsc	status,2,c
  1832  007FF6  D7CF               	goto	l1471
  1833  007FF8  0A0F               	xorlw	15	; case 8
  1834  007FFA  A4D8               	btfss	status,2,c
  1835  007FFC  0012               	return	
  1836  007FFE  D7D7               	goto	l1473
  1837  008000                     __end_of_commands:
  1838                           	opt stack 0
  1839                           tblptru	equ	0xFF8
  1840                           tblptrh	equ	0xFF7
  1841                           tblptrl	equ	0xFF6
  1842                           tablat	equ	0xFF5
  1843                           prodl	equ	0xFF3
  1844                           postinc0	equ	0xFEE
  1845                           wreg	equ	0xFE8
  1846                           postdec1	equ	0xFE5
  1847                           fsr1l	equ	0xFE1
  1848                           status	equ	0xFD8
  1849                           
  1850 ;; *************** function _checkMode *****************
  1851 ;; Defined at:
  1852 ;;		line 115 in file "Hand.c"
  1853 ;; Parameters:    Size  Location     Type
  1854 ;;		None
  1855 ;; Auto vars:     Size  Location     Type
  1856 ;;  i               1   12[COMRAM] unsigned char 
  1857 ;;  i               1   11[COMRAM] unsigned char 
  1858 ;;  cTempMode       1   13[COMRAM] unsigned char 
  1859 ;; Return value:  Size  Location     Type
  1860 ;;                  1    wreg      unsigned char 
  1861 ;; Registers used:
  1862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1863 ;; Tracked objects:
  1864 ;;		On entry : 0/0
  1865 ;;		On exit  : 0/0
  1866 ;;		Unchanged: 0/0
  1867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1868 ;;      Params:         0       0       0       0       0       0       0       0       0
  1869 ;;      Locals:         7       0       0       0       0       0       0       0       0
  1870 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1871 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1872 ;;Total ram usage:        7 bytes
  1873 ;; Hardware stack levels used:    1
  1874 ;; Hardware stack levels required when called:    1
  1875 ;; This function calls:
  1876 ;;		_beep
  1877 ;;		_setPos
  1878 ;; This function is called by:
  1879 ;;		_main
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           	psect	text12
  1884  007D7C                     __ptext12:
  1885                           	opt stack 0
  1886  007D7C                     _checkMode:
  1887                           	opt stack 29
  1888                           
  1889                           ;Hand.c: 116: unsigned char cTempMode = cMode;
  1890                           
  1891                           ;incstack = 0
  1892  007D7C  C013  F021         	movff	_cMode,checkMode@cTempMode
  1893                           
  1894                           ;Hand.c: 117: if (PORTEbits.RE3 == 0) {
  1895  007D80  B684               	btfsc	3972,3,c	;volatile
  1896  007D82  D085               	goto	l74
  1897                           
  1898                           ;Hand.c: 118: isPressedForMode = 1;
  1899  007D84  0E01               	movlw	1
  1900  007D86  6E0D               	movwf	_isPressedForMode,c
  1901                           
  1902                           ;Hand.c: 119: if (!modeSelect && buttonWasLetGo) {
  1903  007D88  500E               	movf	_modeSelect,w,c
  1904  007D8A  A4D8               	btfss	status,2,c
  1905  007D8C  D036               	goto	l1375
  1906  007D8E  500B               	movf	_buttonWasLetGo,w,c
  1907  007D90  B4D8               	btfsc	status,2,c
  1908  007D92  D033               	goto	l1375
  1909                           
  1910                           ;Hand.c: 120: cDelay++;
  1911  007D94  2A12               	incf	_cDelay,f,c
  1912                           
  1913                           ;Hand.c: 121: if (cDelay == 20) {
  1914  007D96  0E14               	movlw	20
  1915  007D98  1812               	xorwf	_cDelay,w,c
  1916  007D9A  A4D8               	btfss	status,2,c
  1917  007D9C  D078               	goto	l74
  1918                           
  1919                           ;Hand.c: 122: cDelay = 0;
  1920  007D9E  0E00               	movlw	0
  1921  007DA0  6E12               	movwf	_cDelay,c
  1922                           
  1923                           ;Hand.c: 123: modeSelect = 1;
  1924  007DA2  0E01               	movlw	1
  1925  007DA4  6E0E               	movwf	_modeSelect,c
  1926                           
  1927                           ;Hand.c: 124: buttonWasLetGo = 0;
  1928  007DA6  0E00               	movlw	0
  1929  007DA8  6E0B               	movwf	_buttonWasLetGo,c
  1930                           
  1931                           ;Hand.c: 125: beep(200, 500);
  1932  007DAA  0E00               	movlw	0
  1933  007DAC  6E15               	movwf	beep@pitch+1,c
  1934  007DAE  0EC8               	movlw	200
  1935  007DB0  6E14               	movwf	beep@pitch,c
  1936  007DB2  0E01               	movlw	1
  1937  007DB4  6E17               	movwf	beep@duration+1,c
  1938  007DB6  0EF4               	movlw	244
  1939  007DB8  6E16               	movwf	beep@duration,c
  1940  007DBA  EC35  F03D         	call	_beep	;wreg free
  1941                           
  1942                           ;Hand.c: 126: for (unsigned char i = 0; i < 5; i++) {
  1943  007DBE  0E00               	movlw	0
  1944  007DC0  6E1F               	movwf	checkMode@i,c
  1945  007DC2                     l1359:
  1946  007DC2  0E04               	movlw	4
  1947  007DC4  641F               	cpfsgt	checkMode@i,c
  1948  007DC6  D001               	goto	l1363
  1949  007DC8  D062               	goto	l74
  1950  007DCA                     l1363:
  1951                           
  1952                           ;Hand.c: 127: arcPos[i] = (cTempMode == i) ? 255 : 0;
  1953  007DCA  501F               	movf	checkMode@i,w,c
  1954  007DCC  1821               	xorwf	checkMode@cTempMode,w,c
  1955  007DCE  B4D8               	btfsc	status,2,c
  1956  007DD0  D005               	goto	l1367
  1957  007DD2  0E00               	movlw	0
  1958  007DD4  6E1C               	movwf	_checkMode$192+1,c
  1959  007DD6  0E00               	movlw	0
  1960  007DD8  6E1B               	movwf	_checkMode$192,c
  1961  007DDA  D003               	goto	l1369
  1962  007DDC                     l1367:
  1963  007DDC  0E00               	movlw	0
  1964  007DDE  6E1C               	movwf	_checkMode$192+1,c
  1965  007DE0  681B               	setf	_checkMode$192,c
  1966  007DE2                     l1369:
  1967  007DE2  501F               	movf	checkMode@i,w,c
  1968  007DE4  0D01               	mullw	1
  1969  007DE6  0E01               	movlw	low _arcPos
  1970  007DE8  24F3               	addwf	prodl,w,c
  1971  007DEA  6ED9               	movwf	fsr2l,c
  1972  007DEC  0E00               	movlw	high _arcPos
  1973  007DEE  20F4               	addwfc	prodh,w,c
  1974  007DF0  6EDA               	movwf	fsr2h,c
  1975  007DF2  C01B  FFDF         	movff	_checkMode$192,indf2
  1976  007DF6  2A1F               	incf	checkMode@i,f,c
  1977  007DF8  D7E4               	goto	l1359
  1978  007DFA                     l1375:
  1979  007DFA  500B               	movf	_buttonWasLetGo,w,c
  1980  007DFC  B4D8               	btfsc	status,2,c
  1981  007DFE  D047               	goto	l74
  1982                           
  1983                           ;Hand.c: 131: cDelay++;
  1984  007E00  2A12               	incf	_cDelay,f,c
  1985                           
  1986                           ;Hand.c: 132: if (cDelay == 20) {
  1987  007E02  0E14               	movlw	20
  1988  007E04  1812               	xorwf	_cDelay,w,c
  1989  007E06  A4D8               	btfss	status,2,c
  1990  007E08  D024               	goto	l1395
  1991                           
  1992                           ;Hand.c: 133: cDelay = 0;
  1993  007E0A  0E00               	movlw	0
  1994  007E0C  6E12               	movwf	_cDelay,c
  1995                           
  1996                           ;Hand.c: 134: modeSelect = 0;
  1997  007E0E  0E00               	movlw	0
  1998  007E10  6E0E               	movwf	_modeSelect,c
  1999                           
  2000                           ;Hand.c: 135: buttonWasLetGo = 0;
  2001  007E12  0E00               	movlw	0
  2002  007E14  6E0B               	movwf	_buttonWasLetGo,c
  2003                           
  2004                           ;Hand.c: 136: beep(400, 500);
  2005  007E16  0E01               	movlw	1
  2006  007E18  6E15               	movwf	beep@pitch+1,c
  2007  007E1A  0E90               	movlw	144
  2008  007E1C  6E14               	movwf	beep@pitch,c
  2009  007E1E  0E01               	movlw	1
  2010  007E20  6E17               	movwf	beep@duration+1,c
  2011  007E22  0EF4               	movlw	244
  2012  007E24  6E16               	movwf	beep@duration,c
  2013  007E26  EC35  F03D         	call	_beep	;wreg free
  2014                           
  2015                           ;Hand.c: 137: cTempMode--;
  2016  007E2A  0621               	decf	checkMode@cTempMode,f,c
  2017                           
  2018                           ;Hand.c: 138: if (cTempMode == 0) {
  2019  007E2C  5021               	movf	checkMode@cTempMode,w,c
  2020  007E2E  A4D8               	btfss	status,2,c
  2021  007E30  D002               	goto	l1391
  2022                           
  2023                           ;Hand.c: 139: calibMode = 1;
  2024  007E32  0E01               	movlw	1
  2025  007E34  D001               	goto	L1
  2026  007E36                     l1391:
  2027                           
  2028                           ;Hand.c: 141: calibMode = 0;
  2029  007E36  0E00               	movlw	0
  2030  007E38                     L1:
  2031  007E38  6E0A               	movwf	_calibMode,c
  2032                           
  2033                           ;Hand.c: 142: }
  2034                           ;Hand.c: 143: setPos(0, 0, 0, 0, 0);
  2035  007E3A  0E00               	movlw	0
  2036  007E3C  6E14               	movwf	setPos@b,c
  2037  007E3E  0E00               	movlw	0
  2038  007E40  6E15               	movwf	setPos@c,c
  2039  007E42  0E00               	movlw	0
  2040  007E44  6E16               	movwf	setPos@d,c
  2041  007E46  0E00               	movlw	0
  2042  007E48  6E17               	movwf	setPos@e,c
  2043  007E4A  0E00               	movlw	0
  2044  007E4C  ECB8  F03C         	call	_setPos
  2045                           
  2046                           ;Hand.c: 144: } else {
  2047  007E50  D01E               	goto	l74
  2048  007E52                     l1395:
  2049                           
  2050                           ;Hand.c: 145: for (unsigned char i = 0; i < 5; i++) {
  2051  007E52  0E00               	movlw	0
  2052  007E54  6E20               	movwf	checkMode@i_193,c
  2053  007E56                     l1397:
  2054  007E56  0E04               	movlw	4
  2055  007E58  6420               	cpfsgt	checkMode@i_193,c
  2056  007E5A  D001               	goto	l1401
  2057  007E5C  D018               	goto	l74
  2058  007E5E                     l1401:
  2059                           
  2060                           ;Hand.c: 146: arcPos[i] = (cTempMode == i) ? 255 : 0;
  2061  007E5E  5020               	movf	checkMode@i_193,w,c
  2062  007E60  1821               	xorwf	checkMode@cTempMode,w,c
  2063  007E62  B4D8               	btfsc	status,2,c
  2064  007E64  D005               	goto	l1405
  2065  007E66  0E00               	movlw	0
  2066  007E68  6E1E               	movwf	_checkMode$194+1,c
  2067  007E6A  0E00               	movlw	0
  2068  007E6C  6E1D               	movwf	_checkMode$194,c
  2069  007E6E  D003               	goto	l1407
  2070  007E70                     l1405:
  2071  007E70  0E00               	movlw	0
  2072  007E72  6E1E               	movwf	_checkMode$194+1,c
  2073  007E74  681D               	setf	_checkMode$194,c
  2074  007E76                     l1407:
  2075  007E76  5020               	movf	checkMode@i_193,w,c
  2076  007E78  0D01               	mullw	1
  2077  007E7A  0E01               	movlw	low _arcPos
  2078  007E7C  24F3               	addwf	prodl,w,c
  2079  007E7E  6ED9               	movwf	fsr2l,c
  2080  007E80  0E00               	movlw	high _arcPos
  2081  007E82  20F4               	addwfc	prodh,w,c
  2082  007E84  6EDA               	movwf	fsr2h,c
  2083  007E86  C01D  FFDF         	movff	_checkMode$194,indf2
  2084  007E8A  2A20               	incf	checkMode@i_193,f,c
  2085  007E8C  D7E4               	goto	l1397
  2086  007E8E                     l74:
  2087                           
  2088                           ;Hand.c: 147: }
  2089                           ;Hand.c: 148: }
  2090                           ;Hand.c: 149: }
  2091                           ;Hand.c: 150: }
  2092                           ;Hand.c: 152: if (PORTEbits.RE3 == 1) {
  2093  007E8E  A684               	btfss	3972,3,c	;volatile
  2094  007E90  D013               	goto	l95
  2095                           
  2096                           ;Hand.c: 153: if (isPressedForMode && modeSelect) {
  2097  007E92  500D               	movf	_isPressedForMode,w,c
  2098  007E94  B4D8               	btfsc	status,2,c
  2099  007E96  D00A               	goto	l96
  2100  007E98  500E               	movf	_modeSelect,w,c
  2101  007E9A  B4D8               	btfsc	status,2,c
  2102  007E9C  D007               	goto	l96
  2103                           
  2104                           ;Hand.c: 154: cTempMode++;
  2105  007E9E  2A21               	incf	checkMode@cTempMode,f,c
  2106                           
  2107                           ;Hand.c: 155: if (cTempMode == 5)cTempMode = 0;
  2108  007EA0  0E05               	movlw	5
  2109  007EA2  1821               	xorwf	checkMode@cTempMode,w,c
  2110  007EA4  A4D8               	btfss	status,2,c
  2111  007EA6  D002               	goto	l96
  2112  007EA8  0E00               	movlw	0
  2113  007EAA  6E21               	movwf	checkMode@cTempMode,c
  2114  007EAC                     l96:
  2115                           
  2116                           ;Hand.c: 156: }
  2117                           ;Hand.c: 157: buttonWasLetGo = 1;
  2118  007EAC  0E01               	movlw	1
  2119  007EAE  6E0B               	movwf	_buttonWasLetGo,c
  2120                           
  2121                           ;Hand.c: 158: cDelay = 0;
  2122  007EB0  0E00               	movlw	0
  2123  007EB2  6E12               	movwf	_cDelay,c
  2124                           
  2125                           ;Hand.c: 159: isPressedForMode = 0;
  2126  007EB4  0E00               	movlw	0
  2127  007EB6  6E0D               	movwf	_isPressedForMode,c
  2128  007EB8                     l95:
  2129                           
  2130                           ;Hand.c: 160: }
  2131                           ;Hand.c: 161: return cTempMode;
  2132  007EB8  5021               	movf	checkMode@cTempMode,w,c
  2133  007EBA  0012               	return	
  2134  007EBC                     __end_of_checkMode:
  2135                           	opt stack 0
  2136                           tblptru	equ	0xFF8
  2137                           tblptrh	equ	0xFF7
  2138                           tblptrl	equ	0xFF6
  2139                           tablat	equ	0xFF5
  2140                           prodh	equ	0xFF4
  2141                           prodl	equ	0xFF3
  2142                           postinc0	equ	0xFEE
  2143                           wreg	equ	0xFE8
  2144                           postdec1	equ	0xFE5
  2145                           fsr1l	equ	0xFE1
  2146                           indf2	equ	0xFDF
  2147                           fsr2h	equ	0xFDA
  2148                           fsr2l	equ	0xFD9
  2149                           status	equ	0xFD8
  2150                           
  2151 ;; *************** function _setPos *****************
  2152 ;; Defined at:
  2153 ;;		line 46 in file "Hand.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;  a               1    wreg     unsigned char 
  2156 ;;  b               1    0[COMRAM] unsigned char 
  2157 ;;  c               1    1[COMRAM] unsigned char 
  2158 ;;  d               1    2[COMRAM] unsigned char 
  2159 ;;  e               1    3[COMRAM] unsigned char 
  2160 ;; Auto vars:     Size  Location     Type
  2161 ;;  a               1    4[COMRAM] unsigned char 
  2162 ;; Return value:  Size  Location     Type
  2163 ;;                  1    wreg      void 
  2164 ;; Registers used:
  2165 ;;		wreg
  2166 ;; Tracked objects:
  2167 ;;		On entry : 0/0
  2168 ;;		On exit  : 0/0
  2169 ;;		Unchanged: 0/0
  2170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2171 ;;      Params:         4       0       0       0       0       0       0       0       0
  2172 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2173 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2174 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2175 ;;Total ram usage:        5 bytes
  2176 ;; Hardware stack levels used:    1
  2177 ;; This function calls:
  2178 ;;		Nothing
  2179 ;; This function is called by:
  2180 ;;		_initVariables
  2181 ;;		_checkMode
  2182 ;;		_commands
  2183 ;;		_heyKidWantSomeCandy
  2184 ;; This function uses a non-reentrant model
  2185 ;;
  2186                           
  2187                           	psect	text13
  2188  007970                     __ptext13:
  2189                           	opt stack 0
  2190  007970                     _setPos:
  2191                           	opt stack 29
  2192                           
  2193                           ;incstack = 0
  2194                           ;setPos@a stored from wreg
  2195  007970  6E18               	movwf	setPos@a,c
  2196                           
  2197                           ;Hand.c: 47: arcPos[0] = a;
  2198  007972  C018  F001         	movff	setPos@a,_arcPos
  2199                           
  2200                           ;Hand.c: 48: arcPos[1] = b;
  2201  007976  C014  F002         	movff	setPos@b,_arcPos+1
  2202                           
  2203                           ;Hand.c: 49: arcPos[2] = c;
  2204  00797A  C015  F003         	movff	setPos@c,_arcPos+2
  2205                           
  2206                           ;Hand.c: 50: arcPos[3] = d;
  2207  00797E  C016  F004         	movff	setPos@d,_arcPos+3
  2208                           
  2209                           ;Hand.c: 51: arcPos[4] = e;
  2210  007982  C017  F005         	movff	setPos@e,_arcPos+4
  2211  007986  0012               	return		;funcret
  2212  007988                     __end_of_setPos:
  2213                           	opt stack 0
  2214                           tblptru	equ	0xFF8
  2215                           tblptrh	equ	0xFF7
  2216                           tblptrl	equ	0xFF6
  2217                           tablat	equ	0xFF5
  2218                           prodh	equ	0xFF4
  2219                           prodl	equ	0xFF3
  2220                           postinc0	equ	0xFEE
  2221                           wreg	equ	0xFE8
  2222                           postdec1	equ	0xFE5
  2223                           fsr1l	equ	0xFE1
  2224                           indf2	equ	0xFDF
  2225                           fsr2h	equ	0xFDA
  2226                           fsr2l	equ	0xFD9
  2227                           status	equ	0xFD8
  2228                           
  2229 ;; *************** function _beep *****************
  2230 ;; Defined at:
  2231 ;;		line 59 in file "Hand.c"
  2232 ;; Parameters:    Size  Location     Type
  2233 ;;  pitch           2    0[COMRAM] unsigned int 
  2234 ;;  duration        2    2[COMRAM] unsigned int 
  2235 ;; Auto vars:     Size  Location     Type
  2236 ;;  j               2    5[COMRAM] unsigned int 
  2237 ;; Return value:  Size  Location     Type
  2238 ;;                  1    wreg      void 
  2239 ;; Registers used:
  2240 ;;		wreg, status,2, status,0
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2246 ;;      Params:         4       0       0       0       0       0       0       0       0
  2247 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2248 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2249 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2250 ;;Total ram usage:        7 bytes
  2251 ;; Hardware stack levels used:    1
  2252 ;; This function calls:
  2253 ;;		Nothing
  2254 ;; This function is called by:
  2255 ;;		_checkMode
  2256 ;;		_calibrate
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260                           	psect	text14
  2261  007A6A                     __ptext14:
  2262                           	opt stack 0
  2263  007A6A                     _beep:
  2264                           	opt stack 29
  2265  007A6A                     l1259:
  2266  007A6A  5016               	movf	beep@duration,w,c
  2267  007A6C  1017               	iorwf	beep@duration+1,w,c
  2268  007A6E  B4D8               	btfsc	status,2,c
  2269  007A70  0012               	return	
  2270                           
  2271                           ;Hand.c: 61: LATAbits.LATA6 = !LATAbits.LATA6;
  2272  007A72  BC89               	btfsc	3977,6,c	;volatile
  2273  007A74  D003               	goto	u720
  2274  007A76  6A18               	clrf	??_beep& (0+255),c
  2275  007A78  2A18               	incf	??_beep& (0+255),f,c
  2276  007A7A  D001               	goto	u738
  2277  007A7C                     u720:
  2278  007A7C  6A18               	clrf	??_beep& (0+255),c
  2279  007A7E                     u738:
  2280  007A7E  3A18               	swapf	??_beep,f,c
  2281  007A80  4618               	rlncf	??_beep,f,c
  2282  007A82  4618               	rlncf	??_beep,f,c
  2283  007A84  5089               	movf	3977,w,c	;volatile
  2284  007A86  1818               	xorwf	??_beep,w,c
  2285  007A88  0BBF               	andlw	-65
  2286  007A8A  1818               	xorwf	??_beep,w,c
  2287  007A8C  6E89               	movwf	3977,c	;volatile
  2288                           
  2289                           ;Hand.c: 62: for (unsigned int j = pitch; j != 0; j--);
  2290  007A8E  C014  F019         	movff	beep@pitch,beep@j
  2291  007A92  C015  F01A         	movff	beep@pitch+1,beep@j+1
  2292  007A96  5019               	movf	beep@j,w,c
  2293  007A98  101A               	iorwf	beep@j+1,w,c
  2294  007A9A  B4D8               	btfsc	status,2,c
  2295  007A9C  D004               	goto	l1273
  2296  007A9E  0619               	decf	beep@j,f,c
  2297  007AA0  A0D8               	btfss	status,0,c
  2298  007AA2  061A               	decf	beep@j+1,f,c
  2299  007AA4  D7F8               	goto	L2
  2300  007AA6                     l1273:
  2301  007AA6  0616               	decf	beep@duration,f,c
  2302  007AA8  A0D8               	btfss	status,0,c
  2303  007AAA  0617               	decf	beep@duration+1,f,c
  2304  007AAC  D7DE               	goto	l1259
  2305  007AAE                     __end_of_beep:
  2306                           	opt stack 0
  2307  0000                     tblptru	equ	0xFF8
  2308                           tblptrh	equ	0xFF7
  2309                           tblptrl	equ	0xFF6
  2310                           tablat	equ	0xFF5
  2311                           prodh	equ	0xFF4
  2312                           prodl	equ	0xFF3
  2313                           postinc0	equ	0xFEE
  2314                           wreg	equ	0xFE8
  2315                           postdec1	equ	0xFE5
  2316                           fsr1l	equ	0xFE1
  2317                           indf2	equ	0xFDF
  2318                           fsr2h	equ	0xFDA
  2319                           fsr2l	equ	0xFD9
  2320                           status	equ	0xFD8
  2321                           tblptru	equ	0xFF8
  2322                           tblptrh	equ	0xFF7
  2323                           tblptrl	equ	0xFF6
  2324                           tablat	equ	0xFF5
  2325                           prodh	equ	0xFF4
  2326                           prodl	equ	0xFF3
  2327                           postinc0	equ	0xFEE
  2328                           wreg	equ	0xFE8
  2329                           postdec1	equ	0xFE5
  2330                           fsr1l	equ	0xFE1
  2331                           indf2	equ	0xFDF
  2332                           fsr2h	equ	0xFDA
  2333                           fsr2l	equ	0xFD9
  2334                           status	equ	0xFD8
  2335                           
  2336                           	psect	rparam
  2337  0000                     tblptru	equ	0xFF8
  2338                           tblptrh	equ	0xFF7
  2339                           tblptrl	equ	0xFF6
  2340                           tablat	equ	0xFF5
  2341                           prodh	equ	0xFF4
  2342                           prodl	equ	0xFF3
  2343                           postinc0	equ	0xFEE
  2344                           wreg	equ	0xFE8
  2345                           postdec1	equ	0xFE5
  2346                           fsr1l	equ	0xFE1
  2347                           indf2	equ	0xFDF
  2348                           fsr2h	equ	0xFDA
  2349                           fsr2l	equ	0xFD9
  2350                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     14      38
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_checkMode
    _main->_delay
    _initVariables->_setPos
    _heyKidWantSomeCandy->_setPos
    _delay->___awdiv
    _convertSensors->_adConvert
    _commands->_setPos
    _checkMode->_beep

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10092
                          _checkMode
                           _commands
                     _convertSensors
                              _delay
                _heyKidWantSomeCandy
                            _initANA
                            _initOsc
                          _initPorts
                      _initVariables
                        _pulseServos
 ---------------------------------------------------------------------------------
 (1) _pulseServos                                          6     6      0     150
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _initVariables                                        0     0      0    2174
                             _setPos
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initOsc                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initANA                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _heyKidWantSomeCandy                                  0     0      0    2174
                             _setPos
 ---------------------------------------------------------------------------------
 (1) _delay                                                6     6      0     432
                                              8 COMRAM     6     6      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     386
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _convertSensors                                       1     1      0      15
                                              1 COMRAM     1     1      0
                          _adConvert
 ---------------------------------------------------------------------------------
 (2) _adConvert                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _commands                                             0     0      0    2174
                             _setPos
 ---------------------------------------------------------------------------------
 (1) _checkMode                                            7     7      0    2973
                                              7 COMRAM     7     7      0
                               _beep
                             _setPos
 ---------------------------------------------------------------------------------
 (2) _setPos                                               5     1      4    2174
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _beep                                                 7     3      4     457
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _checkMode
     _beep
     _setPos
   _commands
     _setPos
   _convertSensors
     _adConvert
   _delay
     ___awdiv
   _heyKidWantSomeCandy
     _setPos
   _initANA
   _initOsc
   _initPorts
   _initVariables
     _setPos
   _pulseServos

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      E      26       1       40.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      26       6        0.0%
DATA                 0      0      26       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Jun 20 22:51:09 2017

                 _pulseServos 7C94                            l74 7E8E                            l68 79BE  
                          l95 7EB8                            l96 7EAC                            _GO 007E11  
                ___awdiv@sign 0019                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                           l110 7D78  
                         l102 7CC0                           l104 7CEE                           l106 7D1C  
                         l220 796A                           l108 7D4A                  __CFG_CPB$OFF 000000  
                __CFG_CPD$OFF 000000                           u720 7A7C                           u738 7A7E  
                         prod 000FF3                           wreg 000FE8                  __CFG_LVP$OFF 000000  
                        l1041 7CDE                          l1027 7CB0                          l1301 7C56  
                        l1055 7D0C                          l1401 7E5E                          l1313 7C7C  
                        l1083 7D68                          l1405 7E70                          l1317 7C8A  
                        l1309 7C72                          l1069 7D3A                          l1407 7E76  
                        l1273 7AA6                          l1259 7A6A                          l1363 7DCA  
                        l1443 7ECA                          l1291 7C34                          l1531 7B5E  
                        l1523 7B4A                          l1461 7F1E                          l1285 7C24  
                        l1429 7BFA                          l1541 7B84                          l1391 7E36  
                        l1367 7DDC                          l1359 7DC2                          l1375 7DFA  
                        l1471 7F96                          l1463 7F36                          l1543 7B8C  
                        l1527 7B52                          l1535 7B64                          l1369 7DE2  
                        l1473 7FAE                          l1465 7F4E                          l1457 7EEE  
                        l1297 7C4A                          l1529 7B58                          l1537 7B78  
                        l1395 7E52                          l1467 7F66                          l1459 7F06  
                        l1299 7C52                          l1397 7E56                          l1469 7F7E  
                        l1477 7FC6                          l1487 79EE                          _ADON 007E10  
                        u1207 7C9C                          u1217 7CB8                          u1307 7C04  
                        u1227 7CCA                          u1237 7CE6                          _LATA 000F89  
                        _LATB 000F8A                          u1247 7CF8                          _LATC 000F8B  
                        u1257 7D14                          u1267 7D26                          u1277 7D42  
                        u1287 7D54                          u1297 7D70                          _beep 7A6A  
                        _main 7B3A                          indf2 000FDF                          fsr1l 000FE1  
                        fsr2l 000FD9                 __CFG_BORV$190 000000                          prodl 000FF3  
                        start 2000                 __CFG_IESO$OFF 000000                  ___param_bank 000000  
                       ?_beep 0014                         ?_main 0014               __end_of___awdiv 7C94  
                       _T0CON 000FD5               ___awdiv@divisor 0016               ___awdiv@counter 0018  
                       _PORTA 000F80                         _PORTB 000F81                         _PORTC 000F82  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISC 000F94  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
                       _cMode 0013                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000               __end_of_initANA 79A4                __CFG_EBTRB$OFF 000000  
                       _delay 7B94                         beep@j 0019               __end_of_initOsc 7970  
                       tablat 000FF5                         status 000FD8                __CFG_T3CMX$RC0 000000  
              __CFG_MCLRE$OFF 000000               __initialization 79F8                  __end_of_beep 7AAE  
                __end_of_main 7B94                        ??_beep 0018                        ??_main 0022  
__size_of_heyKidWantSomeCandy 0030                 __activetblptr 000002                _convertSensors 7AF2  
      __size_of_initVariables 0044                __CFG_SDOMX$RB3 000000               __CFG_CCP2MX$RC1 000000  
                      ?_delay 0014                        _ADCON0 000FC2                        _ADCON1 000FC1  
                      _ADCON2 000FC0                        _ACTCON 000FB5                        _ADRESH 000FC4  
            ___awdiv@dividend 0014                  pulseServos@i 0015                        _ANSELA 000F5B  
                      _ANSELB 000F5C                        _ANSELC 000F5D                        _OSCCON 000FD3  
                      _PLLRDY 007E97                __CFG_XINST$OFF 000000                        _cDelay 0012  
            __end_of_commands 8000                        _nDelay 0008                     ??___awdiv 0018  
              __CFG_STVREN$ON 000000                        _arcPos 0001                        delay@i 0020  
                      clear_0 7A1E              ___awdiv@quotient 001A        __end_of_convertSensors 7B3A  
                      _setPos 7970                     ??_initANA 0014                     ??_initOsc 0014  
                __pdataCOMRAM 0022                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8            __size_of_adConvert 0024          __CFG_LS48MHZ$SYS48X8 000000  
                  __accesstop 0060       __end_of__initialization 7A24               __CFG_PBADEN$OFF 000000  
         _nCalibrationCounter 0006                 _initVariables 7AAE                 ___rparam_used 000001  
              __pcstackCOMRAM 0014              __CFG_nPWRTEN$OFF 000000            __size_of_checkMode 0140  
               __end_of_delay 7C10                  ?_pulseServos 0014               ?_convertSensors 0014  
         _isPressedForGesture 000C               __CFG_PCLKEN$OFF 000000                __CFG_nLPBOR$ON 000000  
                     ??_delay 001C                ?_initVariables 0014            __size_of_initPorts 003C  
           __CFG_PLLSEL$PLL3X 000000             __end_of_adConvert 79C8               _cCycleIncrement 000F  
                     ?_setPos 0014               __CFG_WDTEN$SWON 000000                       _OSCCON2 000FD2  
                     _OSCTUNE 000F9B             __end_of_checkMode 7EBC                     ?_commands 0014  
         _heyKidWantSomeCandy 79C8                       __Hparam 0000                       __Lparam 0000  
                  checkMode@i 001F                       ___awdiv 7C10                       __pcinit 79F8  
                     __ramtop 0800                    _modeSelect 000E               __size_of_setPos 0018  
                     __ptext0 7B3A                       __ptext1 7C94                       __ptext2 7AAE  
                     __ptext3 7A2E                       __ptext4 795A                       __ptext5 7988  
                     __ptext6 79C8                       __ptext7 7B94                       __ptext8 7C10  
                     __ptext9 7AF2                checkMode@i_193 0020          ?_heyKidWantSomeCandy 0014  
                     _initANA 7988             __end_of_initPorts 7A6A                       _initOsc 795A  
                beep@duration 0016                    ??_commands 0019          end_of_initialization 7A24  
             ??_initVariables 0019                 __Lmediumconst 0000                       setPos@a 0018  
                     setPos@b 0014                       setPos@c 0015                       setPos@d 0016  
                     setPos@e 0017                 _checkMode$192 001B                 _checkMode$194 001D  
                     postdec1 000FE5                       postinc0 000FEE         ??_heyKidWantSomeCandy 0019  
        __size_of_pulseServos 00E8                     _PORTEbits 000F84              ??_convertSensors 0015  
               __pidataCOMRAM 2008                __end_of_setPos 7988           start_initialization 79F8  
              _buttonWasLetGo 000B                     _adConvert 79A4                      ??_setPos 0018  
                 __pbssCOMRAM 0001             _cCountFingerCycle 0010                     _calibMode 000A  
           __size_of_commands 0144                     _checkMode 7D7C                     _arcMinPos 0022  
            _isPressedForMode 000D                      ?___awdiv 0014                     beep@pitch 0014  
                  ?_adConvert 0014                      ?_initANA 0014                      ?_initOsc 0014  
                   _initPorts 7A2E                __size_of_delay 007C                      _LATAbits 000F89  
                    _LATBbits 000F8A                    ?_checkMode 0014              __CFG_WDTPS$32768 000000  
           __CFG_CFGPLLEN$OFF 000000                    ?_initPorts 0014            checkMode@cTempMode 0021  
                   copy_data0 7A0C         __end_of_initVariables 7AF2                      __Hrparam 0000  
            pulseServos@i_205 0016              pulseServos@i_206 0017              pulseServos@i_207 0018  
            pulseServos@i_208 0019                      __Lrparam 0000                      _cGesture 0011  
          __CFG_BOREN$SBORDIS 000000   __end_of_heyKidWantSomeCandy 79F8                 ??_pulseServos 0014  
            __size_of___awdiv 0084                   ??_adConvert 0014              __size_of_initANA 001C  
            __size_of_initOsc 0016                      __ptext10 79A4                      __ptext11 7EBC  
                    __ptext12 7D7C                      __ptext13 7970                      __ptext14 7A6A  
                    _commands 7EBC                 __size_of_beep 0044                 __size_of_main 005A  
                 ??_checkMode 001B           __end_of_pulseServos 7D7C                   ??_initPorts 0014  
               adConvert@chan 0014          __CFG_CPUDIV$NOCLKDIV 000000       __size_of_convertSensors 0048  
          __CFG_FOSC$INTOSCIO 000000  
