

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Jun 18 11:37:21 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21  0000                     
    22                           ; Version 1.41
    23                           ; Generated 25/01/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F25K50 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     _ANSELC	set	3933
    57  0000                     _ANSELB	set	3932
    58  0000                     _ANSELA	set	3931
    59  0000                     _LATBbits	set	3978
    60  0000                     _PORTEbits	set	3972
    61  0000                     _ADRESH	set	4036
    62  0000                     _ADCON2	set	4032
    63  0000                     _ADCON1	set	4033
    64  0000                     _ADCON0	set	4034
    65  0000                     _PORTC	set	3970
    66  0000                     _PORTB	set	3969
    67  0000                     _PORTA	set	3968
    68  0000                     _T0CON	set	4053
    69  0000                     _TRISC	set	3988
    70  0000                     _LATC	set	3979
    71  0000                     _TRISB	set	3987
    72  0000                     _LATB	set	3978
    73  0000                     _TRISA	set	3986
    74  0000                     _LATA	set	3977
    75  0000                     _ACTCON	set	4021
    76  0000                     _OSCCON2	set	4050
    77  0000                     _OSCCON	set	4051
    78  0000                     _OSCTUNE	set	3995
    79  0000                     _GO	set	32273
    80  0000                     _ADON	set	32272
    81  0000                     _PLLRDY	set	32407
    82                           
    83                           ; #config settings
    84  0000                     
    85                           	psect	cinit
    86  007B00                     __pcinit:
    87                           	opt stack 0
    88  007B00                     start_initialization:
    89                           	opt stack 0
    90  007B00                     __initialization:
    91                           	opt stack 0
    92                           
    93                           ; Clear objects allocated to COMRAM (14 bytes)
    94  007B00  EE00  F001         	lfsr	0,__pbssCOMRAM
    95  007B04  0E0E               	movlw	14
    96  007B06                     clear_0:
    97  007B06  6AEE               	clrf	postinc0,c
    98  007B08  06E8               	decf	wreg,f,c
    99  007B0A  E1FD               	bnz	clear_0
   100  007B0C                     end_of_initialization:
   101                           	opt stack 0
   102  007B0C                     __end_of__initialization:
   103                           	opt stack 0
   104  007B0C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   105  007B0E  6EF8               	movwf	tblptru,c
   106  007B10  0100               	movlb	0
   107  007B12  EF43  F03F         	goto	_main	;jump to C main() function
   108                           tblptru	equ	0xFF8
   109                           postinc0	equ	0xFEE
   110                           wreg	equ	0xFE8
   111                           
   112                           	psect	bssCOMRAM
   113  000001                     __pbssCOMRAM:
   114                           	opt stack 0
   115  000001                     _arcPos:
   116                           	opt stack 0
   117  000001                     	ds	5
   118  000006                     _nDelay:
   119                           	opt stack 0
   120  000006                     	ds	2
   121  000008                     _buttonWasLetGo:
   122                           	opt stack 0
   123  000008                     	ds	1
   124  000009                     _isPressedForGesture:
   125                           	opt stack 0
   126  000009                     	ds	1
   127  00000A                     _isPressedForMode:
   128                           	opt stack 0
   129  00000A                     	ds	1
   130  00000B                     _modeSelect:
   131                           	opt stack 0
   132  00000B                     	ds	1
   133  00000C                     _cGesture:
   134                           	opt stack 0
   135  00000C                     	ds	1
   136  00000D                     _cDelay:
   137                           	opt stack 0
   138  00000D                     	ds	1
   139  00000E                     _cMode:
   140                           	opt stack 0
   141  00000E                     	ds	1
   142                           tblptru	equ	0xFF8
   143                           postinc0	equ	0xFEE
   144                           wreg	equ	0xFE8
   145                           
   146                           	psect	cstackCOMRAM
   147  00000F                     __pcstackCOMRAM:
   148                           	opt stack 0
   149  00000F                     ??_pulseServos:
   150  00000F                     ?___awdiv:
   151                           	opt stack 0
   152  00000F                     setPos@b:
   153                           	opt stack 0
   154  00000F                     ___awdiv@dividend:
   155                           	opt stack 0
   156                           
   157                           ; 2 bytes @ 0x0
   158  00000F                     	ds	1
   159  000010                     setPos@c:
   160                           	opt stack 0
   161  000010                     pulseServos@i:
   162                           	opt stack 0
   163                           
   164                           ; 1 bytes @ 0x1
   165  000010                     	ds	1
   166  000011                     setPos@d:
   167                           	opt stack 0
   168  000011                     pulseServos@i_163:
   169                           	opt stack 0
   170  000011                     ___awdiv@divisor:
   171                           	opt stack 0
   172                           
   173                           ; 2 bytes @ 0x2
   174  000011                     	ds	1
   175  000012                     setPos@e:
   176                           	opt stack 0
   177  000012                     pulseServos@i_164:
   178                           	opt stack 0
   179                           
   180                           ; 1 bytes @ 0x3
   181  000012                     	ds	1
   182  000013                     setPos@a:
   183                           	opt stack 0
   184  000013                     pulseServos@i_165:
   185                           	opt stack 0
   186  000013                     ___awdiv@counter:
   187                           	opt stack 0
   188                           
   189                           ; 1 bytes @ 0x4
   190  000013                     	ds	1
   191  000014                     pulseServos@i_166:
   192                           	opt stack 0
   193  000014                     ___awdiv@sign:
   194                           	opt stack 0
   195  000014                     _checkMode$150:
   196                           	opt stack 0
   197                           
   198                           ; 2 bytes @ 0x5
   199  000014                     	ds	1
   200  000015                     ___awdiv@quotient:
   201                           	opt stack 0
   202                           
   203                           ; 2 bytes @ 0x6
   204  000015                     	ds	1
   205  000016                     _checkMode$152:
   206                           	opt stack 0
   207                           
   208                           ; 2 bytes @ 0x7
   209  000016                     	ds	1
   210  000017                     ??_delay:
   211                           
   212                           ; 1 bytes @ 0x8
   213  000017                     	ds	1
   214  000018                     checkMode@i:
   215                           	opt stack 0
   216                           
   217                           ; 1 bytes @ 0x9
   218  000018                     	ds	1
   219  000019                     checkMode@i_151:
   220                           	opt stack 0
   221                           
   222                           ; 1 bytes @ 0xA
   223  000019                     	ds	1
   224  00001A                     checkMode@cTempMode:
   225                           	opt stack 0
   226                           
   227                           ; 1 bytes @ 0xB
   228  00001A                     	ds	1
   229  00001B                     delay@i:
   230                           	opt stack 0
   231                           
   232                           ; 2 bytes @ 0xC
   233  00001B                     	ds	2
   234  00001D                     tblptru	equ	0xFF8
   235                           postinc0	equ	0xFEE
   236                           wreg	equ	0xFE8
   237                           
   238                           ; 1 bytes @ 0xE
   239 ;;
   240 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   241 ;;
   242 ;; *************** function _main *****************
   243 ;; Defined at:
   244 ;;		line 221 in file "Hand.c"
   245 ;; Parameters:    Size  Location     Type
   246 ;;		None
   247 ;; Auto vars:     Size  Location     Type
   248 ;;		None
   249 ;; Return value:  Size  Location     Type
   250 ;;                  2  154[None  ] int 
   251 ;; Registers used:
   252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   253 ;; Tracked objects:
   254 ;;		On entry : 0/0
   255 ;;		On exit  : 0/0
   256 ;;		Unchanged: 0/0
   257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   258 ;;      Params:         0       0       0       0       0       0       0       0       0
   259 ;;      Locals:         0       0       0       0       0       0       0       0       0
   260 ;;      Temps:          0       0       0       0       0       0       0       0       0
   261 ;;      Totals:         0       0       0       0       0       0       0       0       0
   262 ;;Total ram usage:        0 bytes
   263 ;; Hardware stack levels required when called:    2
   264 ;; This function calls:
   265 ;;		_checkMode
   266 ;;		_convertSensors
   267 ;;		_delay
   268 ;;		_initANA
   269 ;;		_initOsc
   270 ;;		_initPorts
   271 ;;		_initVariables
   272 ;;		_pulseServos
   273 ;;		_setPos
   274 ;; This function is called by:
   275 ;;		Startup code after reset
   276 ;; This function uses a non-reentrant model
   277 ;;
   278                           
   279                           	psect	text0
   280  007E86                     __ptext0:
   281                           	opt stack 0
   282  007E86                     _main:
   283                           	opt stack 29
   284                           
   285                           ;Hand.c: 222: initOsc();
   286                           
   287                           ;incstack = 0
   288  007E86  EC75  F03D         	call	_initOsc	;wreg free
   289                           
   290                           ;Hand.c: 223: initPorts();
   291  007E8A  ECBB  F03D         	call	_initPorts	;wreg free
   292                           
   293                           ;Hand.c: 224: initANA();
   294  007E8E  EC97  F03D         	call	_initANA	;wreg free
   295                           
   296                           ;Hand.c: 225: initVariables();
   297  007E92  ECA5  F03D         	call	_initVariables	;wreg free
   298                           
   299                           ;Hand.c: 227: switch (cMode) {
   300                           
   301                           ;Hand.c: 226: while (1) {
   302  007E96  D0A5               	goto	l1266
   303  007E98                     l1222:
   304                           
   305                           ;Hand.c: 229: convertSensors();
   306  007E98  EC02  F010         	call	_convertSensors	;wreg free
   307                           
   308                           ;Hand.c: 230: break;
   309  007E9C  D0A9               	goto	l1268
   310  007E9E                     l159:
   311                           
   312                           ;Hand.c: 237: if (PORTEbits.RE3 == 0 && !modeSelect) {
   313  007E9E  B684               	btfsc	3972,3,c	;volatile
   314  007EA0  D005               	goto	l1228
   315  007EA2  500B               	movf	_modeSelect,w,c
   316  007EA4  A4D8               	btfss	status,2,c
   317  007EA6  D002               	goto	l1228
   318                           
   319                           ;Hand.c: 238: isPressedForGesture = 1;
   320  007EA8  0E01               	movlw	1
   321  007EAA  6E09               	movwf	_isPressedForGesture,c
   322  007EAC                     l1228:
   323                           
   324                           ;Hand.c: 239: }
   325                           ;Hand.c: 240: if (PORTEbits.RE3 == 1 && isPressedForGesture && !modeSelect) {
   326  007EAC  A684               	btfss	3972,3,c	;volatile
   327  007EAE  D0A0               	goto	l1268
   328  007EB0  5009               	movf	_isPressedForGesture,w,c
   329  007EB2  B4D8               	btfsc	status,2,c
   330  007EB4  D09D               	goto	l1268
   331  007EB6  500B               	movf	_modeSelect,w,c
   332  007EB8  A4D8               	btfss	status,2,c
   333  007EBA  D09A               	goto	l1268
   334                           
   335                           ;Hand.c: 241: isPressedForGesture = 0;
   336  007EBC  0E00               	movlw	0
   337  007EBE  6E09               	movwf	_isPressedForGesture,c
   338                           
   339                           ;Hand.c: 242: cGesture++;
   340  007EC0  2A0C               	incf	_cGesture,f,c
   341                           
   342                           ;Hand.c: 243: if (cGesture == 9)cGesture = 0;
   343  007EC2  0E09               	movlw	9
   344  007EC4  180C               	xorwf	_cGesture,w,c
   345  007EC6  A4D8               	btfss	status,2,c
   346  007EC8  D06F               	goto	l1262
   347  007ECA  0E00               	movlw	0
   348  007ECC  6E0C               	movwf	_cGesture,c
   349                           
   350                           ;Hand.c: 244: switch (cGesture) {
   351  007ECE  D06C               	goto	l1262
   352  007ED0                     l1242:
   353                           
   354                           ;Hand.c: 246: setPos(0, 0, 0, 0, 0);
   355  007ED0  0E00               	movlw	0
   356  007ED2  6E0F               	movwf	setPos@b,c
   357  007ED4  0E00               	movlw	0
   358  007ED6  6E10               	movwf	setPos@c,c
   359  007ED8  0E00               	movlw	0
   360  007EDA  6E11               	movwf	setPos@d,c
   361  007EDC  0E00               	movlw	0
   362  007EDE  6E12               	movwf	setPos@e,c
   363  007EE0  0E00               	movlw	0
   364  007EE2  EC8B  F03D         	call	_setPos
   365                           
   366                           ;Hand.c: 247: break;
   367  007EE6  D084               	goto	l1268
   368  007EE8                     l1244:
   369                           
   370                           ;Hand.c: 249: setPos(255, 255, 255, 255, 255);
   371  007EE8  0EFF               	movlw	255
   372  007EEA  6E0F               	movwf	setPos@b,c
   373  007EEC  0EFF               	movlw	255
   374  007EEE  6E10               	movwf	setPos@c,c
   375  007EF0  0EFF               	movlw	255
   376  007EF2  6E11               	movwf	setPos@d,c
   377  007EF4  0EFF               	movlw	255
   378  007EF6  6E12               	movwf	setPos@e,c
   379  007EF8  0EFF               	movlw	255
   380  007EFA  EC8B  F03D         	call	_setPos
   381                           
   382                           ;Hand.c: 250: break;
   383  007EFE  D078               	goto	l1268
   384  007F00                     l1246:
   385                           
   386                           ;Hand.c: 252: setPos(0, 0, 255, 255, 0);
   387  007F00  0E00               	movlw	0
   388  007F02  6E0F               	movwf	setPos@b,c
   389  007F04  0EFF               	movlw	255
   390  007F06  6E10               	movwf	setPos@c,c
   391  007F08  0EFF               	movlw	255
   392  007F0A  6E11               	movwf	setPos@d,c
   393  007F0C  0E00               	movlw	0
   394  007F0E  6E12               	movwf	setPos@e,c
   395  007F10  0E00               	movlw	0
   396  007F12  EC8B  F03D         	call	_setPos
   397                           
   398                           ;Hand.c: 253: break;
   399  007F16  D06C               	goto	l1268
   400  007F18                     l1248:
   401                           
   402                           ;Hand.c: 255: setPos(0, 255, 255, 255, 0);
   403  007F18  0EFF               	movlw	255
   404  007F1A  6E0F               	movwf	setPos@b,c
   405  007F1C  0EFF               	movlw	255
   406  007F1E  6E10               	movwf	setPos@c,c
   407  007F20  0EFF               	movlw	255
   408  007F22  6E11               	movwf	setPos@d,c
   409  007F24  0E00               	movlw	0
   410  007F26  6E12               	movwf	setPos@e,c
   411  007F28  0E00               	movlw	0
   412  007F2A  EC8B  F03D         	call	_setPos
   413                           
   414                           ;Hand.c: 256: break;
   415  007F2E  D060               	goto	l1268
   416  007F30                     l1250:
   417                           
   418                           ;Hand.c: 258: setPos(200, 0, 0, 255, 255);
   419  007F30  0E00               	movlw	0
   420  007F32  6E0F               	movwf	setPos@b,c
   421  007F34  0E00               	movlw	0
   422  007F36  6E10               	movwf	setPos@c,c
   423  007F38  0EFF               	movlw	255
   424  007F3A  6E11               	movwf	setPos@d,c
   425  007F3C  0EFF               	movlw	255
   426  007F3E  6E12               	movwf	setPos@e,c
   427  007F40  0EC8               	movlw	200
   428  007F42  EC8B  F03D         	call	_setPos
   429                           
   430                           ;Hand.c: 259: break;
   431  007F46  D054               	goto	l1268
   432  007F48                     l1252:
   433                           
   434                           ;Hand.c: 261: setPos(200, 200, 0, 0, 0);
   435  007F48  0EC8               	movlw	200
   436  007F4A  6E0F               	movwf	setPos@b,c
   437  007F4C  0E00               	movlw	0
   438  007F4E  6E10               	movwf	setPos@c,c
   439  007F50  0E00               	movlw	0
   440  007F52  6E11               	movwf	setPos@d,c
   441  007F54  0E00               	movlw	0
   442  007F56  6E12               	movwf	setPos@e,c
   443  007F58  0EC8               	movlw	200
   444  007F5A  EC8B  F03D         	call	_setPos
   445                           
   446                           ;Hand.c: 262: break;
   447  007F5E  D048               	goto	l1268
   448  007F60                     l1254:
   449                           
   450                           ;Hand.c: 264: setPos(0, 255, 255, 255, 255);
   451  007F60  0EFF               	movlw	255
   452  007F62  6E0F               	movwf	setPos@b,c
   453  007F64  0EFF               	movlw	255
   454  007F66  6E10               	movwf	setPos@c,c
   455  007F68  0EFF               	movlw	255
   456  007F6A  6E11               	movwf	setPos@d,c
   457  007F6C  0EFF               	movlw	255
   458  007F6E  6E12               	movwf	setPos@e,c
   459  007F70  0E00               	movlw	0
   460  007F72  EC8B  F03D         	call	_setPos
   461                           
   462                           ;Hand.c: 265: break;
   463  007F76  D03C               	goto	l1268
   464  007F78                     l1256:
   465                           
   466                           ;Hand.c: 267: setPos(255, 0, 255, 255, 255);
   467  007F78  0E00               	movlw	0
   468  007F7A  6E0F               	movwf	setPos@b,c
   469  007F7C  0EFF               	movlw	255
   470  007F7E  6E10               	movwf	setPos@c,c
   471  007F80  0EFF               	movlw	255
   472  007F82  6E11               	movwf	setPos@d,c
   473  007F84  0EFF               	movlw	255
   474  007F86  6E12               	movwf	setPos@e,c
   475  007F88  0EFF               	movlw	255
   476  007F8A  EC8B  F03D         	call	_setPos
   477                           
   478                           ;Hand.c: 268: break;
   479  007F8E  D030               	goto	l1268
   480  007F90                     l1258:
   481                           
   482                           ;Hand.c: 270: setPos(255, 0, 255, 255, 0);
   483  007F90  0E00               	movlw	0
   484  007F92  6E0F               	movwf	setPos@b,c
   485  007F94  0EFF               	movlw	255
   486  007F96  6E10               	movwf	setPos@c,c
   487  007F98  0EFF               	movlw	255
   488  007F9A  6E11               	movwf	setPos@d,c
   489  007F9C  0E00               	movlw	0
   490  007F9E  6E12               	movwf	setPos@e,c
   491  007FA0  0EFF               	movlw	255
   492  007FA2  EC8B  F03D         	call	_setPos
   493                           
   494                           ;Hand.c: 274: }
   495                           
   496                           ;Hand.c: 273: break;
   497                           
   498                           ;Hand.c: 272: default:
   499                           
   500                           ;Hand.c: 271: break;
   501  007FA6  D024               	goto	l1268
   502  007FA8                     l1262:
   503  007FA8  500C               	movf	_cGesture,w,c
   504                           
   505                           ; Switch size 1, requested type "space"
   506                           ; Number of cases is 9, Range of values is 0 to 8
   507                           ; switch strategies available:
   508                           ; Name         Instructions Cycles
   509                           ; simple_byte           28    15 (average)
   510                           ;	Chosen strategy is simple_byte
   511  007FAA  0A00               	xorlw	0	; case 0
   512  007FAC  B4D8               	btfsc	status,2,c
   513  007FAE  D790               	goto	l1242
   514  007FB0  0A01               	xorlw	1	; case 1
   515  007FB2  B4D8               	btfsc	status,2,c
   516  007FB4  D799               	goto	l1244
   517  007FB6  0A03               	xorlw	3	; case 2
   518  007FB8  B4D8               	btfsc	status,2,c
   519  007FBA  D7A2               	goto	l1246
   520  007FBC  0A01               	xorlw	1	; case 3
   521  007FBE  B4D8               	btfsc	status,2,c
   522  007FC0  D7AB               	goto	l1248
   523  007FC2  0A07               	xorlw	7	; case 4
   524  007FC4  B4D8               	btfsc	status,2,c
   525  007FC6  D7B4               	goto	l1250
   526  007FC8  0A01               	xorlw	1	; case 5
   527  007FCA  B4D8               	btfsc	status,2,c
   528  007FCC  D7BD               	goto	l1252
   529  007FCE  0A03               	xorlw	3	; case 6
   530  007FD0  B4D8               	btfsc	status,2,c
   531  007FD2  D7C6               	goto	l1254
   532  007FD4  0A01               	xorlw	1	; case 7
   533  007FD6  B4D8               	btfsc	status,2,c
   534  007FD8  D7CF               	goto	l1256
   535  007FDA  0A0F               	xorlw	15	; case 8
   536  007FDC  B4D8               	btfsc	status,2,c
   537  007FDE  D7D8               	goto	l1258
   538                           
   539                           ;Hand.c: 279: }
   540                           
   541                           ;Hand.c: 278: break;
   542                           
   543                           ;Hand.c: 277: default:
   544                           
   545                           ;Hand.c: 275: }
   546                           ;Hand.c: 276: break;
   547  007FE0  D007               	goto	l1268
   548  007FE2                     l1266:
   549  007FE2  500E               	movf	_cMode,w,c
   550                           
   551                           ; Switch size 1, requested type "space"
   552                           ; Number of cases is 2, Range of values is 0 to 1
   553                           ; switch strategies available:
   554                           ; Name         Instructions Cycles
   555                           ; simple_byte            7     4 (average)
   556                           ;	Chosen strategy is simple_byte
   557  007FE4  0A00               	xorlw	0	; case 0
   558  007FE6  B4D8               	btfsc	status,2,c
   559  007FE8  D757               	goto	l1222
   560  007FEA  0A01               	xorlw	1	; case 1
   561  007FEC  B4D8               	btfsc	status,2,c
   562  007FEE  D757               	goto	l159
   563  007FF0                     l1268:
   564                           
   565                           ;Hand.c: 280: pulseServos();
   566  007FF0  EC59  F03E         	call	_pulseServos	;wreg free
   567                           
   568                           ;Hand.c: 281: delay();
   569  007FF4  ECD9  F03D         	call	_delay	;wreg free
   570                           
   571                           ;Hand.c: 282: cMode = checkMode();
   572  007FF8  ECBE  F03E         	call	_checkMode	;wreg free
   573  007FFC  6E0E               	movwf	_cMode,c
   574  007FFE  D7F1               	goto	l1266
   575  008000                     __end_of_main:
   576                           	opt stack 0
   577                           tblptru	equ	0xFF8
   578                           postinc0	equ	0xFEE
   579                           wreg	equ	0xFE8
   580                           status	equ	0xFD8
   581                           
   582 ;; *************** function _pulseServos *****************
   583 ;; Defined at:
   584 ;;		line 154 in file "Hand.c"
   585 ;; Parameters:    Size  Location     Type
   586 ;;		None
   587 ;; Auto vars:     Size  Location     Type
   588 ;;  i               1    5[COMRAM] unsigned char 
   589 ;;  i               1    4[COMRAM] unsigned char 
   590 ;;  i               1    3[COMRAM] unsigned char 
   591 ;;  i               1    2[COMRAM] unsigned char 
   592 ;;  i               1    1[COMRAM] unsigned char 
   593 ;; Return value:  Size  Location     Type
   594 ;;                  1    wreg      void 
   595 ;; Registers used:
   596 ;;		wreg, status,2, status,0
   597 ;; Tracked objects:
   598 ;;		On entry : 0/0
   599 ;;		On exit  : 0/0
   600 ;;		Unchanged: 0/0
   601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   602 ;;      Params:         0       0       0       0       0       0       0       0       0
   603 ;;      Locals:         5       0       0       0       0       0       0       0       0
   604 ;;      Temps:          1       0       0       0       0       0       0       0       0
   605 ;;      Totals:         6       0       0       0       0       0       0       0       0
   606 ;;Total ram usage:        6 bytes
   607 ;; Hardware stack levels used:    1
   608 ;; This function calls:
   609 ;;		Nothing
   610 ;; This function is called by:
   611 ;;		_main
   612 ;; This function uses a non-reentrant model
   613 ;;
   614                           
   615                           	psect	text1
   616  007CB2                     __ptext1:
   617                           	opt stack 0
   618  007CB2                     _pulseServos:
   619                           	opt stack 30
   620                           
   621                           ;Hand.c: 162: LATBbits.LATB7 = 1;
   622                           
   623                           ;incstack = 0
   624  007CB2  8E8A               	bsf	3978,7,c	;volatile
   625                           
   626                           ;Hand.c: 163: _delay((unsigned long)((540)*(48000000/4000000.0)));
   627  007CB4  0E09               	movlw	9
   628  007CB6  6E0F               	movwf	??_pulseServos& (0+255),c
   629  007CB8  0E69               	movlw	105
   630  007CBA                     u737:
   631  007CBA  2EE8               	decfsz	wreg,f,c
   632  007CBC  D7FE               	bra	u737
   633  007CBE  2E0F               	decfsz	??_pulseServos& (0+255),f,c
   634  007CC0  D7FC               	bra	u737
   635  007CC2  F000               	nop	
   636                           
   637                           ;Hand.c: 164: for (unsigned char i = arcPos[0]; i != 0; i--) {
   638  007CC4  C001  F010         	movff	_arcPos,pulseServos@i
   639  007CC8                     l924:
   640  007CC8  5010               	movf	pulseServos@i,w,c
   641  007CCA  B4D8               	btfsc	status,2,c
   642  007CCC  D005               	goto	l138
   643                           
   644                           ;Hand.c: 165: _delay((unsigned long)((6)*(48000000/4000000.0)));
   645  007CCE  0E18               	movlw	24
   646  007CD0                     u747:
   647  007CD0  2EE8               	decfsz	wreg,f,c
   648  007CD2  D7FE               	bra	u747
   649  007CD4  0610               	decf	pulseServos@i,f,c
   650  007CD6  D7F8               	goto	l924
   651  007CD8                     l138:
   652                           
   653                           ;Hand.c: 167: }
   654                           ;Hand.c: 168: LATBbits.LATB7 = 0;
   655  007CD8  9E8A               	bcf	3978,7,c	;volatile
   656                           
   657                           ;Hand.c: 171: LATBbits.LATB6 = 1;
   658  007CDA  8C8A               	bsf	3978,6,c	;volatile
   659                           
   660                           ;Hand.c: 172: _delay((unsigned long)((540)*(48000000/4000000.0)));
   661  007CDC  0E09               	movlw	9
   662  007CDE  6E0F               	movwf	??_pulseServos& (0+255),c
   663  007CE0  0E69               	movlw	105
   664  007CE2                     u757:
   665  007CE2  2EE8               	decfsz	wreg,f,c
   666  007CE4  D7FE               	bra	u757
   667  007CE6  2E0F               	decfsz	??_pulseServos& (0+255),f,c
   668  007CE8  D7FC               	bra	u757
   669  007CEA  F000               	nop	
   670                           
   671                           ;Hand.c: 173: for (unsigned char i = arcPos[1]; i != 0; i--) {
   672  007CEC  C002  F011         	movff	_arcPos+1,pulseServos@i_163
   673  007CF0                     l938:
   674  007CF0  5011               	movf	pulseServos@i_163,w,c
   675  007CF2  B4D8               	btfsc	status,2,c
   676  007CF4  D005               	goto	l140
   677                           
   678                           ;Hand.c: 174: _delay((unsigned long)((6)*(48000000/4000000.0)));
   679  007CF6  0E18               	movlw	24
   680  007CF8                     u767:
   681  007CF8  2EE8               	decfsz	wreg,f,c
   682  007CFA  D7FE               	bra	u767
   683  007CFC  0611               	decf	pulseServos@i_163,f,c
   684  007CFE  D7F8               	goto	l938
   685  007D00                     l140:
   686                           
   687                           ;Hand.c: 175: }
   688                           ;Hand.c: 176: LATBbits.LATB6 = 0;
   689  007D00  9C8A               	bcf	3978,6,c	;volatile
   690                           
   691                           ;Hand.c: 179: LATBbits.LATB5 = 1;
   692  007D02  8A8A               	bsf	3978,5,c	;volatile
   693                           
   694                           ;Hand.c: 180: _delay((unsigned long)((540)*(48000000/4000000.0)));
   695  007D04  0E09               	movlw	9
   696  007D06  6E0F               	movwf	??_pulseServos& (0+255),c
   697  007D08  0E69               	movlw	105
   698  007D0A                     u777:
   699  007D0A  2EE8               	decfsz	wreg,f,c
   700  007D0C  D7FE               	bra	u777
   701  007D0E  2E0F               	decfsz	??_pulseServos& (0+255),f,c
   702  007D10  D7FC               	bra	u777
   703  007D12  F000               	nop	
   704                           
   705                           ;Hand.c: 181: for (unsigned char i = arcPos[2]; i != 0; i--) {
   706  007D14  C003  F012         	movff	_arcPos+2,pulseServos@i_164
   707  007D18                     l952:
   708  007D18  5012               	movf	pulseServos@i_164,w,c
   709  007D1A  B4D8               	btfsc	status,2,c
   710  007D1C  D005               	goto	l142
   711                           
   712                           ;Hand.c: 182: _delay((unsigned long)((6)*(48000000/4000000.0)));
   713  007D1E  0E18               	movlw	24
   714  007D20                     u787:
   715  007D20  2EE8               	decfsz	wreg,f,c
   716  007D22  D7FE               	bra	u787
   717  007D24  0612               	decf	pulseServos@i_164,f,c
   718  007D26  D7F8               	goto	l952
   719  007D28                     l142:
   720                           
   721                           ;Hand.c: 183: }
   722                           ;Hand.c: 184: LATBbits.LATB5 = 0;
   723  007D28  9A8A               	bcf	3978,5,c	;volatile
   724                           
   725                           ;Hand.c: 187: LATBbits.LATB4 = 1;
   726  007D2A  888A               	bsf	3978,4,c	;volatile
   727                           
   728                           ;Hand.c: 188: _delay((unsigned long)((540)*(48000000/4000000.0)));
   729  007D2C  0E09               	movlw	9
   730  007D2E  6E0F               	movwf	??_pulseServos& (0+255),c
   731  007D30  0E69               	movlw	105
   732  007D32                     u797:
   733  007D32  2EE8               	decfsz	wreg,f,c
   734  007D34  D7FE               	bra	u797
   735  007D36  2E0F               	decfsz	??_pulseServos& (0+255),f,c
   736  007D38  D7FC               	bra	u797
   737  007D3A  F000               	nop	
   738                           
   739                           ;Hand.c: 189: for (unsigned char i = arcPos[3]; i != 0; i--) {
   740  007D3C  C004  F013         	movff	_arcPos+3,pulseServos@i_165
   741  007D40                     l966:
   742  007D40  5013               	movf	pulseServos@i_165,w,c
   743  007D42  B4D8               	btfsc	status,2,c
   744  007D44  D005               	goto	l144
   745                           
   746                           ;Hand.c: 190: _delay((unsigned long)((6)*(48000000/4000000.0)));
   747  007D46  0E18               	movlw	24
   748  007D48                     u807:
   749  007D48  2EE8               	decfsz	wreg,f,c
   750  007D4A  D7FE               	bra	u807
   751  007D4C  0613               	decf	pulseServos@i_165,f,c
   752  007D4E  D7F8               	goto	l966
   753  007D50                     l144:
   754                           
   755                           ;Hand.c: 191: }
   756                           ;Hand.c: 192: LATBbits.LATB4 = 0;
   757  007D50  988A               	bcf	3978,4,c	;volatile
   758                           
   759                           ;Hand.c: 195: LATBbits.LATB2 = 1;
   760  007D52  848A               	bsf	3978,2,c	;volatile
   761                           
   762                           ;Hand.c: 196: _delay((unsigned long)((540)*(48000000/4000000.0)));
   763  007D54  0E09               	movlw	9
   764  007D56  6E0F               	movwf	??_pulseServos& (0+255),c
   765  007D58  0E69               	movlw	105
   766  007D5A                     u817:
   767  007D5A  2EE8               	decfsz	wreg,f,c
   768  007D5C  D7FE               	bra	u817
   769  007D5E  2E0F               	decfsz	??_pulseServos& (0+255),f,c
   770  007D60  D7FC               	bra	u817
   771  007D62  F000               	nop	
   772                           
   773                           ;Hand.c: 197: for (unsigned char i = arcPos[4]; i != 0; i--) {
   774  007D64  C005  F014         	movff	_arcPos+4,pulseServos@i_166
   775  007D68                     l980:
   776  007D68  5014               	movf	pulseServos@i_166,w,c
   777  007D6A  B4D8               	btfsc	status,2,c
   778  007D6C  D005               	goto	l146
   779                           
   780                           ;Hand.c: 198: _delay((unsigned long)((6)*(48000000/4000000.0)));
   781  007D6E  0E18               	movlw	24
   782  007D70                     u827:
   783  007D70  2EE8               	decfsz	wreg,f,c
   784  007D72  D7FE               	bra	u827
   785  007D74  0614               	decf	pulseServos@i_166,f,c
   786  007D76  D7F8               	goto	l980
   787  007D78                     l146:
   788                           
   789                           ;Hand.c: 199: }
   790                           ;Hand.c: 200: LATBbits.LATB2 = 0;
   791  007D78  948A               	bcf	3978,2,c	;volatile
   792  007D7A  0012               	return		;funcret
   793  007D7C                     __end_of_pulseServos:
   794                           	opt stack 0
   795                           tblptru	equ	0xFF8
   796                           postinc0	equ	0xFEE
   797                           wreg	equ	0xFE8
   798                           status	equ	0xFD8
   799                           
   800 ;; *************** function _initVariables *****************
   801 ;; Defined at:
   802 ;;		line 57 in file "Hand.c"
   803 ;; Parameters:    Size  Location     Type
   804 ;;		None
   805 ;; Auto vars:     Size  Location     Type
   806 ;;		None
   807 ;; Return value:  Size  Location     Type
   808 ;;                  1    wreg      void 
   809 ;; Registers used:
   810 ;;		wreg, status,2, cstack
   811 ;; Tracked objects:
   812 ;;		On entry : 0/0
   813 ;;		On exit  : 0/0
   814 ;;		Unchanged: 0/0
   815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   816 ;;      Params:         0       0       0       0       0       0       0       0       0
   817 ;;      Locals:         0       0       0       0       0       0       0       0       0
   818 ;;      Temps:          0       0       0       0       0       0       0       0       0
   819 ;;      Totals:         0       0       0       0       0       0       0       0       0
   820 ;;Total ram usage:        0 bytes
   821 ;; Hardware stack levels used:    1
   822 ;; Hardware stack levels required when called:    1
   823 ;; This function calls:
   824 ;;		_setPos
   825 ;; This function is called by:
   826 ;;		_main
   827 ;; This function uses a non-reentrant model
   828 ;;
   829                           
   830                           	psect	text2
   831  007B4A                     __ptext2:
   832                           	opt stack 0
   833  007B4A                     _initVariables:
   834                           	opt stack 29
   835                           
   836                           ;Hand.c: 58: setPos(0, 0, 0, 0, 0);
   837                           
   838                           ;incstack = 0
   839  007B4A  0E00               	movlw	0
   840  007B4C  6E0F               	movwf	setPos@b,c
   841  007B4E  0E00               	movlw	0
   842  007B50  6E10               	movwf	setPos@c,c
   843  007B52  0E00               	movlw	0
   844  007B54  6E11               	movwf	setPos@d,c
   845  007B56  0E00               	movlw	0
   846  007B58  6E12               	movwf	setPos@e,c
   847  007B5A  0E00               	movlw	0
   848  007B5C  EC8B  F03D         	call	_setPos
   849                           
   850                           ;Hand.c: 59: modeSelect = 0;
   851  007B60  0E00               	movlw	0
   852  007B62  6E0B               	movwf	_modeSelect,c
   853                           
   854                           ;Hand.c: 60: isPressedForMode = 0;
   855  007B64  0E00               	movlw	0
   856  007B66  6E0A               	movwf	_isPressedForMode,c
   857                           
   858                           ;Hand.c: 61: buttonWasLetGo = 1;
   859  007B68  0E01               	movlw	1
   860  007B6A  6E08               	movwf	_buttonWasLetGo,c
   861                           
   862                           ;Hand.c: 62: cMode = 0;
   863  007B6C  0E00               	movlw	0
   864  007B6E  6E0E               	movwf	_cMode,c
   865                           
   866                           ;Hand.c: 63: cDelay = 0;
   867  007B70  0E00               	movlw	0
   868  007B72  6E0D               	movwf	_cDelay,c
   869  007B74  0012               	return		;funcret
   870  007B76                     __end_of_initVariables:
   871                           	opt stack 0
   872                           tblptru	equ	0xFF8
   873                           postinc0	equ	0xFEE
   874                           wreg	equ	0xFE8
   875                           status	equ	0xFD8
   876                           
   877 ;; *************** function _initPorts *****************
   878 ;; Defined at:
   879 ;;		line 27 in file "CHRP3.c"
   880 ;; Parameters:    Size  Location     Type
   881 ;;		None
   882 ;; Auto vars:     Size  Location     Type
   883 ;;		None
   884 ;; Return value:  Size  Location     Type
   885 ;;                  1    wreg      void 
   886 ;; Registers used:
   887 ;;		wreg, status,2
   888 ;; Tracked objects:
   889 ;;		On entry : 0/0
   890 ;;		On exit  : 0/0
   891 ;;		Unchanged: 0/0
   892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   893 ;;      Params:         0       0       0       0       0       0       0       0       0
   894 ;;      Locals:         0       0       0       0       0       0       0       0       0
   895 ;;      Temps:          0       0       0       0       0       0       0       0       0
   896 ;;      Totals:         0       0       0       0       0       0       0       0       0
   897 ;;Total ram usage:        0 bytes
   898 ;; Hardware stack levels used:    1
   899 ;; This function calls:
   900 ;;		Nothing
   901 ;; This function is called by:
   902 ;;		_main
   903 ;; This function uses a non-reentrant model
   904 ;;
   905                           
   906                           	psect	text3
   907  007B76                     __ptext3:
   908                           	opt stack 0
   909  007B76                     _initPorts:
   910                           	opt stack 30
   911                           
   912                           ;CHRP3.c: 29: LATA = 0b00000000;
   913                           
   914                           ;incstack = 0
   915  007B76  0E00               	movlw	0
   916  007B78  6E89               	movwf	3977,c	;volatile
   917                           
   918                           ;CHRP3.c: 30: ANSELA = 0b00000000;
   919  007B7A  0E00               	movlw	0
   920  007B7C  010F               	movlb	15	; () banked
   921  007B7E  6F5B               	movwf	91,b	;volatile
   922                           
   923                           ;CHRP3.c: 31: TRISA = 0b00101111;
   924  007B80  0E2F               	movlw	47
   925  007B82  6E92               	movwf	3986,c	;volatile
   926                           
   927                           ;CHRP3.c: 33: LATB = 0b00000000;
   928  007B84  0E00               	movlw	0
   929  007B86  6E8A               	movwf	3978,c	;volatile
   930                           
   931                           ;CHRP3.c: 34: ANSELB = 0b00000000;
   932  007B88  0E00               	movlw	0
   933  007B8A  010F               	movlb	15	; () banked
   934  007B8C  6F5C               	movwf	92,b	;volatile
   935                           
   936                           ;CHRP3.c: 35: TRISB = 0b00000000;
   937  007B8E  0E00               	movlw	0
   938  007B90  6E93               	movwf	3987,c	;volatile
   939                           
   940                           ;CHRP3.c: 36: LATC = 0b00000000;
   941  007B92  0E00               	movlw	0
   942  007B94  6E8B               	movwf	3979,c	;volatile
   943                           
   944                           ;CHRP3.c: 37: ANSELC = 0b00000000;
   945  007B96  0E00               	movlw	0
   946  007B98  010F               	movlb	15	; () banked
   947  007B9A  6F5D               	movwf	93,b	;volatile
   948                           
   949                           ;CHRP3.c: 38: TRISC = 0b10110000;
   950  007B9C  0EB0               	movlw	176
   951  007B9E  6E94               	movwf	3988,c	;volatile
   952                           
   953                           ;CHRP3.c: 41: T0CON = 0b10000001;
   954  007BA0  0E81               	movlw	129
   955  007BA2  6ED5               	movwf	4053,c	;volatile
   956                           
   957                           ;CHRP3.c: 44: PORTA = 0;
   958  007BA4  0E00               	movlw	0
   959  007BA6  6E80               	movwf	3968,c	;volatile
   960                           
   961                           ;CHRP3.c: 45: PORTB = 0;
   962  007BA8  0E00               	movlw	0
   963  007BAA  6E81               	movwf	3969,c	;volatile
   964                           
   965                           ;CHRP3.c: 46: PORTC = 0;
   966  007BAC  0E00               	movlw	0
   967  007BAE  6E82               	movwf	3970,c	;volatile
   968                           
   969                           ; BSR set to: 15
   970  007BB0  0012               	return		;funcret
   971  007BB2                     __end_of_initPorts:
   972                           	opt stack 0
   973                           tblptru	equ	0xFF8
   974                           postinc0	equ	0xFEE
   975                           wreg	equ	0xFE8
   976                           status	equ	0xFD8
   977                           
   978 ;; *************** function _initOsc *****************
   979 ;; Defined at:
   980 ;;		line 16 in file "CHRP3.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;		None
   983 ;; Auto vars:     Size  Location     Type
   984 ;;		None
   985 ;; Return value:  Size  Location     Type
   986 ;;                  1    wreg      void 
   987 ;; Registers used:
   988 ;;		wreg, status,2
   989 ;; Tracked objects:
   990 ;;		On entry : 0/0
   991 ;;		On exit  : 0/0
   992 ;;		Unchanged: 0/0
   993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   994 ;;      Params:         0       0       0       0       0       0       0       0       0
   995 ;;      Locals:         0       0       0       0       0       0       0       0       0
   996 ;;      Temps:          0       0       0       0       0       0       0       0       0
   997 ;;      Totals:         0       0       0       0       0       0       0       0       0
   998 ;;Total ram usage:        0 bytes
   999 ;; Hardware stack levels used:    1
  1000 ;; This function calls:
  1001 ;;		Nothing
  1002 ;; This function is called by:
  1003 ;;		_main
  1004 ;; This function uses a non-reentrant model
  1005 ;;
  1006                           
  1007                           	psect	text4
  1008  007AEA                     __ptext4:
  1009                           	opt stack 0
  1010  007AEA                     _initOsc:
  1011                           	opt stack 30
  1012                           
  1013                           ;CHRP3.c: 18: OSCTUNE = 0x80;
  1014                           
  1015                           ; BSR set to: 15
  1016                           ;incstack = 0
  1017  007AEA  0E80               	movlw	128
  1018  007AEC  6E9B               	movwf	3995,c	;volatile
  1019                           
  1020                           ;CHRP3.c: 19: OSCCON = 0x70;
  1021  007AEE  0E70               	movlw	112
  1022  007AF0  6ED3               	movwf	4051,c	;volatile
  1023                           
  1024                           ;CHRP3.c: 20: OSCCON2 = 0x10;
  1025  007AF2  0E10               	movlw	16
  1026  007AF4  6ED2               	movwf	4050,c	;volatile
  1027                           
  1028                           ;CHRP3.c: 21: ACTCON = 0x90;
  1029  007AF6  0E90               	movlw	144
  1030  007AF8  6EB5               	movwf	4021,c	;volatile
  1031  007AFA                     l45:
  1032  007AFA  BED2               	btfsc	4050,7,c	;volatile
  1033  007AFC  0012               	return	
  1034  007AFE  D7FD               	goto	l45
  1035  007B00                     __end_of_initOsc:
  1036                           	opt stack 0
  1037                           tblptru	equ	0xFF8
  1038                           postinc0	equ	0xFEE
  1039                           wreg	equ	0xFE8
  1040                           status	equ	0xFD8
  1041                           
  1042 ;; *************** function _initANA *****************
  1043 ;; Defined at:
  1044 ;;		line 52 in file "CHRP3.c"
  1045 ;; Parameters:    Size  Location     Type
  1046 ;;		None
  1047 ;; Auto vars:     Size  Location     Type
  1048 ;;		None
  1049 ;; Return value:  Size  Location     Type
  1050 ;;                  1    wreg      void 
  1051 ;; Registers used:
  1052 ;;		wreg, status,2
  1053 ;; Tracked objects:
  1054 ;;		On entry : 0/0
  1055 ;;		On exit  : 0/0
  1056 ;;		Unchanged: 0/0
  1057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1058 ;;      Params:         0       0       0       0       0       0       0       0       0
  1059 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1060 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1061 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1062 ;;Total ram usage:        0 bytes
  1063 ;; Hardware stack levels used:    1
  1064 ;; This function calls:
  1065 ;;		Nothing
  1066 ;; This function is called by:
  1067 ;;		_main
  1068 ;; This function uses a non-reentrant model
  1069 ;;
  1070                           
  1071                           	psect	text5
  1072  007B2E                     __ptext5:
  1073                           	opt stack 0
  1074  007B2E                     _initANA:
  1075                           	opt stack 30
  1076                           
  1077                           ;CHRP3.c: 54: LATA = 0b00000000;
  1078                           
  1079                           ;incstack = 0
  1080  007B2E  0E00               	movlw	0
  1081  007B30  6E89               	movwf	3977,c	;volatile
  1082                           
  1083                           ;CHRP3.c: 55: ANSELA = 0b0011111;
  1084  007B32  0E1F               	movlw	31
  1085  007B34  010F               	movlb	15	; () banked
  1086  007B36  6F5B               	movwf	91,b	;volatile
  1087                           
  1088                           ;CHRP3.c: 56: ADCON0 = 0b00000000;
  1089  007B38  0E00               	movlw	0
  1090  007B3A  6EC2               	movwf	4034,c	;volatile
  1091                           
  1092                           ;CHRP3.c: 57: ADCON1 = 0b00000000;
  1093  007B3C  0E00               	movlw	0
  1094  007B3E  6EC1               	movwf	4033,c	;volatile
  1095                           
  1096                           ;CHRP3.c: 58: ADCON2 = 0b00001110;
  1097  007B40  0E0E               	movlw	14
  1098  007B42  6EC0               	movwf	4032,c	;volatile
  1099                           
  1100                           ;CHRP3.c: 59: TRISA = 0b00101111;
  1101  007B44  0E2F               	movlw	47
  1102  007B46  6E92               	movwf	3986,c	;volatile
  1103                           
  1104                           ; BSR set to: 15
  1105  007B48  0012               	return		;funcret
  1106  007B4A                     __end_of_initANA:
  1107                           	opt stack 0
  1108                           tblptru	equ	0xFF8
  1109                           postinc0	equ	0xFEE
  1110                           wreg	equ	0xFE8
  1111                           status	equ	0xFD8
  1112                           
  1113 ;; *************** function _delay *****************
  1114 ;; Defined at:
  1115 ;;		line 211 in file "Hand.c"
  1116 ;; Parameters:    Size  Location     Type
  1117 ;;		None
  1118 ;; Auto vars:     Size  Location     Type
  1119 ;;  i               2   12[COMRAM] int 
  1120 ;; Return value:  Size  Location     Type
  1121 ;;                  1    wreg      void 
  1122 ;; Registers used:
  1123 ;;		wreg, status,2, status,0, cstack
  1124 ;; Tracked objects:
  1125 ;;		On entry : 0/0
  1126 ;;		On exit  : 0/0
  1127 ;;		Unchanged: 0/0
  1128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1129 ;;      Params:         0       0       0       0       0       0       0       0       0
  1130 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1131 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1132 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1133 ;;Total ram usage:        6 bytes
  1134 ;; Hardware stack levels used:    1
  1135 ;; Hardware stack levels required when called:    1
  1136 ;; This function calls:
  1137 ;;		___awdiv
  1138 ;; This function is called by:
  1139 ;;		_main
  1140 ;; This function uses a non-reentrant model
  1141 ;;
  1142                           
  1143                           	psect	text6
  1144  007BB2                     __ptext6:
  1145                           	opt stack 0
  1146  007BB2                     _delay:
  1147                           	opt stack 29
  1148                           
  1149                           ;Hand.c: 212: nDelay = (int) ((20000 - 2500 - 540 * 5 - arcPos[0] - arcPos[1] - arcPos[2
      +                          ] - arcPos[3] - arcPos[4]) / 6);
  1150                           
  1151                           ; BSR set to: 15
  1152                           ;incstack = 0
  1153  007BB2  0E50               	movlw	80
  1154  007BB4  6E17               	movwf	??_delay& (0+255),c
  1155  007BB6  0E14               	movlw	20
  1156  007BB8  6E18               	movwf	(??_delay+1)& (0+255),c
  1157  007BBA  5002               	movf	_arcPos+1,w,c
  1158  007BBC  C001  F019         	movff	_arcPos,??_delay+2
  1159  007BC0  6A1A               	clrf	(??_delay+3)& (0+255),c
  1160  007BC2  2619               	addwf	??_delay+2,f,c
  1161  007BC4  0E00               	movlw	0
  1162  007BC6  221A               	addwfc	??_delay+3,f,c
  1163  007BC8  5003               	movf	_arcPos+2,w,c
  1164  007BCA  2619               	addwf	??_delay+2,f,c
  1165  007BCC  0E00               	movlw	0
  1166  007BCE  221A               	addwfc	??_delay+3,f,c
  1167  007BD0  5004               	movf	_arcPos+3,w,c
  1168  007BD2  2619               	addwf	??_delay+2,f,c
  1169  007BD4  0E00               	movlw	0
  1170  007BD6  221A               	addwfc	??_delay+3,f,c
  1171  007BD8  5005               	movf	_arcPos+4,w,c
  1172  007BDA  2619               	addwf	??_delay+2,f,c
  1173  007BDC  0E00               	movlw	0
  1174  007BDE  221A               	addwfc	??_delay+3,f,c
  1175  007BE0  5017               	movf	??_delay,w,c
  1176  007BE2  2619               	addwf	??_delay+2,f,c
  1177  007BE4  5018               	movf	??_delay+1,w,c
  1178  007BE6  221A               	addwfc	??_delay+3,f,c
  1179  007BE8  1E19               	comf	??_delay+2,f,c
  1180  007BEA  1E1A               	comf	??_delay+3,f,c
  1181  007BEC  4A19               	infsnz	??_delay+2,f,c
  1182  007BEE  2A1A               	incf	??_delay+3,f,c
  1183  007BF0  0E20               	movlw	32
  1184  007BF2  2419               	addwf	??_delay+2,w,c
  1185  007BF4  6E0F               	movwf	___awdiv@dividend,c
  1186  007BF6  0E4E               	movlw	78
  1187  007BF8  201A               	addwfc	??_delay+3,w,c
  1188  007BFA  6E10               	movwf	___awdiv@dividend+1,c
  1189  007BFC  0E00               	movlw	0
  1190  007BFE  6E12               	movwf	___awdiv@divisor+1,c
  1191  007C00  0E06               	movlw	6
  1192  007C02  6E11               	movwf	___awdiv@divisor,c
  1193  007C04  EC17  F03E         	call	___awdiv	;wreg free
  1194  007C08  C00F  F006         	movff	?___awdiv,_nDelay
  1195  007C0C  C010  F007         	movff	?___awdiv+1,_nDelay+1
  1196                           
  1197                           ;Hand.c: 213: for (int i = nDelay; i != 0; i--) {
  1198  007C10  C006  F01B         	movff	_nDelay,delay@i
  1199  007C14  C007  F01C         	movff	_nDelay+1,delay@i+1
  1200  007C18                     l1212:
  1201  007C18  501B               	movf	delay@i,w,c
  1202  007C1A  101C               	iorwf	delay@i+1,w,c
  1203  007C1C  B4D8               	btfsc	status,2,c
  1204  007C1E  0012               	return	
  1205                           
  1206                           ;Hand.c: 214: _delay((unsigned long)((6)*(48000000/4000000.0)));
  1207  007C20  0E18               	movlw	24
  1208  007C22                     u837:
  1209  007C22  2EE8               	decfsz	wreg,f,c
  1210  007C24  D7FE               	bra	u837
  1211  007C26  061B               	decf	delay@i,f,c
  1212  007C28  A0D8               	btfss	status,0,c
  1213  007C2A  061C               	decf	delay@i+1,f,c
  1214  007C2C  D7F5               	goto	l1212
  1215  007C2E                     __end_of_delay:
  1216                           	opt stack 0
  1217                           tblptru	equ	0xFF8
  1218                           postinc0	equ	0xFEE
  1219                           wreg	equ	0xFE8
  1220                           status	equ	0xFD8
  1221                           
  1222 ;; *************** function ___awdiv *****************
  1223 ;; Defined at:
  1224 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  1225 ;; Parameters:    Size  Location     Type
  1226 ;;  dividend        2    0[COMRAM] int 
  1227 ;;  divisor         2    2[COMRAM] int 
  1228 ;; Auto vars:     Size  Location     Type
  1229 ;;  quotient        2    6[COMRAM] int 
  1230 ;;  sign            1    5[COMRAM] unsigned char 
  1231 ;;  counter         1    4[COMRAM] unsigned char 
  1232 ;; Return value:  Size  Location     Type
  1233 ;;                  2    0[COMRAM] int 
  1234 ;; Registers used:
  1235 ;;		wreg, status,2, status,0
  1236 ;; Tracked objects:
  1237 ;;		On entry : 0/0
  1238 ;;		On exit  : 0/0
  1239 ;;		Unchanged: 0/0
  1240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1241 ;;      Params:         4       0       0       0       0       0       0       0       0
  1242 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1243 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1244 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1245 ;;Total ram usage:        8 bytes
  1246 ;; Hardware stack levels used:    1
  1247 ;; This function calls:
  1248 ;;		Nothing
  1249 ;; This function is called by:
  1250 ;;		_delay
  1251 ;; This function uses a non-reentrant model
  1252 ;;
  1253                           
  1254                           	psect	text7
  1255  007C2E                     __ptext7:
  1256                           	opt stack 0
  1257  007C2E                     ___awdiv:
  1258                           	opt stack 29
  1259                           
  1260                           ;incstack = 0
  1261  007C2E  0E00               	movlw	0
  1262  007C30  6E14               	movwf	___awdiv@sign,c
  1263  007C32  AE12               	btfss	___awdiv@divisor+1,7,c
  1264  007C34  D006               	goto	l1090
  1265  007C36  6C11               	negf	___awdiv@divisor,c
  1266  007C38  1E12               	comf	___awdiv@divisor+1,f,c
  1267  007C3A  B0D8               	btfsc	status,0,c
  1268  007C3C  2A12               	incf	___awdiv@divisor+1,f,c
  1269  007C3E  0E01               	movlw	1
  1270  007C40  6E14               	movwf	___awdiv@sign,c
  1271  007C42                     l1090:
  1272  007C42  AE10               	btfss	___awdiv@dividend+1,7,c
  1273  007C44  D006               	goto	l1096
  1274  007C46  6C0F               	negf	___awdiv@dividend,c
  1275  007C48  1E10               	comf	___awdiv@dividend+1,f,c
  1276  007C4A  B0D8               	btfsc	status,0,c
  1277  007C4C  2A10               	incf	___awdiv@dividend+1,f,c
  1278  007C4E  0E01               	movlw	1
  1279  007C50  1A14               	xorwf	___awdiv@sign,f,c
  1280  007C52                     l1096:
  1281  007C52  0E00               	movlw	0
  1282  007C54  6E16               	movwf	___awdiv@quotient+1,c
  1283  007C56  0E00               	movlw	0
  1284  007C58  6E15               	movwf	___awdiv@quotient,c
  1285  007C5A  5011               	movf	___awdiv@divisor,w,c
  1286  007C5C  1012               	iorwf	___awdiv@divisor+1,w,c
  1287  007C5E  B4D8               	btfsc	status,2,c
  1288  007C60  D01C               	goto	l1118
  1289  007C62  0E01               	movlw	1
  1290  007C64  6E13               	movwf	___awdiv@counter,c
  1291  007C66  D004               	goto	l1104
  1292  007C68                     l1102:
  1293  007C68  90D8               	bcf	status,0,c
  1294  007C6A  3611               	rlcf	___awdiv@divisor,f,c
  1295  007C6C  3612               	rlcf	___awdiv@divisor+1,f,c
  1296  007C6E  2A13               	incf	___awdiv@counter,f,c
  1297  007C70                     l1104:
  1298  007C70  AE12               	btfss	___awdiv@divisor+1,7,c
  1299  007C72  D7FA               	goto	l1102
  1300  007C74                     l1106:
  1301  007C74  90D8               	bcf	status,0,c
  1302  007C76  3615               	rlcf	___awdiv@quotient,f,c
  1303  007C78  3616               	rlcf	___awdiv@quotient+1,f,c
  1304  007C7A  5011               	movf	___awdiv@divisor,w,c
  1305  007C7C  5C0F               	subwf	___awdiv@dividend,w,c
  1306  007C7E  5012               	movf	___awdiv@divisor+1,w,c
  1307  007C80  5810               	subwfb	___awdiv@dividend+1,w,c
  1308  007C82  A0D8               	btfss	status,0,c
  1309  007C84  D005               	goto	l1114
  1310  007C86  5011               	movf	___awdiv@divisor,w,c
  1311  007C88  5E0F               	subwf	___awdiv@dividend,f,c
  1312  007C8A  5012               	movf	___awdiv@divisor+1,w,c
  1313  007C8C  5A10               	subwfb	___awdiv@dividend+1,f,c
  1314  007C8E  8015               	bsf	___awdiv@quotient,0,c
  1315  007C90                     l1114:
  1316  007C90  90D8               	bcf	status,0,c
  1317  007C92  3212               	rrcf	___awdiv@divisor+1,f,c
  1318  007C94  3211               	rrcf	___awdiv@divisor,f,c
  1319  007C96  2E13               	decfsz	___awdiv@counter,f,c
  1320  007C98  D7ED               	goto	l1106
  1321  007C9A                     l1118:
  1322  007C9A  5014               	movf	___awdiv@sign,w,c
  1323  007C9C  B4D8               	btfsc	status,2,c
  1324  007C9E  D004               	goto	l1122
  1325  007CA0  6C15               	negf	___awdiv@quotient,c
  1326  007CA2  1E16               	comf	___awdiv@quotient+1,f,c
  1327  007CA4  B0D8               	btfsc	status,0,c
  1328  007CA6  2A16               	incf	___awdiv@quotient+1,f,c
  1329  007CA8                     l1122:
  1330  007CA8  C015  F00F         	movff	___awdiv@quotient,?___awdiv
  1331  007CAC  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
  1332  007CB0  0012               	return	
  1333  007CB2                     __end_of___awdiv:
  1334                           	opt stack 0
  1335                           tblptru	equ	0xFF8
  1336                           postinc0	equ	0xFEE
  1337                           wreg	equ	0xFE8
  1338                           status	equ	0xFD8
  1339                           
  1340 ;; *************** function _convertSensors *****************
  1341 ;; Defined at:
  1342 ;;		line 94 in file "Hand.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;		None
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;		None
  1347 ;; Return value:  Size  Location     Type
  1348 ;;                  1    wreg      void 
  1349 ;; Registers used:
  1350 ;;		None
  1351 ;; Tracked objects:
  1352 ;;		On entry : 0/0
  1353 ;;		On exit  : 0/0
  1354 ;;		Unchanged: 0/0
  1355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1356 ;;      Params:         0       0       0       0       0       0       0       0       0
  1357 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1358 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1359 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1360 ;;Total ram usage:        0 bytes
  1361 ;; Hardware stack levels used:    1
  1362 ;; This function calls:
  1363 ;;		Nothing
  1364 ;; This function is called by:
  1365 ;;		_main
  1366 ;; This function uses a non-reentrant model
  1367 ;;
  1368                           
  1369                           	psect	text8
  1370  002004                     __ptext8:
  1371                           	opt stack 0
  1372  002004                     _convertSensors:
  1373                           	opt stack 30
  1374                           
  1375                           ;incstack = 0
  1376  002004  0012               	return		;funcret
  1377  002006                     __end_of_convertSensors:
  1378                           	opt stack 0
  1379                           tblptru	equ	0xFF8
  1380                           postinc0	equ	0xFEE
  1381                           wreg	equ	0xFE8
  1382                           status	equ	0xFD8
  1383                           
  1384 ;; *************** function _checkMode *****************
  1385 ;; Defined at:
  1386 ;;		line 108 in file "Hand.c"
  1387 ;; Parameters:    Size  Location     Type
  1388 ;;		None
  1389 ;; Auto vars:     Size  Location     Type
  1390 ;;  i               1   10[COMRAM] unsigned char 
  1391 ;;  i               1    9[COMRAM] unsigned char 
  1392 ;;  cTempMode       1   11[COMRAM] unsigned char 
  1393 ;; Return value:  Size  Location     Type
  1394 ;;                  1    wreg      unsigned char 
  1395 ;; Registers used:
  1396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1397 ;; Tracked objects:
  1398 ;;		On entry : 0/0
  1399 ;;		On exit  : 0/0
  1400 ;;		Unchanged: 0/0
  1401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1402 ;;      Params:         0       0       0       0       0       0       0       0       0
  1403 ;;      Locals:         7       0       0       0       0       0       0       0       0
  1404 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1405 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1406 ;;Total ram usage:        7 bytes
  1407 ;; Hardware stack levels used:    1
  1408 ;; Hardware stack levels required when called:    1
  1409 ;; This function calls:
  1410 ;;		_setPos
  1411 ;; This function is called by:
  1412 ;;		_main
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           	psect	text9
  1417  007D7C                     __ptext9:
  1418                           	opt stack 0
  1419  007D7C                     _checkMode:
  1420                           	opt stack 29
  1421                           
  1422                           ;Hand.c: 109: unsigned char cTempMode = cMode;
  1423                           
  1424                           ;incstack = 0
  1425  007D7C  C00E  F01A         	movff	_cMode,checkMode@cTempMode
  1426                           
  1427                           ;Hand.c: 110: if (PORTEbits.RE3 == 0) {
  1428  007D80  B684               	btfsc	3972,3,c	;volatile
  1429  007D82  D06A               	goto	l112
  1430                           
  1431                           ;Hand.c: 111: isPressedForMode = 1;
  1432  007D84  0E01               	movlw	1
  1433  007D86  6E0A               	movwf	_isPressedForMode,c
  1434                           
  1435                           ;Hand.c: 112: if (!modeSelect && buttonWasLetGo) {
  1436  007D88  500B               	movf	_modeSelect,w,c
  1437  007D8A  A4D8               	btfss	status,2,c
  1438  007D8C  D02C               	goto	l1166
  1439  007D8E  5008               	movf	_buttonWasLetGo,w,c
  1440  007D90  B4D8               	btfsc	status,2,c
  1441  007D92  D029               	goto	l1166
  1442                           
  1443                           ;Hand.c: 113: cDelay++;
  1444  007D94  2A0D               	incf	_cDelay,f,c
  1445                           
  1446                           ;Hand.c: 114: if (cDelay == 20) {
  1447  007D96  0E14               	movlw	20
  1448  007D98  180D               	xorwf	_cDelay,w,c
  1449  007D9A  A4D8               	btfss	status,2,c
  1450  007D9C  D05D               	goto	l112
  1451                           
  1452                           ;Hand.c: 115: cDelay = 0;
  1453  007D9E  0E00               	movlw	0
  1454  007DA0  6E0D               	movwf	_cDelay,c
  1455                           
  1456                           ;Hand.c: 116: modeSelect = 1;
  1457  007DA2  0E01               	movlw	1
  1458  007DA4  6E0B               	movwf	_modeSelect,c
  1459                           
  1460                           ;Hand.c: 117: buttonWasLetGo = 0;
  1461  007DA6  0E00               	movlw	0
  1462  007DA8  6E08               	movwf	_buttonWasLetGo,c
  1463                           
  1464                           ;Hand.c: 118: for (unsigned char i = 0; i < 5; i++) {
  1465  007DAA  0E00               	movlw	0
  1466  007DAC  6E18               	movwf	checkMode@i,c
  1467  007DAE                     l1150:
  1468  007DAE  0E04               	movlw	4
  1469  007DB0  6418               	cpfsgt	checkMode@i,c
  1470  007DB2  D001               	goto	l1154
  1471  007DB4  D051               	goto	l112
  1472  007DB6                     l1154:
  1473                           
  1474                           ;Hand.c: 119: arcPos[i] = (cTempMode == i) ? 255 : 0;
  1475  007DB6  5018               	movf	checkMode@i,w,c
  1476  007DB8  181A               	xorwf	checkMode@cTempMode,w,c
  1477  007DBA  B4D8               	btfsc	status,2,c
  1478  007DBC  D005               	goto	l1158
  1479  007DBE  0E00               	movlw	0
  1480  007DC0  6E15               	movwf	_checkMode$150+1,c
  1481  007DC2  0E00               	movlw	0
  1482  007DC4  6E14               	movwf	_checkMode$150,c
  1483  007DC6  D003               	goto	l1160
  1484  007DC8                     l1158:
  1485  007DC8  0E00               	movlw	0
  1486  007DCA  6E15               	movwf	_checkMode$150+1,c
  1487  007DCC  6814               	setf	_checkMode$150,c
  1488  007DCE                     l1160:
  1489  007DCE  5018               	movf	checkMode@i,w,c
  1490  007DD0  0D01               	mullw	1
  1491  007DD2  0E01               	movlw	low _arcPos
  1492  007DD4  24F3               	addwf	prodl,w,c
  1493  007DD6  6ED9               	movwf	fsr2l,c
  1494  007DD8  0E00               	movlw	high _arcPos
  1495  007DDA  20F4               	addwfc	prodh,w,c
  1496  007DDC  6EDA               	movwf	fsr2h,c
  1497  007DDE  C014  FFDF         	movff	_checkMode$150,indf2
  1498  007DE2  2A18               	incf	checkMode@i,f,c
  1499  007DE4  D7E4               	goto	l1150
  1500  007DE6                     l1166:
  1501  007DE6  5008               	movf	_buttonWasLetGo,w,c
  1502  007DE8  B4D8               	btfsc	status,2,c
  1503  007DEA  D036               	goto	l112
  1504                           
  1505                           ;Hand.c: 123: cDelay++;
  1506  007DEC  2A0D               	incf	_cDelay,f,c
  1507                           
  1508                           ;Hand.c: 124: if (cDelay == 20) {
  1509  007DEE  0E14               	movlw	20
  1510  007DF0  180D               	xorwf	_cDelay,w,c
  1511  007DF2  A4D8               	btfss	status,2,c
  1512  007DF4  D013               	goto	l1178
  1513                           
  1514                           ;Hand.c: 125: cDelay = 0;
  1515  007DF6  0E00               	movlw	0
  1516  007DF8  6E0D               	movwf	_cDelay,c
  1517                           
  1518                           ;Hand.c: 126: modeSelect = 0;
  1519  007DFA  0E00               	movlw	0
  1520  007DFC  6E0B               	movwf	_modeSelect,c
  1521                           
  1522                           ;Hand.c: 127: buttonWasLetGo = 0;
  1523  007DFE  0E00               	movlw	0
  1524  007E00  6E08               	movwf	_buttonWasLetGo,c
  1525                           
  1526                           ;Hand.c: 128: cTempMode--;
  1527  007E02  061A               	decf	checkMode@cTempMode,f,c
  1528                           
  1529                           ;Hand.c: 129: setPos(0, 0, 0, 0, 0);
  1530  007E04  0E00               	movlw	0
  1531  007E06  6E0F               	movwf	setPos@b,c
  1532  007E08  0E00               	movlw	0
  1533  007E0A  6E10               	movwf	setPos@c,c
  1534  007E0C  0E00               	movlw	0
  1535  007E0E  6E11               	movwf	setPos@d,c
  1536  007E10  0E00               	movlw	0
  1537  007E12  6E12               	movwf	setPos@e,c
  1538  007E14  0E00               	movlw	0
  1539  007E16  EC8B  F03D         	call	_setPos
  1540                           
  1541                           ;Hand.c: 130: } else {
  1542  007E1A  D01E               	goto	l112
  1543  007E1C                     l1178:
  1544                           
  1545                           ;Hand.c: 131: for (unsigned char i = 0; i < 5; i++) {
  1546  007E1C  0E00               	movlw	0
  1547  007E1E  6E19               	movwf	checkMode@i_151,c
  1548  007E20                     l1180:
  1549  007E20  0E04               	movlw	4
  1550  007E22  6419               	cpfsgt	checkMode@i_151,c
  1551  007E24  D001               	goto	l1184
  1552  007E26  D018               	goto	l112
  1553  007E28                     l1184:
  1554                           
  1555                           ;Hand.c: 132: arcPos[i] = (cTempMode == i) ? 255 : 0;
  1556  007E28  5019               	movf	checkMode@i_151,w,c
  1557  007E2A  181A               	xorwf	checkMode@cTempMode,w,c
  1558  007E2C  B4D8               	btfsc	status,2,c
  1559  007E2E  D005               	goto	l1188
  1560  007E30  0E00               	movlw	0
  1561  007E32  6E17               	movwf	_checkMode$152+1,c
  1562  007E34  0E00               	movlw	0
  1563  007E36  6E16               	movwf	_checkMode$152,c
  1564  007E38  D003               	goto	l1190
  1565  007E3A                     l1188:
  1566  007E3A  0E00               	movlw	0
  1567  007E3C  6E17               	movwf	_checkMode$152+1,c
  1568  007E3E  6816               	setf	_checkMode$152,c
  1569  007E40                     l1190:
  1570  007E40  5019               	movf	checkMode@i_151,w,c
  1571  007E42  0D01               	mullw	1
  1572  007E44  0E01               	movlw	low _arcPos
  1573  007E46  24F3               	addwf	prodl,w,c
  1574  007E48  6ED9               	movwf	fsr2l,c
  1575  007E4A  0E00               	movlw	high _arcPos
  1576  007E4C  20F4               	addwfc	prodh,w,c
  1577  007E4E  6EDA               	movwf	fsr2h,c
  1578  007E50  C016  FFDF         	movff	_checkMode$152,indf2
  1579  007E54  2A19               	incf	checkMode@i_151,f,c
  1580  007E56  D7E4               	goto	l1180
  1581  007E58                     l112:
  1582                           
  1583                           ;Hand.c: 133: }
  1584                           ;Hand.c: 134: }
  1585                           ;Hand.c: 135: }
  1586                           ;Hand.c: 136: }
  1587                           ;Hand.c: 138: if (PORTEbits.RE3 == 1) {
  1588  007E58  A684               	btfss	3972,3,c	;volatile
  1589  007E5A  D013               	goto	l131
  1590                           
  1591                           ;Hand.c: 139: if (isPressedForMode && modeSelect) {
  1592  007E5C  500A               	movf	_isPressedForMode,w,c
  1593  007E5E  B4D8               	btfsc	status,2,c
  1594  007E60  D00A               	goto	l132
  1595  007E62  500B               	movf	_modeSelect,w,c
  1596  007E64  B4D8               	btfsc	status,2,c
  1597  007E66  D007               	goto	l132
  1598                           
  1599                           ;Hand.c: 140: cTempMode++;
  1600  007E68  2A1A               	incf	checkMode@cTempMode,f,c
  1601                           
  1602                           ;Hand.c: 141: if (cTempMode == 5)cTempMode = 0;
  1603  007E6A  0E05               	movlw	5
  1604  007E6C  181A               	xorwf	checkMode@cTempMode,w,c
  1605  007E6E  A4D8               	btfss	status,2,c
  1606  007E70  D002               	goto	l132
  1607  007E72  0E00               	movlw	0
  1608  007E74  6E1A               	movwf	checkMode@cTempMode,c
  1609  007E76                     l132:
  1610                           
  1611                           ;Hand.c: 142: }
  1612                           ;Hand.c: 143: buttonWasLetGo = 1;
  1613  007E76  0E01               	movlw	1
  1614  007E78  6E08               	movwf	_buttonWasLetGo,c
  1615                           
  1616                           ;Hand.c: 144: cDelay = 0;
  1617  007E7A  0E00               	movlw	0
  1618  007E7C  6E0D               	movwf	_cDelay,c
  1619                           
  1620                           ;Hand.c: 145: isPressedForMode = 0;
  1621  007E7E  0E00               	movlw	0
  1622  007E80  6E0A               	movwf	_isPressedForMode,c
  1623  007E82                     l131:
  1624                           
  1625                           ;Hand.c: 146: }
  1626                           ;Hand.c: 147: return cTempMode;
  1627  007E82  501A               	movf	checkMode@cTempMode,w,c
  1628  007E84  0012               	return	
  1629  007E86                     __end_of_checkMode:
  1630                           	opt stack 0
  1631                           tblptru	equ	0xFF8
  1632                           prodh	equ	0xFF4
  1633                           prodl	equ	0xFF3
  1634                           postinc0	equ	0xFEE
  1635                           wreg	equ	0xFE8
  1636                           indf2	equ	0xFDF
  1637                           fsr2h	equ	0xFDA
  1638                           fsr2l	equ	0xFD9
  1639                           status	equ	0xFD8
  1640                           
  1641 ;; *************** function _setPos *****************
  1642 ;; Defined at:
  1643 ;;		line 43 in file "Hand.c"
  1644 ;; Parameters:    Size  Location     Type
  1645 ;;  a               1    wreg     unsigned char 
  1646 ;;  b               1    0[COMRAM] unsigned char 
  1647 ;;  c               1    1[COMRAM] unsigned char 
  1648 ;;  d               1    2[COMRAM] unsigned char 
  1649 ;;  e               1    3[COMRAM] unsigned char 
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;  a               1    4[COMRAM] unsigned char 
  1652 ;; Return value:  Size  Location     Type
  1653 ;;                  1    wreg      void 
  1654 ;; Registers used:
  1655 ;;		wreg
  1656 ;; Tracked objects:
  1657 ;;		On entry : 0/0
  1658 ;;		On exit  : 0/0
  1659 ;;		Unchanged: 0/0
  1660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1661 ;;      Params:         4       0       0       0       0       0       0       0       0
  1662 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1663 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1664 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1665 ;;Total ram usage:        5 bytes
  1666 ;; Hardware stack levels used:    1
  1667 ;; This function calls:
  1668 ;;		Nothing
  1669 ;; This function is called by:
  1670 ;;		_initVariables
  1671 ;;		_checkMode
  1672 ;;		_main
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676                           	psect	text10
  1677  007B16                     __ptext10:
  1678                           	opt stack 0
  1679  007B16                     _setPos:
  1680                           	opt stack 30
  1681                           
  1682                           ;incstack = 0
  1683                           ;setPos@a stored from wreg
  1684  007B16  6E13               	movwf	setPos@a,c
  1685                           
  1686                           ;Hand.c: 44: arcPos[0] = a;
  1687  007B18  C013  F001         	movff	setPos@a,_arcPos
  1688                           
  1689                           ;Hand.c: 45: arcPos[1] = b;
  1690  007B1C  C00F  F002         	movff	setPos@b,_arcPos+1
  1691                           
  1692                           ;Hand.c: 46: arcPos[2] = c;
  1693  007B20  C010  F003         	movff	setPos@c,_arcPos+2
  1694                           
  1695                           ;Hand.c: 47: arcPos[3] = d;
  1696  007B24  C011  F004         	movff	setPos@d,_arcPos+3
  1697                           
  1698                           ;Hand.c: 48: arcPos[4] = e;
  1699  007B28  C012  F005         	movff	setPos@e,_arcPos+4
  1700  007B2C  0012               	return		;funcret
  1701  007B2E                     __end_of_setPos:
  1702                           	opt stack 0
  1703  0000                     tblptru	equ	0xFF8
  1704                           prodh	equ	0xFF4
  1705                           prodl	equ	0xFF3
  1706                           postinc0	equ	0xFEE
  1707                           wreg	equ	0xFE8
  1708                           indf2	equ	0xFDF
  1709                           fsr2h	equ	0xFDA
  1710                           fsr2l	equ	0xFD9
  1711                           status	equ	0xFD8
  1712                           tblptru	equ	0xFF8
  1713                           prodh	equ	0xFF4
  1714                           prodl	equ	0xFF3
  1715                           postinc0	equ	0xFEE
  1716                           wreg	equ	0xFE8
  1717                           indf2	equ	0xFDF
  1718                           fsr2h	equ	0xFDA
  1719                           fsr2l	equ	0xFD9
  1720                           status	equ	0xFD8
  1721                           
  1722                           	psect	rparam
  1723  0000                     tblptru	equ	0xFF8
  1724                           prodh	equ	0xFF4
  1725                           prodl	equ	0xFF3
  1726                           postinc0	equ	0xFEE
  1727                           wreg	equ	0xFE8
  1728                           indf2	equ	0xFDF
  1729                           fsr2h	equ	0xFDA
  1730                           fsr2l	equ	0xFD9
  1731                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     14      28
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_delay
    _initVariables->_setPos
    _delay->___awdiv
    _checkMode->_setPos

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6908
                          _checkMode
                     _convertSensors
                              _delay
                            _initANA
                            _initOsc
                          _initPorts
                      _initVariables
                        _pulseServos
                             _setPos
 ---------------------------------------------------------------------------------
 (1) _pulseServos                                          6     6      0     150
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _initVariables                                        0     0      0    2002
                             _setPos
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initOsc                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initANA                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delay                                                6     6      0     432
                                              8 COMRAM     6     6      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     386
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _convertSensors                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkMode                                            7     7      0    2322
                                              5 COMRAM     7     7      0
                             _setPos
 ---------------------------------------------------------------------------------
 (1) _setPos                                               5     1      4    2002
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _checkMode
     _setPos
   _convertSensors
   _delay
     ___awdiv
   _initANA
   _initOsc
   _initPorts
   _initVariables
     _setPos
   _pulseServos
   _setPos

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      E      1C       1       29.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1C       6        0.0%
DATA                 0      0      1C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Jun 18 11:37:21 2017

            _pulseServos 7CB2                       l45 7AFA                       _GO 007E11  
           ___awdiv@sign 0014             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000                      l112 7E58  
                    l131 7E82                      l132 7E76                      l140 7D00  
                    l142 7D28                      l144 7D50                      l146 7D78  
                    l138 7CD8                      l159 7E9E                      l924 7CC8  
                    l952 7D18                      l938 7CF0                      l980 7D68  
                    l966 7D40             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
                    u807 7D48                      u817 7D5A                      u737 7CBA  
                    u827 7D70                      u747 7CD0                      u837 7C22  
                    u757 7CE2                      u767 7CF8                      u777 7D0A  
                    u787 7D20                      u797 7D32                      prod 000FF3  
                    wreg 000FE8             __CFG_LVP$OFF 000000                     l1102 7C68  
                   l1104 7C70                     l1122 7CA8                     l1114 7C90  
                   l1106 7C74                     l1212 7C18                     l1150 7DAE  
                   l1118 7C9A                     l1222 7E98                     l1160 7DCE  
                   l1154 7DB6                     l1090 7C42                     l1250 7F30  
                   l1242 7ED0                     l1180 7E20                     l1252 7F48  
                   l1244 7EE8                     l1228 7EAC                     l1190 7E40  
                   l1158 7DC8                     l1166 7DE6                     l1254 7F60  
                   l1246 7F00                     l1262 7FA8                     l1184 7E28  
                   l1096 7C52                     l1256 7F78                     l1248 7F18  
                   l1178 7E1C                     l1258 7F90                     l1266 7FE2  
                   l1188 7E3A                     l1268 7FF0                     _ADON 007E10  
                   _LATA 000F89                     _LATB 000F8A                     _LATC 000F8B  
                   _main 7E86                     indf2 000FDF                     fsr2l 000FD9  
          __CFG_BORV$190 000000                     prodl 000FF3                     start 2000  
          __CFG_IESO$OFF 000000             ___param_bank 000000                    ?_main 000F  
        __end_of___awdiv 7CB2                    _T0CON 000FD5          ___awdiv@divisor 0011  
        ___awdiv@counter 0013                    _PORTA 000F80                    _PORTB 000F81  
                  _PORTC 000F82                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000                    _cMode 000E            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000          __end_of_initANA 7B4A  
         __CFG_EBTRB$OFF 000000                    _delay 7BB2          __end_of_initOsc 7B00  
                  status 000FD8           __CFG_T3CMX$RC0 000000           __CFG_MCLRE$OFF 000000  
        __initialization 7B00             __end_of_main 8000                   ??_main 001D  
          __activetblptr 000002           _convertSensors 2004   __size_of_initVariables 002C  
         __CFG_SDOMX$RB3 000000          __CFG_CCP2MX$RC1 000000                   ?_delay 000F  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
                 _ACTCON 000FB5                   _ADRESH 000FC4         ___awdiv@dividend 000F  
           pulseServos@i 0010                   _ANSELA 000F5B                   _ANSELB 000F5C  
                 _ANSELC 000F5D                   _OSCCON 000FD3                   _PLLRDY 007E97  
         __CFG_XINST$OFF 000000                   _cDelay 000D                   _nDelay 0006  
              ??___awdiv 0013           __CFG_STVREN$ON 000000                   _arcPos 0001  
                 delay@i 001B                   clear_0 7B06         ___awdiv@quotient 0015  
 __end_of_convertSensors 2006                   _setPos 7B16                ??_initANA 000F  
              ??_initOsc 000F                   tblptru 000FF8     __CFG_LS48MHZ$SYS48X8 000000  
             __accesstop 0060  __end_of__initialization 7B0C          __CFG_PBADEN$OFF 000000  
          _initVariables 7B4A            ___rparam_used 000001           __pcstackCOMRAM 000F  
       __CFG_nPWRTEN$OFF 000000       __size_of_checkMode 010A            __end_of_delay 7C2E  
           ?_pulseServos 000F          ?_convertSensors 000F      _isPressedForGesture 0009  
        __CFG_PCLKEN$OFF 000000           __CFG_nLPBOR$ON 000000                  ??_delay 0017  
         ?_initVariables 000F       __size_of_initPorts 003C        __CFG_PLLSEL$PLL3X 000000  
                ?_setPos 000F          __CFG_WDTEN$SWON 000000                  _OSCCON2 000FD2  
                _OSCTUNE 000F9B        __end_of_checkMode 7E86                  __Hparam 0000  
                __Lparam 0000               checkMode@i 0018                  ___awdiv 7C2E  
                __pcinit 7B00                  __ramtop 0800               _modeSelect 000B  
        __size_of_setPos 0018                  __ptext0 7E86                  __ptext1 7CB2  
                __ptext2 7B4A                  __ptext3 7B76                  __ptext4 7AEA  
                __ptext5 7B2E                  __ptext6 7BB2                  __ptext7 7C2E  
                __ptext8 2004                  __ptext9 7D7C           checkMode@i_151 0019  
                _initANA 7B2E        __end_of_initPorts 7BB2                  _initOsc 7AEA  
   end_of_initialization 7B0C          ??_initVariables 0014            __Lmediumconst 0000  
                setPos@a 0013                  setPos@b 000F                  setPos@c 0010  
                setPos@d 0011                  setPos@e 0012            _checkMode$150 0014  
          _checkMode$152 0016                  postinc0 000FEE     __size_of_pulseServos 00CA  
              _PORTEbits 000F84         ??_convertSensors 000F           __end_of_setPos 7B2E  
    start_initialization 7B00           _buttonWasLetGo 0008                 ??_setPos 0013  
            __pbssCOMRAM 0001                _checkMode 7D7C         _isPressedForMode 000A  
               ?___awdiv 000F                 ?_initANA 000F                 ?_initOsc 000F  
              _initPorts 7B76           __size_of_delay 007C                 _LATBbits 000F8A  
             ?_checkMode 000F         __CFG_WDTPS$32768 000000        __CFG_CFGPLLEN$OFF 000000  
             ?_initPorts 000F       checkMode@cTempMode 001A    __end_of_initVariables 7B76  
               __Hrparam 0000         pulseServos@i_163 0011         pulseServos@i_164 0012  
       pulseServos@i_165 0013         pulseServos@i_166 0014                 __Lrparam 0000  
               _cGesture 000C       __CFG_BOREN$SBORDIS 000000            ??_pulseServos 000F  
       __size_of___awdiv 0084         __size_of_initANA 001C         __size_of_initOsc 0016  
               __ptext10 7B16            __size_of_main 017A              ??_checkMode 0014  
    __end_of_pulseServos 7D7C              ??_initPorts 000F     __CFG_CPUDIV$NOCLKDIV 000000  
__size_of_convertSensors 0002       __CFG_FOSC$INTOSCIO 000000  
