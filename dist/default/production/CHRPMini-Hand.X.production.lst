

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Jun 19 23:54:44 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24  0000                     
    25                           ; Version 1.41
    26                           ; Generated 25/01/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F25K50 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     _ANSELC	set	3933
    60  0000                     _ANSELB	set	3932
    61  0000                     _ANSELA	set	3931
    62  0000                     _LATBbits	set	3978
    63  0000                     _PORTEbits	set	3972
    64  0000                     _ADRESH	set	4036
    65  0000                     _ADCON2	set	4032
    66  0000                     _ADCON1	set	4033
    67  0000                     _ADCON0	set	4034
    68  0000                     _PORTC	set	3970
    69  0000                     _PORTB	set	3969
    70  0000                     _PORTA	set	3968
    71  0000                     _T0CON	set	4053
    72  0000                     _TRISC	set	3988
    73  0000                     _LATC	set	3979
    74  0000                     _TRISB	set	3987
    75  0000                     _LATB	set	3978
    76  0000                     _TRISA	set	3986
    77  0000                     _LATA	set	3977
    78  0000                     _ACTCON	set	4021
    79  0000                     _OSCCON2	set	4050
    80  0000                     _OSCCON	set	4051
    81  0000                     _OSCTUNE	set	3995
    82  0000                     _GO	set	32273
    83  0000                     _ADON	set	32272
    84  0000                     _PLLRDY	set	32407
    85                           
    86                           ; #config settings
    87  0000                     
    88                           	psect	cinit
    89  0079EA                     __pcinit:
    90                           	opt stack 0
    91  0079EA                     start_initialization:
    92                           	opt stack 0
    93  0079EA                     __initialization:
    94                           	opt stack 0
    95                           
    96                           ; Clear objects allocated to COMRAM (16 bytes)
    97  0079EA  EE00  F001         	lfsr	0,__pbssCOMRAM
    98  0079EE  0E10               	movlw	16
    99  0079F0                     clear_0:
   100  0079F0  6AEE               	clrf	postinc0,c
   101  0079F2  06E8               	decf	wreg,f,c
   102  0079F4  E1FD               	bnz	clear_0
   103  0079F6                     end_of_initialization:
   104                           	opt stack 0
   105  0079F6                     __end_of__initialization:
   106                           	opt stack 0
   107  0079F6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   108  0079F8  6EF8               	movwf	tblptru,c
   109  0079FA  0100               	movlb	0
   110  0079FC  EF7E  F03D         	goto	_main	;jump to C main() function
   111                           tblptru	equ	0xFF8
   112                           postinc0	equ	0xFEE
   113                           wreg	equ	0xFE8
   114                           
   115                           	psect	bssCOMRAM
   116  000001                     __pbssCOMRAM:
   117                           	opt stack 0
   118  000001                     _arcPos:
   119                           	opt stack 0
   120  000001                     	ds	5
   121  000006                     _nDelay:
   122                           	opt stack 0
   123  000006                     	ds	2
   124  000008                     _buttonWasLetGo:
   125                           	opt stack 0
   126  000008                     	ds	1
   127  000009                     _isPressedForGesture:
   128                           	opt stack 0
   129  000009                     	ds	1
   130  00000A                     _isPressedForMode:
   131                           	opt stack 0
   132  00000A                     	ds	1
   133  00000B                     _modeSelect:
   134                           	opt stack 0
   135  00000B                     	ds	1
   136  00000C                     _cGesture:
   137                           	opt stack 0
   138  00000C                     	ds	1
   139  00000D                     _cCycleIncrement:
   140                           	opt stack 0
   141  00000D                     	ds	1
   142  00000E                     _cCountFingerCycle:
   143                           	opt stack 0
   144  00000E                     	ds	1
   145  00000F                     _cDelay:
   146                           	opt stack 0
   147  00000F                     	ds	1
   148  000010                     _cMode:
   149                           	opt stack 0
   150  000010                     	ds	1
   151                           tblptru	equ	0xFF8
   152                           postinc0	equ	0xFEE
   153                           wreg	equ	0xFE8
   154                           
   155                           	psect	cstackCOMRAM
   156  000011                     __pcstackCOMRAM:
   157                           	opt stack 0
   158  000011                     ??_pulseServos:
   159  000011                     ?___awdiv:
   160                           	opt stack 0
   161  000011                     setPos@b:
   162                           	opt stack 0
   163  000011                     adConvert@chan:
   164                           	opt stack 0
   165  000011                     ___awdiv@dividend:
   166                           	opt stack 0
   167                           
   168                           ; 2 bytes @ 0x0
   169  000011                     	ds	1
   170  000012                     setPos@c:
   171                           	opt stack 0
   172  000012                     pulseServos@i:
   173                           	opt stack 0
   174                           
   175                           ; 1 bytes @ 0x1
   176  000012                     	ds	1
   177  000013                     setPos@d:
   178                           	opt stack 0
   179  000013                     pulseServos@i_164:
   180                           	opt stack 0
   181  000013                     _convertSensors$173:
   182                           	opt stack 0
   183  000013                     ___awdiv@divisor:
   184                           	opt stack 0
   185                           
   186                           ; 2 bytes @ 0x2
   187  000013                     	ds	1
   188  000014                     setPos@e:
   189                           	opt stack 0
   190  000014                     pulseServos@i_165:
   191                           	opt stack 0
   192  000014                     convertSensors@cMax:
   193                           	opt stack 0
   194                           
   195                           ; 1 bytes @ 0x3
   196  000014                     	ds	1
   197  000015                     setPos@a:
   198                           	opt stack 0
   199  000015                     pulseServos@i_166:
   200                           	opt stack 0
   201  000015                     convertSensors@i:
   202                           	opt stack 0
   203  000015                     ___awdiv@counter:
   204                           	opt stack 0
   205                           
   206                           ; 1 bytes @ 0x4
   207  000015                     	ds	1
   208  000016                     pulseServos@i_167:
   209                           	opt stack 0
   210  000016                     ___awdiv@sign:
   211                           	opt stack 0
   212  000016                     _checkMode$151:
   213                           	opt stack 0
   214                           
   215                           ; 2 bytes @ 0x5
   216  000016                     	ds	1
   217  000017                     ___awdiv@quotient:
   218                           	opt stack 0
   219                           
   220                           ; 2 bytes @ 0x6
   221  000017                     	ds	1
   222  000018                     _checkMode$153:
   223                           	opt stack 0
   224                           
   225                           ; 2 bytes @ 0x7
   226  000018                     	ds	1
   227  000019                     ??_delay:
   228                           
   229                           ; 1 bytes @ 0x8
   230  000019                     	ds	1
   231  00001A                     checkMode@i:
   232                           	opt stack 0
   233                           
   234                           ; 1 bytes @ 0x9
   235  00001A                     	ds	1
   236  00001B                     checkMode@i_152:
   237                           	opt stack 0
   238                           
   239                           ; 1 bytes @ 0xA
   240  00001B                     	ds	1
   241  00001C                     checkMode@cTempMode:
   242                           	opt stack 0
   243                           
   244                           ; 1 bytes @ 0xB
   245  00001C                     	ds	1
   246  00001D                     delay@i:
   247                           	opt stack 0
   248                           
   249                           ; 2 bytes @ 0xC
   250  00001D                     	ds	2
   251  00001F                     tblptru	equ	0xFF8
   252                           postinc0	equ	0xFEE
   253                           wreg	equ	0xFE8
   254                           
   255                           ; 1 bytes @ 0xE
   256 ;;
   257 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   258 ;;
   259 ;; *************** function _main *****************
   260 ;; Defined at:
   261 ;;		line 306 in file "Hand.c"
   262 ;; Parameters:    Size  Location     Type
   263 ;;		None
   264 ;; Auto vars:     Size  Location     Type
   265 ;;		None
   266 ;; Return value:  Size  Location     Type
   267 ;;                  2  188[None  ] int 
   268 ;; Registers used:
   269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   270 ;; Tracked objects:
   271 ;;		On entry : 0/0
   272 ;;		On exit  : 0/0
   273 ;;		Unchanged: 0/0
   274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   275 ;;      Params:         0       0       0       0       0       0       0       0       0
   276 ;;      Locals:         0       0       0       0       0       0       0       0       0
   277 ;;      Temps:          0       0       0       0       0       0       0       0       0
   278 ;;      Totals:         0       0       0       0       0       0       0       0       0
   279 ;;Total ram usage:        0 bytes
   280 ;; Hardware stack levels required when called:    2
   281 ;; This function calls:
   282 ;;		_checkMode
   283 ;;		_commands
   284 ;;		_convertSensors
   285 ;;		_delay
   286 ;;		_heyKidWantSomeCandy
   287 ;;		_initANA
   288 ;;		_initOsc
   289 ;;		_initPorts
   290 ;;		_initVariables
   291 ;;		_pulseServos
   292 ;; This function is called by:
   293 ;;		Startup code after reset
   294 ;; This function uses a non-reentrant model
   295 ;;
   296                           
   297                           	psect	text0
   298  007AFC                     __ptext0:
   299                           	opt stack 0
   300  007AFC                     _main:
   301                           	opt stack 29
   302                           
   303                           ;Hand.c: 307: initOsc();
   304                           
   305                           ;incstack = 0
   306  007AFC  ECEA  F03C         	call	_initOsc	;wreg free
   307                           
   308                           ;Hand.c: 308: initPorts();
   309  007B00  EC60  F03D         	call	_initPorts	;wreg free
   310                           
   311                           ;Hand.c: 309: initANA();
   312  007B04  EC0C  F03D         	call	_initANA	;wreg free
   313                           
   314                           ;Hand.c: 310: initVariables();
   315  007B08  EC44  F03D         	call	_initVariables	;wreg free
   316  007B0C                     l1413:
   317                           
   318                           ;Hand.c: 312: if (!modeSelect) {
   319  007B0C  500B               	movf	_modeSelect,w,c
   320  007B0E  B4D8               	btfsc	status,2,c
   321  007B10  D00A               	goto	l1425
   322  007B12  D013               	goto	l1427
   323  007B14                     l1417:
   324                           
   325                           ;Hand.c: 315: convertSensors();
   326  007B14  EC25  F03E         	call	_convertSensors	;wreg free
   327                           
   328                           ;Hand.c: 316: break;
   329  007B18  D010               	goto	l1427
   330  007B1A                     l1419:
   331                           
   332                           ;Hand.c: 318: commands();
   333  007B1A  EC5E  F03F         	call	_commands	;wreg free
   334                           
   335                           ;Hand.c: 319: break;
   336  007B1E  D00D               	goto	l1427
   337  007B20                     l1421:
   338                           
   339                           ;Hand.c: 321: heyKidWantSomeCandy();
   340  007B20  EC2C  F03D         	call	_heyKidWantSomeCandy	;wreg free
   341                           
   342                           ;Hand.c: 325: }
   343                           
   344                           ;Hand.c: 324: break;
   345                           
   346                           ;Hand.c: 323: default:
   347                           
   348                           ;Hand.c: 322: break;
   349  007B24  D00A               	goto	l1427
   350  007B26                     l1425:
   351  007B26  5010               	movf	_cMode,w,c
   352                           
   353                           ; Switch size 1, requested type "space"
   354                           ; Number of cases is 3, Range of values is 0 to 2
   355                           ; switch strategies available:
   356                           ; Name         Instructions Cycles
   357                           ; simple_byte           10     6 (average)
   358                           ;	Chosen strategy is simple_byte
   359  007B28  0A00               	xorlw	0	; case 0
   360  007B2A  B4D8               	btfsc	status,2,c
   361  007B2C  D7F3               	goto	l1417
   362  007B2E  0A01               	xorlw	1	; case 1
   363  007B30  B4D8               	btfsc	status,2,c
   364  007B32  D7F3               	goto	l1419
   365  007B34  0A03               	xorlw	3	; case 2
   366  007B36  B4D8               	btfsc	status,2,c
   367  007B38  D7F3               	goto	l1421
   368  007B3A                     l1427:
   369                           
   370                           ;Hand.c: 326: }
   371                           ;Hand.c: 327: pulseServos();
   372  007B3A  EC74  F03E         	call	_pulseServos	;wreg free
   373                           
   374                           ;Hand.c: 328: delay();
   375  007B3E  ECA5  F03D         	call	_delay	;wreg free
   376                           
   377                           ;Hand.c: 329: cMode = checkMode();
   378  007B42  ECD9  F03E         	call	_checkMode	;wreg free
   379  007B46  6E10               	movwf	_cMode,c
   380  007B48  D7E1               	goto	l1413
   381  007B4A                     __end_of_main:
   382                           	opt stack 0
   383                           tblptru	equ	0xFF8
   384                           postinc0	equ	0xFEE
   385                           wreg	equ	0xFE8
   386                           status	equ	0xFD8
   387                           
   388 ;; *************** function _pulseServos *****************
   389 ;; Defined at:
   390 ;;		line 144 in file "Hand.c"
   391 ;; Parameters:    Size  Location     Type
   392 ;;		None
   393 ;; Auto vars:     Size  Location     Type
   394 ;;  i               1    5[COMRAM] unsigned char 
   395 ;;  i               1    4[COMRAM] unsigned char 
   396 ;;  i               1    3[COMRAM] unsigned char 
   397 ;;  i               1    2[COMRAM] unsigned char 
   398 ;;  i               1    1[COMRAM] unsigned char 
   399 ;; Return value:  Size  Location     Type
   400 ;;                  1    wreg      void 
   401 ;; Registers used:
   402 ;;		wreg, status,2, status,0
   403 ;; Tracked objects:
   404 ;;		On entry : 0/0
   405 ;;		On exit  : 0/0
   406 ;;		Unchanged: 0/0
   407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   408 ;;      Params:         0       0       0       0       0       0       0       0       0
   409 ;;      Locals:         5       0       0       0       0       0       0       0       0
   410 ;;      Temps:          1       0       0       0       0       0       0       0       0
   411 ;;      Totals:         6       0       0       0       0       0       0       0       0
   412 ;;Total ram usage:        6 bytes
   413 ;; Hardware stack levels used:    1
   414 ;; This function calls:
   415 ;;		Nothing
   416 ;; This function is called by:
   417 ;;		_main
   418 ;; This function uses a non-reentrant model
   419 ;;
   420                           
   421                           	psect	text1
   422  007CE8                     __ptext1:
   423                           	opt stack 0
   424  007CE8                     _pulseServos:
   425                           	opt stack 30
   426                           
   427                           ;Hand.c: 152: LATBbits.LATB7 = 1;
   428                           
   429                           ;incstack = 0
   430  007CE8  8E8A               	bsf	3978,7,c	;volatile
   431                           
   432                           ;Hand.c: 153: _delay((unsigned long)((540)*(48000000/4000000.0)));
   433  007CEA  0E09               	movlw	9
   434  007CEC  6E11               	movwf	??_pulseServos& (0+255),c
   435  007CEE  0E69               	movlw	105
   436  007CF0                     u987:
   437  007CF0  2EE8               	decfsz	wreg,f,c
   438  007CF2  D7FE               	bra	u987
   439  007CF4  2E11               	decfsz	??_pulseServos& (0+255),f,c
   440  007CF6  D7FC               	bra	u987
   441  007CF8  F000               	nop	
   442                           
   443                           ;Hand.c: 154: for (unsigned char i = arcPos[0]; i != 0; i--) {
   444  007CFA  C001  F012         	movff	_arcPos,pulseServos@i
   445  007CFE                     l969:
   446  007CFE  5012               	movf	pulseServos@i,w,c
   447  007D00  B4D8               	btfsc	status,2,c
   448  007D02  D005               	goto	l139
   449                           
   450                           ;Hand.c: 155: _delay((unsigned long)((6)*(48000000/4000000.0)));
   451  007D04  0E18               	movlw	24
   452  007D06                     u997:
   453  007D06  2EE8               	decfsz	wreg,f,c
   454  007D08  D7FE               	bra	u997
   455  007D0A  0612               	decf	pulseServos@i,f,c
   456  007D0C  D7F8               	goto	l969
   457  007D0E                     l139:
   458                           
   459                           ;Hand.c: 157: }
   460                           ;Hand.c: 158: LATBbits.LATB7 = 0;
   461  007D0E  9E8A               	bcf	3978,7,c	;volatile
   462                           
   463                           ;Hand.c: 161: LATBbits.LATB6 = 1;
   464  007D10  8C8A               	bsf	3978,6,c	;volatile
   465                           
   466                           ;Hand.c: 162: _delay((unsigned long)((540)*(48000000/4000000.0)));
   467  007D12  0E09               	movlw	9
   468  007D14  6E11               	movwf	??_pulseServos& (0+255),c
   469  007D16  0E69               	movlw	105
   470  007D18                     u1007:
   471  007D18  2EE8               	decfsz	wreg,f,c
   472  007D1A  D7FE               	bra	u1007
   473  007D1C  2E11               	decfsz	??_pulseServos& (0+255),f,c
   474  007D1E  D7FC               	bra	u1007
   475  007D20  F000               	nop	
   476                           
   477                           ;Hand.c: 163: for (unsigned char i = arcPos[1]; i != 0; i--) {
   478  007D22  C002  F013         	movff	_arcPos+1,pulseServos@i_164
   479  007D26                     l983:
   480  007D26  5013               	movf	pulseServos@i_164,w,c
   481  007D28  B4D8               	btfsc	status,2,c
   482  007D2A  D005               	goto	l141
   483                           
   484                           ;Hand.c: 164: _delay((unsigned long)((6)*(48000000/4000000.0)));
   485  007D2C  0E18               	movlw	24
   486  007D2E                     u1017:
   487  007D2E  2EE8               	decfsz	wreg,f,c
   488  007D30  D7FE               	bra	u1017
   489  007D32  0613               	decf	pulseServos@i_164,f,c
   490  007D34  D7F8               	goto	l983
   491  007D36                     l141:
   492                           
   493                           ;Hand.c: 165: }
   494                           ;Hand.c: 166: LATBbits.LATB6 = 0;
   495  007D36  9C8A               	bcf	3978,6,c	;volatile
   496                           
   497                           ;Hand.c: 169: LATBbits.LATB5 = 1;
   498  007D38  8A8A               	bsf	3978,5,c	;volatile
   499                           
   500                           ;Hand.c: 170: _delay((unsigned long)((540)*(48000000/4000000.0)));
   501  007D3A  0E09               	movlw	9
   502  007D3C  6E11               	movwf	??_pulseServos& (0+255),c
   503  007D3E  0E69               	movlw	105
   504  007D40                     u1027:
   505  007D40  2EE8               	decfsz	wreg,f,c
   506  007D42  D7FE               	bra	u1027
   507  007D44  2E11               	decfsz	??_pulseServos& (0+255),f,c
   508  007D46  D7FC               	bra	u1027
   509  007D48  F000               	nop	
   510                           
   511                           ;Hand.c: 171: for (unsigned char i = arcPos[2]; i != 0; i--) {
   512  007D4A  C003  F014         	movff	_arcPos+2,pulseServos@i_165
   513  007D4E                     l997:
   514  007D4E  5014               	movf	pulseServos@i_165,w,c
   515  007D50  B4D8               	btfsc	status,2,c
   516  007D52  D005               	goto	l143
   517                           
   518                           ;Hand.c: 172: _delay((unsigned long)((6)*(48000000/4000000.0)));
   519  007D54  0E18               	movlw	24
   520  007D56                     u1037:
   521  007D56  2EE8               	decfsz	wreg,f,c
   522  007D58  D7FE               	bra	u1037
   523  007D5A  0614               	decf	pulseServos@i_165,f,c
   524  007D5C  D7F8               	goto	l997
   525  007D5E                     l143:
   526                           
   527                           ;Hand.c: 173: }
   528                           ;Hand.c: 174: LATBbits.LATB5 = 0;
   529  007D5E  9A8A               	bcf	3978,5,c	;volatile
   530                           
   531                           ;Hand.c: 177: LATBbits.LATB4 = 1;
   532  007D60  888A               	bsf	3978,4,c	;volatile
   533                           
   534                           ;Hand.c: 178: _delay((unsigned long)((540)*(48000000/4000000.0)));
   535  007D62  0E09               	movlw	9
   536  007D64  6E11               	movwf	??_pulseServos& (0+255),c
   537  007D66  0E69               	movlw	105
   538  007D68                     u1047:
   539  007D68  2EE8               	decfsz	wreg,f,c
   540  007D6A  D7FE               	bra	u1047
   541  007D6C  2E11               	decfsz	??_pulseServos& (0+255),f,c
   542  007D6E  D7FC               	bra	u1047
   543  007D70  F000               	nop	
   544                           
   545                           ;Hand.c: 179: for (unsigned char i = arcPos[3]; i != 0; i--) {
   546  007D72  C004  F015         	movff	_arcPos+3,pulseServos@i_166
   547  007D76                     l1011:
   548  007D76  5015               	movf	pulseServos@i_166,w,c
   549  007D78  B4D8               	btfsc	status,2,c
   550  007D7A  D005               	goto	l145
   551                           
   552                           ;Hand.c: 180: _delay((unsigned long)((6)*(48000000/4000000.0)));
   553  007D7C  0E18               	movlw	24
   554  007D7E                     u1057:
   555  007D7E  2EE8               	decfsz	wreg,f,c
   556  007D80  D7FE               	bra	u1057
   557  007D82  0615               	decf	pulseServos@i_166,f,c
   558  007D84  D7F8               	goto	l1011
   559  007D86                     l145:
   560                           
   561                           ;Hand.c: 181: }
   562                           ;Hand.c: 182: LATBbits.LATB4 = 0;
   563  007D86  988A               	bcf	3978,4,c	;volatile
   564                           
   565                           ;Hand.c: 185: LATBbits.LATB2 = 1;
   566  007D88  848A               	bsf	3978,2,c	;volatile
   567                           
   568                           ;Hand.c: 186: _delay((unsigned long)((540)*(48000000/4000000.0)));
   569  007D8A  0E09               	movlw	9
   570  007D8C  6E11               	movwf	??_pulseServos& (0+255),c
   571  007D8E  0E69               	movlw	105
   572  007D90                     u1067:
   573  007D90  2EE8               	decfsz	wreg,f,c
   574  007D92  D7FE               	bra	u1067
   575  007D94  2E11               	decfsz	??_pulseServos& (0+255),f,c
   576  007D96  D7FC               	bra	u1067
   577  007D98  F000               	nop	
   578                           
   579                           ;Hand.c: 187: for (unsigned char i = arcPos[4]; i != 0; i--) {
   580  007D9A  C005  F016         	movff	_arcPos+4,pulseServos@i_167
   581  007D9E                     l1025:
   582  007D9E  5016               	movf	pulseServos@i_167,w,c
   583  007DA0  B4D8               	btfsc	status,2,c
   584  007DA2  D005               	goto	l147
   585                           
   586                           ;Hand.c: 188: _delay((unsigned long)((6)*(48000000/4000000.0)));
   587  007DA4  0E18               	movlw	24
   588  007DA6                     u1077:
   589  007DA6  2EE8               	decfsz	wreg,f,c
   590  007DA8  D7FE               	bra	u1077
   591  007DAA  0616               	decf	pulseServos@i_167,f,c
   592  007DAC  D7F8               	goto	l1025
   593  007DAE                     l147:
   594                           
   595                           ;Hand.c: 189: }
   596                           ;Hand.c: 190: LATBbits.LATB2 = 0;
   597  007DAE  948A               	bcf	3978,2,c	;volatile
   598  007DB0  0012               	return		;funcret
   599  007DB2                     __end_of_pulseServos:
   600                           	opt stack 0
   601                           tblptru	equ	0xFF8
   602                           postinc0	equ	0xFEE
   603                           wreg	equ	0xFE8
   604                           status	equ	0xFD8
   605                           
   606 ;; *************** function _initVariables *****************
   607 ;; Defined at:
   608 ;;		line 57 in file "Hand.c"
   609 ;; Parameters:    Size  Location     Type
   610 ;;		None
   611 ;; Auto vars:     Size  Location     Type
   612 ;;		None
   613 ;; Return value:  Size  Location     Type
   614 ;;                  1    wreg      void 
   615 ;; Registers used:
   616 ;;		wreg, status,2, cstack
   617 ;; Tracked objects:
   618 ;;		On entry : 0/0
   619 ;;		On exit  : 0/0
   620 ;;		Unchanged: 0/0
   621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   622 ;;      Params:         0       0       0       0       0       0       0       0       0
   623 ;;      Locals:         0       0       0       0       0       0       0       0       0
   624 ;;      Temps:          0       0       0       0       0       0       0       0       0
   625 ;;      Totals:         0       0       0       0       0       0       0       0       0
   626 ;;Total ram usage:        0 bytes
   627 ;; Hardware stack levels used:    1
   628 ;; Hardware stack levels required when called:    1
   629 ;; This function calls:
   630 ;;		_setPos
   631 ;; This function is called by:
   632 ;;		_main
   633 ;; This function uses a non-reentrant model
   634 ;;
   635                           
   636                           	psect	text2
   637  007A88                     __ptext2:
   638                           	opt stack 0
   639  007A88                     _initVariables:
   640                           	opt stack 29
   641                           
   642                           ;Hand.c: 58: setPos(0, 0, 0, 0, 0);
   643                           
   644                           ;incstack = 0
   645  007A88  0E00               	movlw	0
   646  007A8A  6E11               	movwf	setPos@b,c
   647  007A8C  0E00               	movlw	0
   648  007A8E  6E12               	movwf	setPos@c,c
   649  007A90  0E00               	movlw	0
   650  007A92  6E13               	movwf	setPos@d,c
   651  007A94  0E00               	movlw	0
   652  007A96  6E14               	movwf	setPos@e,c
   653  007A98  0E00               	movlw	0
   654  007A9A  EC00  F03D         	call	_setPos
   655                           
   656                           ;Hand.c: 59: modeSelect = 0;
   657  007A9E  0E00               	movlw	0
   658  007AA0  6E0B               	movwf	_modeSelect,c
   659                           
   660                           ;Hand.c: 60: isPressedForMode = 0;
   661  007AA2  0E00               	movlw	0
   662  007AA4  6E0A               	movwf	_isPressedForMode,c
   663                           
   664                           ;Hand.c: 61: isPressedForGesture = 0;
   665  007AA6  0E00               	movlw	0
   666  007AA8  6E09               	movwf	_isPressedForGesture,c
   667                           
   668                           ;Hand.c: 62: buttonWasLetGo = 1;
   669  007AAA  0E01               	movlw	1
   670  007AAC  6E08               	movwf	_buttonWasLetGo,c
   671                           
   672                           ;Hand.c: 63: cMode = 0;
   673  007AAE  0E00               	movlw	0
   674  007AB0  6E10               	movwf	_cMode,c
   675                           
   676                           ;Hand.c: 64: cDelay = 0;
   677  007AB2  0E00               	movlw	0
   678  007AB4  6E0F               	movwf	_cDelay,c
   679                           
   680                           ;Hand.c: 65: cCountFingerCycle = 5;
   681  007AB6  0E05               	movlw	5
   682  007AB8  6E0E               	movwf	_cCountFingerCycle,c
   683                           
   684                           ;Hand.c: 66: cCycleIncrement = 5;
   685  007ABA  0E05               	movlw	5
   686  007ABC  6E0D               	movwf	_cCycleIncrement,c
   687  007ABE  0012               	return		;funcret
   688  007AC0                     __end_of_initVariables:
   689                           	opt stack 0
   690                           tblptru	equ	0xFF8
   691                           postinc0	equ	0xFEE
   692                           wreg	equ	0xFE8
   693                           status	equ	0xFD8
   694                           
   695 ;; *************** function _initPorts *****************
   696 ;; Defined at:
   697 ;;		line 27 in file "CHRP3.c"
   698 ;; Parameters:    Size  Location     Type
   699 ;;		None
   700 ;; Auto vars:     Size  Location     Type
   701 ;;		None
   702 ;; Return value:  Size  Location     Type
   703 ;;                  1    wreg      void 
   704 ;; Registers used:
   705 ;;		wreg, status,2
   706 ;; Tracked objects:
   707 ;;		On entry : 0/0
   708 ;;		On exit  : 0/0
   709 ;;		Unchanged: 0/0
   710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   711 ;;      Params:         0       0       0       0       0       0       0       0       0
   712 ;;      Locals:         0       0       0       0       0       0       0       0       0
   713 ;;      Temps:          0       0       0       0       0       0       0       0       0
   714 ;;      Totals:         0       0       0       0       0       0       0       0       0
   715 ;;Total ram usage:        0 bytes
   716 ;; Hardware stack levels used:    1
   717 ;; This function calls:
   718 ;;		Nothing
   719 ;; This function is called by:
   720 ;;		_main
   721 ;; This function uses a non-reentrant model
   722 ;;
   723                           
   724                           	psect	text3
   725  007AC0                     __ptext3:
   726                           	opt stack 0
   727  007AC0                     _initPorts:
   728                           	opt stack 30
   729                           
   730                           ;CHRP3.c: 29: LATA = 0b00000000;
   731                           
   732                           ;incstack = 0
   733  007AC0  0E00               	movlw	0
   734  007AC2  6E89               	movwf	3977,c	;volatile
   735                           
   736                           ;CHRP3.c: 30: ANSELA = 0b00000000;
   737  007AC4  0E00               	movlw	0
   738  007AC6  010F               	movlb	15	; () banked
   739  007AC8  6F5B               	movwf	91,b	;volatile
   740                           
   741                           ;CHRP3.c: 31: TRISA = 0b00101111;
   742  007ACA  0E2F               	movlw	47
   743  007ACC  6E92               	movwf	3986,c	;volatile
   744                           
   745                           ;CHRP3.c: 33: LATB = 0b00000000;
   746  007ACE  0E00               	movlw	0
   747  007AD0  6E8A               	movwf	3978,c	;volatile
   748                           
   749                           ;CHRP3.c: 34: ANSELB = 0b00000000;
   750  007AD2  0E00               	movlw	0
   751  007AD4  010F               	movlb	15	; () banked
   752  007AD6  6F5C               	movwf	92,b	;volatile
   753                           
   754                           ;CHRP3.c: 35: TRISB = 0b00000000;
   755  007AD8  0E00               	movlw	0
   756  007ADA  6E93               	movwf	3987,c	;volatile
   757                           
   758                           ;CHRP3.c: 36: LATC = 0b00000000;
   759  007ADC  0E00               	movlw	0
   760  007ADE  6E8B               	movwf	3979,c	;volatile
   761                           
   762                           ;CHRP3.c: 37: ANSELC = 0b00000000;
   763  007AE0  0E00               	movlw	0
   764  007AE2  010F               	movlb	15	; () banked
   765  007AE4  6F5D               	movwf	93,b	;volatile
   766                           
   767                           ;CHRP3.c: 38: TRISC = 0b10110000;
   768  007AE6  0EB0               	movlw	176
   769  007AE8  6E94               	movwf	3988,c	;volatile
   770                           
   771                           ;CHRP3.c: 41: T0CON = 0b10000001;
   772  007AEA  0E81               	movlw	129
   773  007AEC  6ED5               	movwf	4053,c	;volatile
   774                           
   775                           ;CHRP3.c: 44: PORTA = 0;
   776  007AEE  0E00               	movlw	0
   777  007AF0  6E80               	movwf	3968,c	;volatile
   778                           
   779                           ;CHRP3.c: 45: PORTB = 0;
   780  007AF2  0E00               	movlw	0
   781  007AF4  6E81               	movwf	3969,c	;volatile
   782                           
   783                           ;CHRP3.c: 46: PORTC = 0;
   784  007AF6  0E00               	movlw	0
   785  007AF8  6E82               	movwf	3970,c	;volatile
   786                           
   787                           ; BSR set to: 15
   788  007AFA  0012               	return		;funcret
   789  007AFC                     __end_of_initPorts:
   790                           	opt stack 0
   791                           tblptru	equ	0xFF8
   792                           postinc0	equ	0xFEE
   793                           wreg	equ	0xFE8
   794                           status	equ	0xFD8
   795                           
   796 ;; *************** function _initOsc *****************
   797 ;; Defined at:
   798 ;;		line 16 in file "CHRP3.c"
   799 ;; Parameters:    Size  Location     Type
   800 ;;		None
   801 ;; Auto vars:     Size  Location     Type
   802 ;;		None
   803 ;; Return value:  Size  Location     Type
   804 ;;                  1    wreg      void 
   805 ;; Registers used:
   806 ;;		wreg, status,2
   807 ;; Tracked objects:
   808 ;;		On entry : 0/0
   809 ;;		On exit  : 0/0
   810 ;;		Unchanged: 0/0
   811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   812 ;;      Params:         0       0       0       0       0       0       0       0       0
   813 ;;      Locals:         0       0       0       0       0       0       0       0       0
   814 ;;      Temps:          0       0       0       0       0       0       0       0       0
   815 ;;      Totals:         0       0       0       0       0       0       0       0       0
   816 ;;Total ram usage:        0 bytes
   817 ;; Hardware stack levels used:    1
   818 ;; This function calls:
   819 ;;		Nothing
   820 ;; This function is called by:
   821 ;;		_main
   822 ;; This function uses a non-reentrant model
   823 ;;
   824                           
   825                           	psect	text4
   826  0079D4                     __ptext4:
   827                           	opt stack 0
   828  0079D4                     _initOsc:
   829                           	opt stack 30
   830                           
   831                           ;CHRP3.c: 18: OSCTUNE = 0x80;
   832                           
   833                           ; BSR set to: 15
   834                           ;incstack = 0
   835  0079D4  0E80               	movlw	128
   836  0079D6  6E9B               	movwf	3995,c	;volatile
   837                           
   838                           ;CHRP3.c: 19: OSCCON = 0x70;
   839  0079D8  0E70               	movlw	112
   840  0079DA  6ED3               	movwf	4051,c	;volatile
   841                           
   842                           ;CHRP3.c: 20: OSCCON2 = 0x10;
   843  0079DC  0E10               	movlw	16
   844  0079DE  6ED2               	movwf	4050,c	;volatile
   845                           
   846                           ;CHRP3.c: 21: ACTCON = 0x90;
   847  0079E0  0E90               	movlw	144
   848  0079E2  6EB5               	movwf	4021,c	;volatile
   849  0079E4                     l45:
   850  0079E4  BED2               	btfsc	4050,7,c	;volatile
   851  0079E6  0012               	return	
   852  0079E8  D7FD               	goto	l45
   853  0079EA                     __end_of_initOsc:
   854                           	opt stack 0
   855                           tblptru	equ	0xFF8
   856                           postinc0	equ	0xFEE
   857                           wreg	equ	0xFE8
   858                           status	equ	0xFD8
   859                           
   860 ;; *************** function _initANA *****************
   861 ;; Defined at:
   862 ;;		line 52 in file "CHRP3.c"
   863 ;; Parameters:    Size  Location     Type
   864 ;;		None
   865 ;; Auto vars:     Size  Location     Type
   866 ;;		None
   867 ;; Return value:  Size  Location     Type
   868 ;;                  1    wreg      void 
   869 ;; Registers used:
   870 ;;		wreg, status,2
   871 ;; Tracked objects:
   872 ;;		On entry : 0/0
   873 ;;		On exit  : 0/0
   874 ;;		Unchanged: 0/0
   875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   876 ;;      Params:         0       0       0       0       0       0       0       0       0
   877 ;;      Locals:         0       0       0       0       0       0       0       0       0
   878 ;;      Temps:          0       0       0       0       0       0       0       0       0
   879 ;;      Totals:         0       0       0       0       0       0       0       0       0
   880 ;;Total ram usage:        0 bytes
   881 ;; Hardware stack levels used:    1
   882 ;; This function calls:
   883 ;;		Nothing
   884 ;; This function is called by:
   885 ;;		_main
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889                           	psect	text5
   890  007A18                     __ptext5:
   891                           	opt stack 0
   892  007A18                     _initANA:
   893                           	opt stack 30
   894                           
   895                           ;CHRP3.c: 54: LATA = 0b00000000;
   896                           
   897                           ;incstack = 0
   898  007A18  0E00               	movlw	0
   899  007A1A  6E89               	movwf	3977,c	;volatile
   900                           
   901                           ;CHRP3.c: 55: ANSELA = 0b0011111;
   902  007A1C  0E1F               	movlw	31
   903  007A1E  010F               	movlb	15	; () banked
   904  007A20  6F5B               	movwf	91,b	;volatile
   905                           
   906                           ;CHRP3.c: 56: ADCON0 = 0b00000000;
   907  007A22  0E00               	movlw	0
   908  007A24  6EC2               	movwf	4034,c	;volatile
   909                           
   910                           ;CHRP3.c: 57: ADCON1 = 0b00000000;
   911  007A26  0E00               	movlw	0
   912  007A28  6EC1               	movwf	4033,c	;volatile
   913                           
   914                           ;CHRP3.c: 58: ADCON2 = 0b00001110;
   915  007A2A  0E0E               	movlw	14
   916  007A2C  6EC0               	movwf	4032,c	;volatile
   917                           
   918                           ;CHRP3.c: 59: TRISA = 0b00101111;
   919  007A2E  0E2F               	movlw	47
   920  007A30  6E92               	movwf	3986,c	;volatile
   921                           
   922                           ; BSR set to: 15
   923  007A32  0012               	return		;funcret
   924  007A34                     __end_of_initANA:
   925                           	opt stack 0
   926                           tblptru	equ	0xFF8
   927                           postinc0	equ	0xFEE
   928                           wreg	equ	0xFE8
   929                           status	equ	0xFD8
   930                           
   931 ;; *************** function _heyKidWantSomeCandy *****************
   932 ;; Defined at:
   933 ;;		line 295 in file "Hand.c"
   934 ;; Parameters:    Size  Location     Type
   935 ;;		None
   936 ;; Auto vars:     Size  Location     Type
   937 ;;		None
   938 ;; Return value:  Size  Location     Type
   939 ;;                  1    wreg      void 
   940 ;; Registers used:
   941 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   942 ;; Tracked objects:
   943 ;;		On entry : 0/0
   944 ;;		On exit  : 0/0
   945 ;;		Unchanged: 0/0
   946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   947 ;;      Params:         0       0       0       0       0       0       0       0       0
   948 ;;      Locals:         0       0       0       0       0       0       0       0       0
   949 ;;      Temps:          0       0       0       0       0       0       0       0       0
   950 ;;      Totals:         0       0       0       0       0       0       0       0       0
   951 ;;Total ram usage:        0 bytes
   952 ;; Hardware stack levels used:    1
   953 ;; Hardware stack levels required when called:    1
   954 ;; This function calls:
   955 ;;		_setPos
   956 ;; This function is called by:
   957 ;;		_main
   958 ;; This function uses a non-reentrant model
   959 ;;
   960                           
   961                           	psect	text6
   962  007A58                     __ptext6:
   963                           	opt stack 0
   964  007A58                     _heyKidWantSomeCandy:
   965                           	opt stack 29
   966                           
   967                           ;Hand.c: 296: setPos(255, cCountFingerCycle, 255, 255, 255);
   968                           
   969                           ; BSR set to: 15
   970                           ;incstack = 0
   971  007A58  C00E  F011         	movff	_cCountFingerCycle,setPos@b
   972  007A5C  0EFF               	movlw	255
   973  007A5E  6E12               	movwf	setPos@c,c
   974  007A60  0EFF               	movlw	255
   975  007A62  6E13               	movwf	setPos@d,c
   976  007A64  0EFF               	movlw	255
   977  007A66  6E14               	movwf	setPos@e,c
   978  007A68  0EFF               	movlw	255
   979  007A6A  EC00  F03D         	call	_setPos
   980                           
   981                           ;Hand.c: 297: cCountFingerCycle += cCycleIncrement;
   982  007A6E  500D               	movf	_cCycleIncrement,w,c
   983  007A70  260E               	addwf	_cCountFingerCycle,f,c
   984                           
   985                           ;Hand.c: 298: if (cCountFingerCycle == 255 || cCountFingerCycle == 0) {
   986  007A72  280E               	incf	_cCountFingerCycle,w,c
   987  007A74  B4D8               	btfsc	status,2,c
   988  007A76  D003               	goto	l1409
   989  007A78  500E               	movf	_cCountFingerCycle,w,c
   990  007A7A  A4D8               	btfss	status,2,c
   991  007A7C  0012               	return	
   992  007A7E                     l1409:
   993                           
   994                           ;Hand.c: 299: cCycleIncrement *= -1;
   995  007A7E  0EFF               	movlw	255
   996  007A80  020D               	mulwf	_cCycleIncrement,c
   997  007A82  50F3               	movf	prodl,w,c
   998  007A84  6E0D               	movwf	_cCycleIncrement,c
   999  007A86  0012               	return	
  1000  007A88                     __end_of_heyKidWantSomeCandy:
  1001                           	opt stack 0
  1002                           tblptru	equ	0xFF8
  1003                           prodl	equ	0xFF3
  1004                           postinc0	equ	0xFEE
  1005                           wreg	equ	0xFE8
  1006                           status	equ	0xFD8
  1007                           
  1008 ;; *************** function _delay *****************
  1009 ;; Defined at:
  1010 ;;		line 201 in file "Hand.c"
  1011 ;; Parameters:    Size  Location     Type
  1012 ;;		None
  1013 ;; Auto vars:     Size  Location     Type
  1014 ;;  i               2   12[COMRAM] int 
  1015 ;; Return value:  Size  Location     Type
  1016 ;;                  1    wreg      void 
  1017 ;; Registers used:
  1018 ;;		wreg, status,2, status,0, cstack
  1019 ;; Tracked objects:
  1020 ;;		On entry : 0/0
  1021 ;;		On exit  : 0/0
  1022 ;;		Unchanged: 0/0
  1023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1024 ;;      Params:         0       0       0       0       0       0       0       0       0
  1025 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1026 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1027 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1028 ;;Total ram usage:        6 bytes
  1029 ;; Hardware stack levels used:    1
  1030 ;; Hardware stack levels required when called:    1
  1031 ;; This function calls:
  1032 ;;		___awdiv
  1033 ;; This function is called by:
  1034 ;;		_main
  1035 ;; This function uses a non-reentrant model
  1036 ;;
  1037                           
  1038                           	psect	text7
  1039  007B4A                     __ptext7:
  1040                           	opt stack 0
  1041  007B4A                     _delay:
  1042                           	opt stack 29
  1043                           
  1044                           ;Hand.c: 202: nDelay = (int) ((20000 - 2500 - 540 * 5 - arcPos[0] - arcPos[1] - arcPos[2
      +                          ] - arcPos[3] - arcPos[4]) / 6);
  1045                           
  1046                           ;incstack = 0
  1047  007B4A  0E50               	movlw	80
  1048  007B4C  6E19               	movwf	??_delay& (0+255),c
  1049  007B4E  0E14               	movlw	20
  1050  007B50  6E1A               	movwf	(??_delay+1)& (0+255),c
  1051  007B52  5002               	movf	_arcPos+1,w,c
  1052  007B54  C001  F01B         	movff	_arcPos,??_delay+2
  1053  007B58  6A1C               	clrf	(??_delay+3)& (0+255),c
  1054  007B5A  261B               	addwf	??_delay+2,f,c
  1055  007B5C  0E00               	movlw	0
  1056  007B5E  221C               	addwfc	??_delay+3,f,c
  1057  007B60  5003               	movf	_arcPos+2,w,c
  1058  007B62  261B               	addwf	??_delay+2,f,c
  1059  007B64  0E00               	movlw	0
  1060  007B66  221C               	addwfc	??_delay+3,f,c
  1061  007B68  5004               	movf	_arcPos+3,w,c
  1062  007B6A  261B               	addwf	??_delay+2,f,c
  1063  007B6C  0E00               	movlw	0
  1064  007B6E  221C               	addwfc	??_delay+3,f,c
  1065  007B70  5005               	movf	_arcPos+4,w,c
  1066  007B72  261B               	addwf	??_delay+2,f,c
  1067  007B74  0E00               	movlw	0
  1068  007B76  221C               	addwfc	??_delay+3,f,c
  1069  007B78  5019               	movf	??_delay,w,c
  1070  007B7A  261B               	addwf	??_delay+2,f,c
  1071  007B7C  501A               	movf	??_delay+1,w,c
  1072  007B7E  221C               	addwfc	??_delay+3,f,c
  1073  007B80  1E1B               	comf	??_delay+2,f,c
  1074  007B82  1E1C               	comf	??_delay+3,f,c
  1075  007B84  4A1B               	infsnz	??_delay+2,f,c
  1076  007B86  2A1C               	incf	??_delay+3,f,c
  1077  007B88  0E20               	movlw	32
  1078  007B8A  241B               	addwf	??_delay+2,w,c
  1079  007B8C  6E11               	movwf	___awdiv@dividend,c
  1080  007B8E  0E4E               	movlw	78
  1081  007B90  201C               	addwfc	??_delay+3,w,c
  1082  007B92  6E12               	movwf	___awdiv@dividend+1,c
  1083  007B94  0E00               	movlw	0
  1084  007B96  6E14               	movwf	___awdiv@divisor+1,c
  1085  007B98  0E06               	movlw	6
  1086  007B9A  6E13               	movwf	___awdiv@divisor,c
  1087  007B9C  ECE3  F03D         	call	___awdiv	;wreg free
  1088  007BA0  C011  F006         	movff	?___awdiv,_nDelay
  1089  007BA4  C012  F007         	movff	?___awdiv+1,_nDelay+1
  1090                           
  1091                           ;Hand.c: 203: for (int i = nDelay; i != 0; i--) {
  1092  007BA8  C006  F01D         	movff	_nDelay,delay@i
  1093  007BAC  C007  F01E         	movff	_nDelay+1,delay@i+1
  1094  007BB0                     l1317:
  1095  007BB0  501D               	movf	delay@i,w,c
  1096  007BB2  101E               	iorwf	delay@i+1,w,c
  1097  007BB4  B4D8               	btfsc	status,2,c
  1098  007BB6  0012               	return	
  1099                           
  1100                           ;Hand.c: 204: _delay((unsigned long)((6)*(48000000/4000000.0)));
  1101  007BB8  0E18               	movlw	24
  1102  007BBA                     u1087:
  1103  007BBA  2EE8               	decfsz	wreg,f,c
  1104  007BBC  D7FE               	bra	u1087
  1105  007BBE  061D               	decf	delay@i,f,c
  1106  007BC0  A0D8               	btfss	status,0,c
  1107  007BC2  061E               	decf	delay@i+1,f,c
  1108  007BC4  D7F5               	goto	l1317
  1109  007BC6                     __end_of_delay:
  1110                           	opt stack 0
  1111                           tblptru	equ	0xFF8
  1112                           prodl	equ	0xFF3
  1113                           postinc0	equ	0xFEE
  1114                           wreg	equ	0xFE8
  1115                           status	equ	0xFD8
  1116                           
  1117 ;; *************** function ___awdiv *****************
  1118 ;; Defined at:
  1119 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;  dividend        2    0[COMRAM] int 
  1122 ;;  divisor         2    2[COMRAM] int 
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;  quotient        2    6[COMRAM] int 
  1125 ;;  sign            1    5[COMRAM] unsigned char 
  1126 ;;  counter         1    4[COMRAM] unsigned char 
  1127 ;; Return value:  Size  Location     Type
  1128 ;;                  2    0[COMRAM] int 
  1129 ;; Registers used:
  1130 ;;		wreg, status,2, status,0
  1131 ;; Tracked objects:
  1132 ;;		On entry : 0/0
  1133 ;;		On exit  : 0/0
  1134 ;;		Unchanged: 0/0
  1135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1136 ;;      Params:         4       0       0       0       0       0       0       0       0
  1137 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1138 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1139 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1140 ;;Total ram usage:        8 bytes
  1141 ;; Hardware stack levels used:    1
  1142 ;; This function calls:
  1143 ;;		Nothing
  1144 ;; This function is called by:
  1145 ;;		_delay
  1146 ;; This function uses a non-reentrant model
  1147 ;;
  1148                           
  1149                           	psect	text8
  1150  007BC6                     __ptext8:
  1151                           	opt stack 0
  1152  007BC6                     ___awdiv:
  1153                           	opt stack 29
  1154                           
  1155                           ;incstack = 0
  1156  007BC6  0E00               	movlw	0
  1157  007BC8  6E16               	movwf	___awdiv@sign,c
  1158  007BCA  AE14               	btfss	___awdiv@divisor+1,7,c
  1159  007BCC  D006               	goto	l1189
  1160  007BCE  6C13               	negf	___awdiv@divisor,c
  1161  007BD0  1E14               	comf	___awdiv@divisor+1,f,c
  1162  007BD2  B0D8               	btfsc	status,0,c
  1163  007BD4  2A14               	incf	___awdiv@divisor+1,f,c
  1164  007BD6  0E01               	movlw	1
  1165  007BD8  6E16               	movwf	___awdiv@sign,c
  1166  007BDA                     l1189:
  1167  007BDA  AE12               	btfss	___awdiv@dividend+1,7,c
  1168  007BDC  D006               	goto	l1195
  1169  007BDE  6C11               	negf	___awdiv@dividend,c
  1170  007BE0  1E12               	comf	___awdiv@dividend+1,f,c
  1171  007BE2  B0D8               	btfsc	status,0,c
  1172  007BE4  2A12               	incf	___awdiv@dividend+1,f,c
  1173  007BE6  0E01               	movlw	1
  1174  007BE8  1A16               	xorwf	___awdiv@sign,f,c
  1175  007BEA                     l1195:
  1176  007BEA  0E00               	movlw	0
  1177  007BEC  6E18               	movwf	___awdiv@quotient+1,c
  1178  007BEE  0E00               	movlw	0
  1179  007BF0  6E17               	movwf	___awdiv@quotient,c
  1180  007BF2  5013               	movf	___awdiv@divisor,w,c
  1181  007BF4  1014               	iorwf	___awdiv@divisor+1,w,c
  1182  007BF6  B4D8               	btfsc	status,2,c
  1183  007BF8  D01C               	goto	l1217
  1184  007BFA  0E01               	movlw	1
  1185  007BFC  6E15               	movwf	___awdiv@counter,c
  1186  007BFE  D004               	goto	l1203
  1187  007C00                     l1201:
  1188  007C00  90D8               	bcf	status,0,c
  1189  007C02  3613               	rlcf	___awdiv@divisor,f,c
  1190  007C04  3614               	rlcf	___awdiv@divisor+1,f,c
  1191  007C06  2A15               	incf	___awdiv@counter,f,c
  1192  007C08                     l1203:
  1193  007C08  AE14               	btfss	___awdiv@divisor+1,7,c
  1194  007C0A  D7FA               	goto	l1201
  1195  007C0C                     l1205:
  1196  007C0C  90D8               	bcf	status,0,c
  1197  007C0E  3617               	rlcf	___awdiv@quotient,f,c
  1198  007C10  3618               	rlcf	___awdiv@quotient+1,f,c
  1199  007C12  5013               	movf	___awdiv@divisor,w,c
  1200  007C14  5C11               	subwf	___awdiv@dividend,w,c
  1201  007C16  5014               	movf	___awdiv@divisor+1,w,c
  1202  007C18  5812               	subwfb	___awdiv@dividend+1,w,c
  1203  007C1A  A0D8               	btfss	status,0,c
  1204  007C1C  D005               	goto	l1213
  1205  007C1E  5013               	movf	___awdiv@divisor,w,c
  1206  007C20  5E11               	subwf	___awdiv@dividend,f,c
  1207  007C22  5014               	movf	___awdiv@divisor+1,w,c
  1208  007C24  5A12               	subwfb	___awdiv@dividend+1,f,c
  1209  007C26  8017               	bsf	___awdiv@quotient,0,c
  1210  007C28                     l1213:
  1211  007C28  90D8               	bcf	status,0,c
  1212  007C2A  3214               	rrcf	___awdiv@divisor+1,f,c
  1213  007C2C  3213               	rrcf	___awdiv@divisor,f,c
  1214  007C2E  2E15               	decfsz	___awdiv@counter,f,c
  1215  007C30  D7ED               	goto	l1205
  1216  007C32                     l1217:
  1217  007C32  5016               	movf	___awdiv@sign,w,c
  1218  007C34  B4D8               	btfsc	status,2,c
  1219  007C36  D004               	goto	l1221
  1220  007C38  6C17               	negf	___awdiv@quotient,c
  1221  007C3A  1E18               	comf	___awdiv@quotient+1,f,c
  1222  007C3C  B0D8               	btfsc	status,0,c
  1223  007C3E  2A18               	incf	___awdiv@quotient+1,f,c
  1224  007C40                     l1221:
  1225  007C40  C017  F011         	movff	___awdiv@quotient,?___awdiv
  1226  007C44  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  1227  007C48  0012               	return	
  1228  007C4A                     __end_of___awdiv:
  1229                           	opt stack 0
  1230                           tblptru	equ	0xFF8
  1231                           prodl	equ	0xFF3
  1232                           postinc0	equ	0xFEE
  1233                           wreg	equ	0xFE8
  1234                           status	equ	0xFD8
  1235                           
  1236 ;; *************** function _convertSensors *****************
  1237 ;; Defined at:
  1238 ;;		line 213 in file "Hand.c"
  1239 ;; Parameters:    Size  Location     Type
  1240 ;;		None
  1241 ;; Auto vars:     Size  Location     Type
  1242 ;;  i               1    4[COMRAM] unsigned char 
  1243 ;;  cMax            1    3[COMRAM] unsigned char 
  1244 ;; Return value:  Size  Location     Type
  1245 ;;                  1    wreg      void 
  1246 ;; Registers used:
  1247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1248 ;; Tracked objects:
  1249 ;;		On entry : 0/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1253 ;;      Params:         0       0       0       0       0       0       0       0       0
  1254 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1255 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1256 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1257 ;;Total ram usage:        4 bytes
  1258 ;; Hardware stack levels used:    1
  1259 ;; Hardware stack levels required when called:    1
  1260 ;; This function calls:
  1261 ;;		_adConvert
  1262 ;; This function is called by:
  1263 ;;		_main
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text9
  1268  007C4A                     __ptext9:
  1269                           	opt stack 0
  1270  007C4A                     _convertSensors:
  1271                           	opt stack 29
  1272                           
  1273                           ;Hand.c: 214: arcPos[0] = adConvert(0b00000000);
  1274                           
  1275                           ;incstack = 0
  1276  007C4A  0E00               	movlw	0
  1277  007C4C  EC1A  F03D         	call	_adConvert
  1278  007C50  6E01               	movwf	_arcPos,c
  1279                           
  1280                           ;Hand.c: 215: arcPos[1] = adConvert(0b00000100);
  1281  007C52  0E04               	movlw	4
  1282  007C54  EC1A  F03D         	call	_adConvert
  1283  007C58  6E02               	movwf	_arcPos+1,c
  1284                           
  1285                           ;Hand.c: 216: arcPos[2] = adConvert(0b00001000);
  1286  007C5A  0E08               	movlw	8
  1287  007C5C  EC1A  F03D         	call	_adConvert
  1288  007C60  6E03               	movwf	_arcPos+2,c
  1289                           
  1290                           ;Hand.c: 217: arcPos[3] = adConvert(0b00001100);
  1291  007C62  0E0C               	movlw	12
  1292  007C64  EC1A  F03D         	call	_adConvert
  1293  007C68  6E04               	movwf	_arcPos+3,c
  1294                           
  1295                           ;Hand.c: 218: arcPos[4] = adConvert(0b00010000);
  1296  007C6A  0E10               	movlw	16
  1297  007C6C  EC1A  F03D         	call	_adConvert
  1298  007C70  6E05               	movwf	_arcPos+4,c
  1299                           
  1300                           ;Hand.c: 221: unsigned char cMax = 0;
  1301  007C72  0E00               	movlw	0
  1302  007C74  6E14               	movwf	convertSensors@cMax,c
  1303                           
  1304                           ;Hand.c: 222: if (arcPos[2] > (arcPos[0] && arcPos[1] && arcPos[3] && arcPos[4])) {
  1305  007C76  0E00               	movlw	0
  1306  007C78  6E13               	movwf	_convertSensors$173,c
  1307  007C7A  5001               	movf	_arcPos,w,c
  1308  007C7C  B4D8               	btfsc	status,2,c
  1309  007C7E  D00B               	goto	l1341
  1310  007C80  5002               	movf	_arcPos+1,w,c
  1311  007C82  B4D8               	btfsc	status,2,c
  1312  007C84  D008               	goto	l1341
  1313  007C86  5004               	movf	_arcPos+3,w,c
  1314  007C88  B4D8               	btfsc	status,2,c
  1315  007C8A  D005               	goto	l1341
  1316  007C8C  5005               	movf	_arcPos+4,w,c
  1317  007C8E  B4D8               	btfsc	status,2,c
  1318  007C90  D002               	goto	l1341
  1319  007C92  0E01               	movlw	1
  1320  007C94  6E13               	movwf	_convertSensors$173,c
  1321  007C96                     l1341:
  1322  007C96  5003               	movf	_arcPos+2,w,c
  1323  007C98  5C13               	subwf	_convertSensors$173,w,c
  1324  007C9A  B0D8               	btfsc	status,0,c
  1325  007C9C  0012               	return	
  1326                           
  1327                           ;Hand.c: 225: for (unsigned char i = 0; i < 5; i++) {
  1328  007C9E  0E00               	movlw	0
  1329  007CA0  6E15               	movwf	convertSensors@i,c
  1330  007CA2                     l1345:
  1331  007CA2  0E04               	movlw	4
  1332  007CA4  6415               	cpfsgt	convertSensors@i,c
  1333  007CA6  D001               	goto	l1349
  1334  007CA8  D01C               	goto	l160
  1335  007CAA                     l1349:
  1336                           
  1337                           ;Hand.c: 226: if (arcPos[i] > cMax && i != 2) {
  1338  007CAA  5015               	movf	convertSensors@i,w,c
  1339  007CAC  0D01               	mullw	1
  1340  007CAE  0E01               	movlw	low _arcPos
  1341  007CB0  24F3               	addwf	prodl,w,c
  1342  007CB2  6ED9               	movwf	fsr2l,c
  1343  007CB4  0E00               	movlw	high _arcPos
  1344  007CB6  20F4               	addwfc	prodh,w,c
  1345  007CB8  6EDA               	movwf	fsr2h,c
  1346  007CBA  50DE               	movf	postinc2,w,c
  1347  007CBC  5C14               	subwf	convertSensors@cMax,w,c
  1348  007CBE  B0D8               	btfsc	status,0,c
  1349  007CC0  D00E               	goto	l1355
  1350  007CC2  0E02               	movlw	2
  1351  007CC4  1815               	xorwf	convertSensors@i,w,c
  1352  007CC6  B4D8               	btfsc	status,2,c
  1353  007CC8  D00A               	goto	l1355
  1354                           
  1355                           ;Hand.c: 227: arcPos[i] = cMax;
  1356  007CCA  5015               	movf	convertSensors@i,w,c
  1357  007CCC  0D01               	mullw	1
  1358  007CCE  0E01               	movlw	low _arcPos
  1359  007CD0  24F3               	addwf	prodl,w,c
  1360  007CD2  6ED9               	movwf	fsr2l,c
  1361  007CD4  0E00               	movlw	high _arcPos
  1362  007CD6  20F4               	addwfc	prodh,w,c
  1363  007CD8  6EDA               	movwf	fsr2h,c
  1364  007CDA  C014  FFDF         	movff	convertSensors@cMax,indf2
  1365  007CDE                     l1355:
  1366  007CDE  2A15               	incf	convertSensors@i,f,c
  1367  007CE0  D7E0               	goto	l1345
  1368  007CE2                     l160:
  1369                           
  1370                           ;Hand.c: 228: }
  1371                           ;Hand.c: 229: }
  1372                           ;Hand.c: 230: arcPos[2] = cMax;
  1373  007CE2  C014  F003         	movff	convertSensors@cMax,_arcPos+2
  1374  007CE6  0012               	return	
  1375  007CE8                     __end_of_convertSensors:
  1376                           	opt stack 0
  1377                           tblptru	equ	0xFF8
  1378                           prodh	equ	0xFF4
  1379                           prodl	equ	0xFF3
  1380                           postinc0	equ	0xFEE
  1381                           wreg	equ	0xFE8
  1382                           indf2	equ	0xFDF
  1383                           postinc2	equ	0xFDE
  1384                           fsr2h	equ	0xFDA
  1385                           fsr2l	equ	0xFD9
  1386                           status	equ	0xFD8
  1387                           
  1388 ;; *************** function _adConvert *****************
  1389 ;; Defined at:
  1390 ;;		line 74 in file "Hand.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;  chan            1    wreg     unsigned char 
  1393 ;; Auto vars:     Size  Location     Type
  1394 ;;  chan            1    0[COMRAM] unsigned char 
  1395 ;; Return value:  Size  Location     Type
  1396 ;;                  1    wreg      unsigned char 
  1397 ;; Registers used:
  1398 ;;		wreg, status,2, status,0
  1399 ;; Tracked objects:
  1400 ;;		On entry : 0/0
  1401 ;;		On exit  : 0/0
  1402 ;;		Unchanged: 0/0
  1403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1404 ;;      Params:         0       0       0       0       0       0       0       0       0
  1405 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1406 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1407 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1408 ;;Total ram usage:        1 bytes
  1409 ;; Hardware stack levels used:    1
  1410 ;; This function calls:
  1411 ;;		Nothing
  1412 ;; This function is called by:
  1413 ;;		_convertSensors
  1414 ;; This function uses a non-reentrant model
  1415 ;;
  1416                           
  1417                           	psect	text10
  1418  007A34                     __ptext10:
  1419                           	opt stack 0
  1420  007A34                     _adConvert:
  1421                           	opt stack 29
  1422                           
  1423                           ;incstack = 0
  1424                           ;adConvert@chan stored from wreg
  1425  007A34  6E11               	movwf	adConvert@chan,c
  1426                           
  1427                           ;Hand.c: 75: ADON = 1;
  1428  007A36  80C2               	bsf	4034,0,c	;volatile
  1429                           
  1430                           ;Hand.c: 76: ADCON0 = (ADCON0 & 0b11000011);
  1431  007A38  50C2               	movf	4034,w,c	;volatile
  1432  007A3A  0BC3               	andlw	195
  1433  007A3C  6EC2               	movwf	4034,c	;volatile
  1434                           
  1435                           ;Hand.c: 77: ADCON0 = (ADCON0 | chan);
  1436  007A3E  50C2               	movf	4034,w,c	;volatile
  1437  007A40  1011               	iorwf	adConvert@chan,w,c
  1438  007A42  6EC2               	movwf	4034,c	;volatile
  1439                           
  1440                           ;Hand.c: 79: __nop();
  1441  007A44  F000               	nop	
  1442                           
  1443                           ;Hand.c: 80: __nop();
  1444  007A46  F000               	nop	
  1445                           
  1446                           ;Hand.c: 81: __nop();
  1447  007A48  F000               	nop	
  1448                           
  1449                           ;Hand.c: 82: __nop();
  1450  007A4A  F000               	nop	
  1451                           
  1452                           ;Hand.c: 84: GO = 1;
  1453  007A4C  82C2               	bsf	4034,1,c	;volatile
  1454  007A4E                     l107:
  1455  007A4E  B2C2               	btfsc	4034,1,c	;volatile
  1456  007A50  D7FE               	goto	l107
  1457                           
  1458                           ;Hand.c: 88: ADON = 0;
  1459  007A52  90C2               	bcf	4034,0,c	;volatile
  1460                           
  1461                           ;Hand.c: 89: return (ADRESH);
  1462  007A54  50C4               	movf	4036,w,c	;volatile
  1463  007A56  0012               	return	
  1464  007A58                     __end_of_adConvert:
  1465                           	opt stack 0
  1466                           tblptru	equ	0xFF8
  1467                           prodh	equ	0xFF4
  1468                           prodl	equ	0xFF3
  1469                           postinc0	equ	0xFEE
  1470                           wreg	equ	0xFE8
  1471                           indf2	equ	0xFDF
  1472                           postinc2	equ	0xFDE
  1473                           fsr2h	equ	0xFDA
  1474                           fsr2l	equ	0xFD9
  1475                           status	equ	0xFD8
  1476                           
  1477 ;; *************** function _commands *****************
  1478 ;; Defined at:
  1479 ;;		line 239 in file "Hand.c"
  1480 ;; Parameters:    Size  Location     Type
  1481 ;;		None
  1482 ;; Auto vars:     Size  Location     Type
  1483 ;;		None
  1484 ;; Return value:  Size  Location     Type
  1485 ;;                  1    wreg      void 
  1486 ;; Registers used:
  1487 ;;		wreg, status,2, status,0, cstack
  1488 ;; Tracked objects:
  1489 ;;		On entry : 0/0
  1490 ;;		On exit  : 0/0
  1491 ;;		Unchanged: 0/0
  1492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1493 ;;      Params:         0       0       0       0       0       0       0       0       0
  1494 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1495 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1496 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1497 ;;Total ram usage:        0 bytes
  1498 ;; Hardware stack levels used:    1
  1499 ;; Hardware stack levels required when called:    1
  1500 ;; This function calls:
  1501 ;;		_setPos
  1502 ;; This function is called by:
  1503 ;;		_main
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           	psect	text11
  1508  007EBC                     __ptext11:
  1509                           	opt stack 0
  1510  007EBC                     _commands:
  1511                           	opt stack 29
  1512                           
  1513                           ;Hand.c: 245: if (PORTEbits.RE3 == 0 && !modeSelect) {
  1514                           
  1515                           ;incstack = 0
  1516  007EBC  B684               	btfsc	3972,3,c	;volatile
  1517  007EBE  D005               	goto	l1365
  1518  007EC0  500B               	movf	_modeSelect,w,c
  1519  007EC2  A4D8               	btfss	status,2,c
  1520  007EC4  D002               	goto	l1365
  1521                           
  1522                           ;Hand.c: 246: isPressedForGesture = 1;
  1523  007EC6  0E01               	movlw	1
  1524  007EC8  6E09               	movwf	_isPressedForGesture,c
  1525  007ECA                     l1365:
  1526                           
  1527                           ;Hand.c: 247: }
  1528                           ;Hand.c: 248: if (PORTEbits.RE3 == 1 && isPressedForGesture && !modeSelect) {
  1529  007ECA  A684               	btfss	3972,3,c	;volatile
  1530  007ECC  0012               	return	
  1531  007ECE  5009               	movf	_isPressedForGesture,w,c
  1532  007ED0  B4D8               	btfsc	status,2,c
  1533  007ED2  0012               	return	
  1534  007ED4  500B               	movf	_modeSelect,w,c
  1535  007ED6  A4D8               	btfss	status,2,c
  1536  007ED8  0012               	return	
  1537                           
  1538                           ;Hand.c: 249: isPressedForGesture = 0;
  1539  007EDA  0E00               	movlw	0
  1540  007EDC  6E09               	movwf	_isPressedForGesture,c
  1541                           
  1542                           ;Hand.c: 250: cGesture++;
  1543  007EDE  2A0C               	incf	_cGesture,f,c
  1544                           
  1545                           ;Hand.c: 251: if (cGesture == 9)cGesture = 0;
  1546  007EE0  0E09               	movlw	9
  1547  007EE2  180C               	xorwf	_cGesture,w,c
  1548  007EE4  A4D8               	btfss	status,2,c
  1549  007EE6  D06F               	goto	l1399
  1550  007EE8  0E00               	movlw	0
  1551  007EEA  6E0C               	movwf	_cGesture,c
  1552                           
  1553                           ;Hand.c: 252: switch (cGesture) {
  1554  007EEC  D06C               	goto	l1399
  1555  007EEE                     l1379:
  1556                           
  1557                           ;Hand.c: 254: setPos(0, 0, 0, 0, 0);
  1558  007EEE  0E00               	movlw	0
  1559  007EF0  6E11               	movwf	setPos@b,c
  1560  007EF2  0E00               	movlw	0
  1561  007EF4  6E12               	movwf	setPos@c,c
  1562  007EF6  0E00               	movlw	0
  1563  007EF8  6E13               	movwf	setPos@d,c
  1564  007EFA  0E00               	movlw	0
  1565  007EFC  6E14               	movwf	setPos@e,c
  1566  007EFE  0E00               	movlw	0
  1567  007F00  EC00  F03D         	call	_setPos
  1568                           
  1569                           ;Hand.c: 255: break;
  1570  007F04  0012               	return	
  1571  007F06                     l1381:
  1572                           
  1573                           ;Hand.c: 257: setPos(255, 255, 255, 255, 255);
  1574  007F06  0EFF               	movlw	255
  1575  007F08  6E11               	movwf	setPos@b,c
  1576  007F0A  0EFF               	movlw	255
  1577  007F0C  6E12               	movwf	setPos@c,c
  1578  007F0E  0EFF               	movlw	255
  1579  007F10  6E13               	movwf	setPos@d,c
  1580  007F12  0EFF               	movlw	255
  1581  007F14  6E14               	movwf	setPos@e,c
  1582  007F16  0EFF               	movlw	255
  1583  007F18  EC00  F03D         	call	_setPos
  1584                           
  1585                           ;Hand.c: 258: break;
  1586  007F1C  0012               	return	
  1587  007F1E                     l1383:
  1588                           
  1589                           ;Hand.c: 260: setPos(0, 0, 255, 255, 0);
  1590  007F1E  0E00               	movlw	0
  1591  007F20  6E11               	movwf	setPos@b,c
  1592  007F22  0EFF               	movlw	255
  1593  007F24  6E12               	movwf	setPos@c,c
  1594  007F26  0EFF               	movlw	255
  1595  007F28  6E13               	movwf	setPos@d,c
  1596  007F2A  0E00               	movlw	0
  1597  007F2C  6E14               	movwf	setPos@e,c
  1598  007F2E  0E00               	movlw	0
  1599  007F30  EC00  F03D         	call	_setPos
  1600                           
  1601                           ;Hand.c: 261: break;
  1602  007F34  0012               	return	
  1603  007F36                     l1385:
  1604                           
  1605                           ;Hand.c: 263: setPos(0, 255, 255, 255, 0);
  1606  007F36  0EFF               	movlw	255
  1607  007F38  6E11               	movwf	setPos@b,c
  1608  007F3A  0EFF               	movlw	255
  1609  007F3C  6E12               	movwf	setPos@c,c
  1610  007F3E  0EFF               	movlw	255
  1611  007F40  6E13               	movwf	setPos@d,c
  1612  007F42  0E00               	movlw	0
  1613  007F44  6E14               	movwf	setPos@e,c
  1614  007F46  0E00               	movlw	0
  1615  007F48  EC00  F03D         	call	_setPos
  1616                           
  1617                           ;Hand.c: 264: break;
  1618  007F4C  0012               	return	
  1619  007F4E                     l1387:
  1620                           
  1621                           ;Hand.c: 266: setPos(200, 0, 0, 255, 255);
  1622  007F4E  0E00               	movlw	0
  1623  007F50  6E11               	movwf	setPos@b,c
  1624  007F52  0E00               	movlw	0
  1625  007F54  6E12               	movwf	setPos@c,c
  1626  007F56  0EFF               	movlw	255
  1627  007F58  6E13               	movwf	setPos@d,c
  1628  007F5A  0EFF               	movlw	255
  1629  007F5C  6E14               	movwf	setPos@e,c
  1630  007F5E  0EC8               	movlw	200
  1631  007F60  EC00  F03D         	call	_setPos
  1632                           
  1633                           ;Hand.c: 267: break;
  1634  007F64  0012               	return	
  1635  007F66                     l1389:
  1636                           
  1637                           ;Hand.c: 269: setPos(200, 200, 0, 0, 0);
  1638  007F66  0EC8               	movlw	200
  1639  007F68  6E11               	movwf	setPos@b,c
  1640  007F6A  0E00               	movlw	0
  1641  007F6C  6E12               	movwf	setPos@c,c
  1642  007F6E  0E00               	movlw	0
  1643  007F70  6E13               	movwf	setPos@d,c
  1644  007F72  0E00               	movlw	0
  1645  007F74  6E14               	movwf	setPos@e,c
  1646  007F76  0EC8               	movlw	200
  1647  007F78  EC00  F03D         	call	_setPos
  1648                           
  1649                           ;Hand.c: 270: break;
  1650  007F7C  0012               	return	
  1651  007F7E                     l1391:
  1652                           
  1653                           ;Hand.c: 272: setPos(0, 255, 255, 255, 255);
  1654  007F7E  0EFF               	movlw	255
  1655  007F80  6E11               	movwf	setPos@b,c
  1656  007F82  0EFF               	movlw	255
  1657  007F84  6E12               	movwf	setPos@c,c
  1658  007F86  0EFF               	movlw	255
  1659  007F88  6E13               	movwf	setPos@d,c
  1660  007F8A  0EFF               	movlw	255
  1661  007F8C  6E14               	movwf	setPos@e,c
  1662  007F8E  0E00               	movlw	0
  1663  007F90  EC00  F03D         	call	_setPos
  1664                           
  1665                           ;Hand.c: 273: break;
  1666  007F94  0012               	return	
  1667  007F96                     l1393:
  1668                           
  1669                           ;Hand.c: 275: setPos(255, 0, 255, 255, 255);
  1670  007F96  0E00               	movlw	0
  1671  007F98  6E11               	movwf	setPos@b,c
  1672  007F9A  0EFF               	movlw	255
  1673  007F9C  6E12               	movwf	setPos@c,c
  1674  007F9E  0EFF               	movlw	255
  1675  007FA0  6E13               	movwf	setPos@d,c
  1676  007FA2  0EFF               	movlw	255
  1677  007FA4  6E14               	movwf	setPos@e,c
  1678  007FA6  0EFF               	movlw	255
  1679  007FA8  EC00  F03D         	call	_setPos
  1680                           
  1681                           ;Hand.c: 276: break;
  1682  007FAC  0012               	return	
  1683  007FAE                     l1395:
  1684                           
  1685                           ;Hand.c: 278: setPos(255, 0, 255, 255, 0);
  1686  007FAE  0E00               	movlw	0
  1687  007FB0  6E11               	movwf	setPos@b,c
  1688  007FB2  0EFF               	movlw	255
  1689  007FB4  6E12               	movwf	setPos@c,c
  1690  007FB6  0EFF               	movlw	255
  1691  007FB8  6E13               	movwf	setPos@d,c
  1692  007FBA  0E00               	movlw	0
  1693  007FBC  6E14               	movwf	setPos@e,c
  1694  007FBE  0EFF               	movlw	255
  1695  007FC0  EC00  F03D         	call	_setPos
  1696                           
  1697                           ;Hand.c: 282: }
  1698                           
  1699                           ;Hand.c: 281: break;
  1700                           
  1701                           ;Hand.c: 280: default:
  1702                           
  1703                           ;Hand.c: 279: break;
  1704  007FC4  0012               	return	
  1705  007FC6                     l1399:
  1706  007FC6  500C               	movf	_cGesture,w,c
  1707                           
  1708                           ; Switch size 1, requested type "space"
  1709                           ; Number of cases is 9, Range of values is 0 to 8
  1710                           ; switch strategies available:
  1711                           ; Name         Instructions Cycles
  1712                           ; simple_byte           28    15 (average)
  1713                           ;	Chosen strategy is simple_byte
  1714  007FC8  0A00               	xorlw	0	; case 0
  1715  007FCA  B4D8               	btfsc	status,2,c
  1716  007FCC  D790               	goto	l1379
  1717  007FCE  0A01               	xorlw	1	; case 1
  1718  007FD0  B4D8               	btfsc	status,2,c
  1719  007FD2  D799               	goto	l1381
  1720  007FD4  0A03               	xorlw	3	; case 2
  1721  007FD6  B4D8               	btfsc	status,2,c
  1722  007FD8  D7A2               	goto	l1383
  1723  007FDA  0A01               	xorlw	1	; case 3
  1724  007FDC  B4D8               	btfsc	status,2,c
  1725  007FDE  D7AB               	goto	l1385
  1726  007FE0  0A07               	xorlw	7	; case 4
  1727  007FE2  B4D8               	btfsc	status,2,c
  1728  007FE4  D7B4               	goto	l1387
  1729  007FE6  0A01               	xorlw	1	; case 5
  1730  007FE8  B4D8               	btfsc	status,2,c
  1731  007FEA  D7BD               	goto	l1389
  1732  007FEC  0A03               	xorlw	3	; case 6
  1733  007FEE  B4D8               	btfsc	status,2,c
  1734  007FF0  D7C6               	goto	l1391
  1735  007FF2  0A01               	xorlw	1	; case 7
  1736  007FF4  B4D8               	btfsc	status,2,c
  1737  007FF6  D7CF               	goto	l1393
  1738  007FF8  0A0F               	xorlw	15	; case 8
  1739  007FFA  A4D8               	btfss	status,2,c
  1740  007FFC  0012               	return	
  1741  007FFE  D7D7               	goto	l1395
  1742  008000                     __end_of_commands:
  1743                           	opt stack 0
  1744                           tblptru	equ	0xFF8
  1745                           prodh	equ	0xFF4
  1746                           prodl	equ	0xFF3
  1747                           postinc0	equ	0xFEE
  1748                           wreg	equ	0xFE8
  1749                           indf2	equ	0xFDF
  1750                           postinc2	equ	0xFDE
  1751                           fsr2h	equ	0xFDA
  1752                           fsr2l	equ	0xFD9
  1753                           status	equ	0xFD8
  1754                           
  1755 ;; *************** function _checkMode *****************
  1756 ;; Defined at:
  1757 ;;		line 98 in file "Hand.c"
  1758 ;; Parameters:    Size  Location     Type
  1759 ;;		None
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;  i               1   10[COMRAM] unsigned char 
  1762 ;;  i               1    9[COMRAM] unsigned char 
  1763 ;;  cTempMode       1   11[COMRAM] unsigned char 
  1764 ;; Return value:  Size  Location     Type
  1765 ;;                  1    wreg      unsigned char 
  1766 ;; Registers used:
  1767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1768 ;; Tracked objects:
  1769 ;;		On entry : 0/0
  1770 ;;		On exit  : 0/0
  1771 ;;		Unchanged: 0/0
  1772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1773 ;;      Params:         0       0       0       0       0       0       0       0       0
  1774 ;;      Locals:         7       0       0       0       0       0       0       0       0
  1775 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1776 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1777 ;;Total ram usage:        7 bytes
  1778 ;; Hardware stack levels used:    1
  1779 ;; Hardware stack levels required when called:    1
  1780 ;; This function calls:
  1781 ;;		_setPos
  1782 ;; This function is called by:
  1783 ;;		_main
  1784 ;; This function uses a non-reentrant model
  1785 ;;
  1786                           
  1787                           	psect	text12
  1788  007DB2                     __ptext12:
  1789                           	opt stack 0
  1790  007DB2                     _checkMode:
  1791                           	opt stack 29
  1792                           
  1793                           ;Hand.c: 99: unsigned char cTempMode = cMode;
  1794                           
  1795                           ;incstack = 0
  1796  007DB2  C010  F01C         	movff	_cMode,checkMode@cTempMode
  1797                           
  1798                           ;Hand.c: 100: if (PORTEbits.RE3 == 0) {
  1799  007DB6  B684               	btfsc	3972,3,c	;volatile
  1800  007DB8  D06A               	goto	l113
  1801                           
  1802                           ;Hand.c: 101: isPressedForMode = 1;
  1803  007DBA  0E01               	movlw	1
  1804  007DBC  6E0A               	movwf	_isPressedForMode,c
  1805                           
  1806                           ;Hand.c: 102: if (!modeSelect && buttonWasLetGo) {
  1807  007DBE  500B               	movf	_modeSelect,w,c
  1808  007DC0  A4D8               	btfss	status,2,c
  1809  007DC2  D02C               	goto	l1271
  1810  007DC4  5008               	movf	_buttonWasLetGo,w,c
  1811  007DC6  B4D8               	btfsc	status,2,c
  1812  007DC8  D029               	goto	l1271
  1813                           
  1814                           ;Hand.c: 103: cDelay++;
  1815  007DCA  2A0F               	incf	_cDelay,f,c
  1816                           
  1817                           ;Hand.c: 104: if (cDelay == 20) {
  1818  007DCC  0E14               	movlw	20
  1819  007DCE  180F               	xorwf	_cDelay,w,c
  1820  007DD0  A4D8               	btfss	status,2,c
  1821  007DD2  D05D               	goto	l113
  1822                           
  1823                           ;Hand.c: 105: cDelay = 0;
  1824  007DD4  0E00               	movlw	0
  1825  007DD6  6E0F               	movwf	_cDelay,c
  1826                           
  1827                           ;Hand.c: 106: modeSelect = 1;
  1828  007DD8  0E01               	movlw	1
  1829  007DDA  6E0B               	movwf	_modeSelect,c
  1830                           
  1831                           ;Hand.c: 107: buttonWasLetGo = 0;
  1832  007DDC  0E00               	movlw	0
  1833  007DDE  6E08               	movwf	_buttonWasLetGo,c
  1834                           
  1835                           ;Hand.c: 108: for (unsigned char i = 0; i < 5; i++) {
  1836  007DE0  0E00               	movlw	0
  1837  007DE2  6E1A               	movwf	checkMode@i,c
  1838  007DE4                     l1255:
  1839  007DE4  0E04               	movlw	4
  1840  007DE6  641A               	cpfsgt	checkMode@i,c
  1841  007DE8  D001               	goto	l1259
  1842  007DEA  D051               	goto	l113
  1843  007DEC                     l1259:
  1844                           
  1845                           ;Hand.c: 109: arcPos[i] = (cTempMode == i) ? 255 : 0;
  1846  007DEC  501A               	movf	checkMode@i,w,c
  1847  007DEE  181C               	xorwf	checkMode@cTempMode,w,c
  1848  007DF0  B4D8               	btfsc	status,2,c
  1849  007DF2  D005               	goto	l1263
  1850  007DF4  0E00               	movlw	0
  1851  007DF6  6E17               	movwf	_checkMode$151+1,c
  1852  007DF8  0E00               	movlw	0
  1853  007DFA  6E16               	movwf	_checkMode$151,c
  1854  007DFC  D003               	goto	l1265
  1855  007DFE                     l1263:
  1856  007DFE  0E00               	movlw	0
  1857  007E00  6E17               	movwf	_checkMode$151+1,c
  1858  007E02  6816               	setf	_checkMode$151,c
  1859  007E04                     l1265:
  1860  007E04  501A               	movf	checkMode@i,w,c
  1861  007E06  0D01               	mullw	1
  1862  007E08  0E01               	movlw	low _arcPos
  1863  007E0A  24F3               	addwf	prodl,w,c
  1864  007E0C  6ED9               	movwf	fsr2l,c
  1865  007E0E  0E00               	movlw	high _arcPos
  1866  007E10  20F4               	addwfc	prodh,w,c
  1867  007E12  6EDA               	movwf	fsr2h,c
  1868  007E14  C016  FFDF         	movff	_checkMode$151,indf2
  1869  007E18  2A1A               	incf	checkMode@i,f,c
  1870  007E1A  D7E4               	goto	l1255
  1871  007E1C                     l1271:
  1872  007E1C  5008               	movf	_buttonWasLetGo,w,c
  1873  007E1E  B4D8               	btfsc	status,2,c
  1874  007E20  D036               	goto	l113
  1875                           
  1876                           ;Hand.c: 113: cDelay++;
  1877  007E22  2A0F               	incf	_cDelay,f,c
  1878                           
  1879                           ;Hand.c: 114: if (cDelay == 20) {
  1880  007E24  0E14               	movlw	20
  1881  007E26  180F               	xorwf	_cDelay,w,c
  1882  007E28  A4D8               	btfss	status,2,c
  1883  007E2A  D013               	goto	l1283
  1884                           
  1885                           ;Hand.c: 115: cDelay = 0;
  1886  007E2C  0E00               	movlw	0
  1887  007E2E  6E0F               	movwf	_cDelay,c
  1888                           
  1889                           ;Hand.c: 116: modeSelect = 0;
  1890  007E30  0E00               	movlw	0
  1891  007E32  6E0B               	movwf	_modeSelect,c
  1892                           
  1893                           ;Hand.c: 117: buttonWasLetGo = 0;
  1894  007E34  0E00               	movlw	0
  1895  007E36  6E08               	movwf	_buttonWasLetGo,c
  1896                           
  1897                           ;Hand.c: 118: cTempMode--;
  1898  007E38  061C               	decf	checkMode@cTempMode,f,c
  1899                           
  1900                           ;Hand.c: 119: setPos(0, 0, 0, 0, 0);
  1901  007E3A  0E00               	movlw	0
  1902  007E3C  6E11               	movwf	setPos@b,c
  1903  007E3E  0E00               	movlw	0
  1904  007E40  6E12               	movwf	setPos@c,c
  1905  007E42  0E00               	movlw	0
  1906  007E44  6E13               	movwf	setPos@d,c
  1907  007E46  0E00               	movlw	0
  1908  007E48  6E14               	movwf	setPos@e,c
  1909  007E4A  0E00               	movlw	0
  1910  007E4C  EC00  F03D         	call	_setPos
  1911                           
  1912                           ;Hand.c: 120: } else {
  1913  007E50  D01E               	goto	l113
  1914  007E52                     l1283:
  1915                           
  1916                           ;Hand.c: 121: for (unsigned char i = 0; i < 5; i++) {
  1917  007E52  0E00               	movlw	0
  1918  007E54  6E1B               	movwf	checkMode@i_152,c
  1919  007E56                     l1285:
  1920  007E56  0E04               	movlw	4
  1921  007E58  641B               	cpfsgt	checkMode@i_152,c
  1922  007E5A  D001               	goto	l1289
  1923  007E5C  D018               	goto	l113
  1924  007E5E                     l1289:
  1925                           
  1926                           ;Hand.c: 122: arcPos[i] = (cTempMode == i) ? 255 : 0;
  1927  007E5E  501B               	movf	checkMode@i_152,w,c
  1928  007E60  181C               	xorwf	checkMode@cTempMode,w,c
  1929  007E62  B4D8               	btfsc	status,2,c
  1930  007E64  D005               	goto	l1293
  1931  007E66  0E00               	movlw	0
  1932  007E68  6E19               	movwf	_checkMode$153+1,c
  1933  007E6A  0E00               	movlw	0
  1934  007E6C  6E18               	movwf	_checkMode$153,c
  1935  007E6E  D003               	goto	l1295
  1936  007E70                     l1293:
  1937  007E70  0E00               	movlw	0
  1938  007E72  6E19               	movwf	_checkMode$153+1,c
  1939  007E74  6818               	setf	_checkMode$153,c
  1940  007E76                     l1295:
  1941  007E76  501B               	movf	checkMode@i_152,w,c
  1942  007E78  0D01               	mullw	1
  1943  007E7A  0E01               	movlw	low _arcPos
  1944  007E7C  24F3               	addwf	prodl,w,c
  1945  007E7E  6ED9               	movwf	fsr2l,c
  1946  007E80  0E00               	movlw	high _arcPos
  1947  007E82  20F4               	addwfc	prodh,w,c
  1948  007E84  6EDA               	movwf	fsr2h,c
  1949  007E86  C018  FFDF         	movff	_checkMode$153,indf2
  1950  007E8A  2A1B               	incf	checkMode@i_152,f,c
  1951  007E8C  D7E4               	goto	l1285
  1952  007E8E                     l113:
  1953                           
  1954                           ;Hand.c: 123: }
  1955                           ;Hand.c: 124: }
  1956                           ;Hand.c: 125: }
  1957                           ;Hand.c: 126: }
  1958                           ;Hand.c: 128: if (PORTEbits.RE3 == 1) {
  1959  007E8E  A684               	btfss	3972,3,c	;volatile
  1960  007E90  D013               	goto	l132
  1961                           
  1962                           ;Hand.c: 129: if (isPressedForMode && modeSelect) {
  1963  007E92  500A               	movf	_isPressedForMode,w,c
  1964  007E94  B4D8               	btfsc	status,2,c
  1965  007E96  D00A               	goto	l133
  1966  007E98  500B               	movf	_modeSelect,w,c
  1967  007E9A  B4D8               	btfsc	status,2,c
  1968  007E9C  D007               	goto	l133
  1969                           
  1970                           ;Hand.c: 130: cTempMode++;
  1971  007E9E  2A1C               	incf	checkMode@cTempMode,f,c
  1972                           
  1973                           ;Hand.c: 131: if (cTempMode == 5)cTempMode = 0;
  1974  007EA0  0E05               	movlw	5
  1975  007EA2  181C               	xorwf	checkMode@cTempMode,w,c
  1976  007EA4  A4D8               	btfss	status,2,c
  1977  007EA6  D002               	goto	l133
  1978  007EA8  0E00               	movlw	0
  1979  007EAA  6E1C               	movwf	checkMode@cTempMode,c
  1980  007EAC                     l133:
  1981                           
  1982                           ;Hand.c: 132: }
  1983                           ;Hand.c: 133: buttonWasLetGo = 1;
  1984  007EAC  0E01               	movlw	1
  1985  007EAE  6E08               	movwf	_buttonWasLetGo,c
  1986                           
  1987                           ;Hand.c: 134: cDelay = 0;
  1988  007EB0  0E00               	movlw	0
  1989  007EB2  6E0F               	movwf	_cDelay,c
  1990                           
  1991                           ;Hand.c: 135: isPressedForMode = 0;
  1992  007EB4  0E00               	movlw	0
  1993  007EB6  6E0A               	movwf	_isPressedForMode,c
  1994  007EB8                     l132:
  1995                           
  1996                           ;Hand.c: 136: }
  1997                           ;Hand.c: 137: return cTempMode;
  1998  007EB8  501C               	movf	checkMode@cTempMode,w,c
  1999  007EBA  0012               	return	
  2000  007EBC                     __end_of_checkMode:
  2001                           	opt stack 0
  2002                           tblptru	equ	0xFF8
  2003                           prodh	equ	0xFF4
  2004                           prodl	equ	0xFF3
  2005                           postinc0	equ	0xFEE
  2006                           wreg	equ	0xFE8
  2007                           indf2	equ	0xFDF
  2008                           postinc2	equ	0xFDE
  2009                           fsr2h	equ	0xFDA
  2010                           fsr2l	equ	0xFD9
  2011                           status	equ	0xFD8
  2012                           
  2013 ;; *************** function _setPos *****************
  2014 ;; Defined at:
  2015 ;;		line 43 in file "Hand.c"
  2016 ;; Parameters:    Size  Location     Type
  2017 ;;  a               1    wreg     unsigned char 
  2018 ;;  b               1    0[COMRAM] unsigned char 
  2019 ;;  c               1    1[COMRAM] unsigned char 
  2020 ;;  d               1    2[COMRAM] unsigned char 
  2021 ;;  e               1    3[COMRAM] unsigned char 
  2022 ;; Auto vars:     Size  Location     Type
  2023 ;;  a               1    4[COMRAM] unsigned char 
  2024 ;; Return value:  Size  Location     Type
  2025 ;;                  1    wreg      void 
  2026 ;; Registers used:
  2027 ;;		wreg
  2028 ;; Tracked objects:
  2029 ;;		On entry : 0/0
  2030 ;;		On exit  : 0/0
  2031 ;;		Unchanged: 0/0
  2032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2033 ;;      Params:         4       0       0       0       0       0       0       0       0
  2034 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2035 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2036 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2037 ;;Total ram usage:        5 bytes
  2038 ;; Hardware stack levels used:    1
  2039 ;; This function calls:
  2040 ;;		Nothing
  2041 ;; This function is called by:
  2042 ;;		_initVariables
  2043 ;;		_checkMode
  2044 ;;		_commands
  2045 ;;		_heyKidWantSomeCandy
  2046 ;; This function uses a non-reentrant model
  2047 ;;
  2048                           
  2049                           	psect	text13
  2050  007A00                     __ptext13:
  2051                           	opt stack 0
  2052  007A00                     _setPos:
  2053                           	opt stack 29
  2054                           
  2055                           ;incstack = 0
  2056                           ;setPos@a stored from wreg
  2057  007A00  6E15               	movwf	setPos@a,c
  2058                           
  2059                           ;Hand.c: 44: arcPos[0] = a;
  2060  007A02  C015  F001         	movff	setPos@a,_arcPos
  2061                           
  2062                           ;Hand.c: 45: arcPos[1] = b;
  2063  007A06  C011  F002         	movff	setPos@b,_arcPos+1
  2064                           
  2065                           ;Hand.c: 46: arcPos[2] = c;
  2066  007A0A  C012  F003         	movff	setPos@c,_arcPos+2
  2067                           
  2068                           ;Hand.c: 47: arcPos[3] = d;
  2069  007A0E  C013  F004         	movff	setPos@d,_arcPos+3
  2070                           
  2071                           ;Hand.c: 48: arcPos[4] = e;
  2072  007A12  C014  F005         	movff	setPos@e,_arcPos+4
  2073  007A16  0012               	return		;funcret
  2074  007A18                     __end_of_setPos:
  2075                           	opt stack 0
  2076  0000                     tblptru	equ	0xFF8
  2077                           prodh	equ	0xFF4
  2078                           prodl	equ	0xFF3
  2079                           postinc0	equ	0xFEE
  2080                           wreg	equ	0xFE8
  2081                           indf2	equ	0xFDF
  2082                           postinc2	equ	0xFDE
  2083                           fsr2h	equ	0xFDA
  2084                           fsr2l	equ	0xFD9
  2085                           status	equ	0xFD8
  2086                           tblptru	equ	0xFF8
  2087                           prodh	equ	0xFF4
  2088                           prodl	equ	0xFF3
  2089                           postinc0	equ	0xFEE
  2090                           wreg	equ	0xFE8
  2091                           indf2	equ	0xFDF
  2092                           postinc2	equ	0xFDE
  2093                           fsr2h	equ	0xFDA
  2094                           fsr2l	equ	0xFD9
  2095                           status	equ	0xFD8
  2096                           
  2097                           	psect	rparam
  2098  0000                     tblptru	equ	0xFF8
  2099                           prodh	equ	0xFF4
  2100                           prodl	equ	0xFF3
  2101                           postinc0	equ	0xFEE
  2102                           wreg	equ	0xFE8
  2103                           indf2	equ	0xFDF
  2104                           postinc2	equ	0xFDE
  2105                           fsr2h	equ	0xFDA
  2106                           fsr2l	equ	0xFD9
  2107                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     14      30
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_delay
    _initVariables->_setPos
    _heyKidWantSomeCandy->_setPos
    _delay->___awdiv
    _convertSensors->_adConvert
    _commands->_setPos
    _checkMode->_setPos

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    9823
                          _checkMode
                           _commands
                     _convertSensors
                              _delay
                _heyKidWantSomeCandy
                            _initANA
                            _initOsc
                          _initPorts
                      _initVariables
                        _pulseServos
 ---------------------------------------------------------------------------------
 (1) _pulseServos                                          6     6      0     150
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _initVariables                                        0     0      0    2174
                             _setPos
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initOsc                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initANA                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _heyKidWantSomeCandy                                  0     0      0    2174
                             _setPos
 ---------------------------------------------------------------------------------
 (1) _delay                                                6     6      0     432
                                              8 COMRAM     6     6      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     386
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _convertSensors                                       4     4      0     225
                                              1 COMRAM     4     4      0
                          _adConvert
 ---------------------------------------------------------------------------------
 (2) _adConvert                                            1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _commands                                             0     0      0    2174
                             _setPos
 ---------------------------------------------------------------------------------
 (1) _checkMode                                            7     7      0    2494
                                              5 COMRAM     7     7      0
                             _setPos
 ---------------------------------------------------------------------------------
 (2) _setPos                                               5     1      4    2174
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _checkMode
     _setPos
   _commands
     _setPos
   _convertSensors
     _adConvert
   _delay
     ___awdiv
   _heyKidWantSomeCandy
     _setPos
   _initANA
   _initOsc
   _initPorts
   _initVariables
     _setPos
   _pulseServos

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      E      1E       1       31.6%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1E       6        0.0%
DATA                 0      0      1E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Jun 19 23:54:44 2017

                 _pulseServos 7CE8                            l45 79E4                            _GO 007E11  
                ___awdiv@sign 0016                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                           l113 7E8E  
                         l107 7A4E                           l132 7EB8                           l133 7EAC  
                         l141 7D36                           l143 7D5E                           l160 7CE2  
                         l145 7D86                           l147 7DAE                           l139 7D0E  
                         l983 7D26                           l969 7CFE                           l997 7D4E  
                __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000                           u987 7CF0  
                         u997 7D06                           prod 000FF3                           wreg 000FE8  
                __CFG_LVP$OFF 000000                          l1011 7D76                          l1201 7C00  
                        l1025 7D9E                          l1203 7C08                          l1221 7C40  
                        l1213 7C28                          l1205 7C0C                          l1217 7C32  
                        l1341 7C96                          l1317 7BB0                          l1421 7B20  
                        l1413 7B0C                          l1263 7DFE                          l1255 7DE4  
                        l1271 7E1C                          l1265 7E04                          l1345 7CA2  
                        l1409 7A7E                          l1417 7B14                          l1425 7B26  
                        l1283 7E52                          l1259 7DEC                          l1355 7CDE  
                        l1195 7BEA                          l1419 7B1A                          l1427 7B3A  
                        l1293 7E70                          l1285 7E56                          l1381 7F06  
                        l1365 7ECA                          l1349 7CAA                          l1189 7BDA  
                        l1295 7E76                          l1391 7F7E                          l1383 7F1E  
                        l1289 7E5E                          l1393 7F96                          l1385 7F36  
                        l1395 7FAE                          l1387 7F4E                          l1379 7EEE  
                        l1389 7F66                          l1399 7FC6                          _ADON 007E10  
                        u1007 7D18                          u1017 7D2E                          u1027 7D40  
                        u1037 7D56                          u1047 7D68                          u1057 7D7E  
                        u1067 7D90                          u1077 7DA6                          _LATA 000F89  
                        _LATB 000F8A                          u1087 7BBA                          _LATC 000F8B  
                        _main 7AFC                          indf2 000FDF                          fsr2l 000FD9  
               __CFG_BORV$190 000000                          prodl 000FF3                          start 2000  
               __CFG_IESO$OFF 000000                  ___param_bank 000000                         ?_main 0011  
             __end_of___awdiv 7C4A                         _T0CON 000FD5               ___awdiv@divisor 0013  
             ___awdiv@counter 0015                         _PORTA 000F80                         _PORTB 000F81  
                       _PORTC 000F82                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                         _cMode 0010                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000               __end_of_initANA 7A34  
              __CFG_EBTRB$OFF 000000                         _delay 7B4A               __end_of_initOsc 79EA  
                       status 000FD8                __CFG_T3CMX$RC0 000000                __CFG_MCLRE$OFF 000000  
             __initialization 79EA                  __end_of_main 7B4A                        ??_main 001F  
__size_of_heyKidWantSomeCandy 0030                 __activetblptr 000002                _convertSensors 7C4A  
      __size_of_initVariables 0038                __CFG_SDOMX$RB3 000000               __CFG_CCP2MX$RC1 000000  
                      ?_delay 0011                        _ADCON0 000FC2                        _ADCON1 000FC1  
                      _ADCON2 000FC0                        _ACTCON 000FB5                        _ADRESH 000FC4  
            ___awdiv@dividend 0011                  pulseServos@i 0012                        _ANSELA 000F5B  
                      _ANSELB 000F5C                        _ANSELC 000F5D                        _OSCCON 000FD3  
                      _PLLRDY 007E97                __CFG_XINST$OFF 000000                        _cDelay 000F  
            __end_of_commands 8000                        _nDelay 0006                     ??___awdiv 0015  
              __CFG_STVREN$ON 000000                        _arcPos 0001                        delay@i 001D  
                      clear_0 79F0              ___awdiv@quotient 0017        __end_of_convertSensors 7CE8  
                      _setPos 7A00                     ??_initANA 0011                     ??_initOsc 0011  
                      tblptru 000FF8            __size_of_adConvert 0024          __CFG_LS48MHZ$SYS48X8 000000  
                  __accesstop 0060       __end_of__initialization 79F6               __CFG_PBADEN$OFF 000000  
               _initVariables 7A88                 ___rparam_used 000001                __pcstackCOMRAM 0011  
            __CFG_nPWRTEN$OFF 000000            __size_of_checkMode 010A                 __end_of_delay 7BC6  
                ?_pulseServos 0011               ?_convertSensors 0011           _isPressedForGesture 0009  
             __CFG_PCLKEN$OFF 000000                __CFG_nLPBOR$ON 000000                       ??_delay 0019  
              ?_initVariables 0011            __size_of_initPorts 003C             __CFG_PLLSEL$PLL3X 000000  
           __end_of_adConvert 7A58               _cCycleIncrement 000D                       ?_setPos 0011  
             __CFG_WDTEN$SWON 000000                       _OSCCON2 000FD2                       _OSCTUNE 000F9B  
           __end_of_checkMode 7EBC                     ?_commands 0011           _heyKidWantSomeCandy 7A58  
                     __Hparam 0000                       __Lparam 0000                    checkMode@i 001A  
                     ___awdiv 7BC6                       __pcinit 79EA                       __ramtop 0800  
                  _modeSelect 000B               __size_of_setPos 0018                       __ptext0 7AFC  
                     __ptext1 7CE8                       __ptext2 7A88                       __ptext3 7AC0  
                     __ptext4 79D4                       __ptext5 7A18                       __ptext6 7A58  
                     __ptext7 7B4A                       __ptext8 7BC6                       __ptext9 7C4A  
              checkMode@i_152 001B          ?_heyKidWantSomeCandy 0011                       _initANA 7A18  
           __end_of_initPorts 7AFC                       _initOsc 79D4                    ??_commands 0016  
        end_of_initialization 79F6               ??_initVariables 0016                 __Lmediumconst 0000  
                     setPos@a 0015                       setPos@b 0011                       setPos@c 0012  
                     setPos@d 0013                       setPos@e 0014                 _checkMode$151 0016  
               _checkMode$153 0018                       postinc0 000FEE                       postinc2 000FDE  
       ??_heyKidWantSomeCandy 0016          __size_of_pulseServos 00CA                     _PORTEbits 000F84  
          _convertSensors$173 0013              ??_convertSensors 0012                __end_of_setPos 7A18  
         start_initialization 79EA                _buttonWasLetGo 0008                     _adConvert 7A34  
                    ??_setPos 0015                   __pbssCOMRAM 0001             _cCountFingerCycle 000E  
          convertSensors@cMax 0014             __size_of_commands 0144                     _checkMode 7DB2  
            _isPressedForMode 000A                      ?___awdiv 0011                    ?_adConvert 0011  
                    ?_initANA 0011                      ?_initOsc 0011                     _initPorts 7AC0  
              __size_of_delay 007C               convertSensors@i 0015                      _LATBbits 000F8A  
                  ?_checkMode 0011              __CFG_WDTPS$32768 000000             __CFG_CFGPLLEN$OFF 000000  
                  ?_initPorts 0011            checkMode@cTempMode 001C         __end_of_initVariables 7AC0  
                    __Hrparam 0000              pulseServos@i_164 0013              pulseServos@i_165 0014  
            pulseServos@i_166 0015              pulseServos@i_167 0016                      __Lrparam 0000  
                    _cGesture 000C            __CFG_BOREN$SBORDIS 000000   __end_of_heyKidWantSomeCandy 7A88  
               ??_pulseServos 0011              __size_of___awdiv 0084                   ??_adConvert 0011  
            __size_of_initANA 001C              __size_of_initOsc 0016                      __ptext10 7A34  
                    __ptext11 7EBC                      __ptext12 7DB2                      __ptext13 7A00  
                    _commands 7EBC                 __size_of_main 004E                   ??_checkMode 0016  
         __end_of_pulseServos 7DB2                   ??_initPorts 0011                 adConvert@chan 0011  
        __CFG_CPUDIV$NOCLKDIV 000000       __size_of_convertSensors 009E            __CFG_FOSC$INTOSCIO 000000  
